#!/usr/bin/perl -w

# Wed Sep 24 19:05:37 CEST 2008
(my $email='XXX%YYY,ch')=~ tr/%,/@./;

# Depends: (
#  (debian imagemagick convert)
#  (debian texlive-binaries pdflatex)
#  (guix imagemagick convert)
#  (guix texlive-bin pdflatex)
# )

use strict;

use Chj::IO::Command;
use Chj::xopen 'xopen_read';
our $papertype= do {
    # "a4paper", "letterpaper"
    my $in = xopen_read("/etc/papersize");
    my $cnt= $in->xcontent;
    $in->xclose;
    $cnt=~ s/\s*\z//s;
    $cnt=~ /\n/ and die "multiple lines";
    $cnt."paper"
      # another way might be to look at the time zone.. y know. for me. w'ever.
      #or: what about an env var?
};

our $horiz_border= 1; #cm

$0=~ /(.*?)([^\/]+)\z/s or die "?";
my ($mydir, $myname)=($1,$2);
sub usage {
    print STDERR map{"$_\n"} @_ if @_;
    print "$myname [-n outbasename] scanfiles

  Autochoosen paper type: $papertype

  Options:
   --horiz-border n   instead of $horiz_border cm

  (Christian Jaeger <$email>)
";
exit (@_ ? 1 : 0);
}

use Getopt::Long;
our $verbose=0;
our $outbasename= "pdf";
GetOptions("verbose"=> \$verbose,
	   "help"=> sub{usage},
	   "n=s"=> sub {
	       my ($_key,$n)=@_;
	       $n=~ m|/| and usage "no slashes allowed in outbasename";
	       $outbasename=$n
	   },
	   "horiz-border=s"=> \$horiz_border,
	   # ^ch. =n does not work for floating point. and maybe it's
	   # not bad: allow latex 'sizeentities'(ehrwiesagtman) (or
	   # even code...)
	   ) or exit 1;
usage unless @ARGV;


our ($paperwidth,$paperheight)= do {
    @{
	+{
	  letterpaper=> [21.59, 27.94],
	  a4paper=> [21.0, 29.7],
	 }->{$papertype}
	   or die "missing paper dimensions for paper type '$papertype'"
       }
};

our ($printwidth,$printheight)= do {
    my $w= $paperwidth - $horiz_border;
    ($w, ($paperheight * ($w/$paperwidth)))
};


use Chj::xtmpdir;
use Chj::xperlfunc ':all'; # :all for basename
use Chj::xrealpath;
use Chj::xtmpfile;

sub mk_scale_into {
    my ($maxw,$maxh)=@_;
    my $arearatio= $maxw/$maxh;
    sub {
	my($origw,$origh)=@_;
	# returns (width, height, verticaladjustment)
	my $ratio= $origw/$origh;
	if ($ratio > $arearatio) {
	    # wider than  wasmmr"poss"
	    my $h= $maxw / $ratio;
	    ($maxw, $h, ($maxh-$h)/2)
	} else {
	    ($maxh * $ratio, $maxh, 0)
	}
    }
}
our $scale= mk_scale_into($printwidth, $printheight);

#use Chj::Backtrace; use Chj::repl; repl;
#__END__

my $outdir= xtmpdir;

#xchdir $outdir;

#assume we are converting everything everything to png.
my $i=0;
for my $file (@ARGV) {
    my $_bn= basename $file;
    my ($bn, $suffix)= $_bn=~ /(.*)\.([^.]+)\z/s
      or die "missing suffix in file '$file'";
    my $lcsuffix= lc $suffix;
    my $outpath= "$outdir/img_$i.png";
    if ($lcsuffix eq 'png') {
	my $abspath= xrealpath $file;
	xsymlink $abspath, $outpath;
    } else {
	xxsystem "convert", $file, $outpath;
    }
    $i++
}

{
    my $outfile= "$outdir/$outbasename.tex";
    my $out= xtmpfile $outfile;
    $out->xprint (<<"END");
\\documentclass[$papertype]{article}
END
    $out->xprint (<<'END');
\usepackage{graphicx}
\usepackage[cm]{fullpage}\pagestyle{empty}
\usepackage[margin=0.1cm,noheadfoot]{geometry}
\begin{document}
END
    for my $i (0..($i-1)) {
	$out->xprint (<<'END') if $i;
\newpage
END
	my $name= "img_$i.png";
	my $path= "$outdir/$name";
	# keep ratio:
	my ($origw,$origh)= do {
	    my $in= Chj::IO::Command->new_sender("file","-L","--",$path);
	    my $cnt= $in->xcontent;
	    $in->xxfinish;
	    # tmp variable necessary -- it seems the "or" otherwise forces scalar mode.
	    # Perl is   fun
	    #or, an  [academic?na]experiment.F?
	    my @r= $cnt=~ m/PNG image, (\d+) x (\d+),/
	      or die "no match in '$cnt'";
	    @r
	};
	my ($w,$h,$adjust)= &$scale($origw,$origh);
	my $max_vspace= 1;## what should it be?
	my $vspace = ($adjust < $max_vspace ? $adjust : $max_vspace); #wl plain old min.
	$out->xprint (<<"END");
\\vspace*{${vspace}cm}
\\includegraphics[width=${w}cm,height=${h}cm]{$name}
END
    }
    $out->xprint (<<'END');
\end{document}
END
    $out->xclose;
    $out->xputback (0666 & ~umask);

    xchdir "$outdir";
    xxsystem ("pdflatex", "$outbasename.tex");
}




#use Chj::ruse;
#use Chj::Backtrace; use Chj::repl; repl;
