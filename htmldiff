#!/usr/bin/perl -w

my $copyright= <<'COPYRIGHT';
# Copyright 2003-2022 by Christian Jaeger <ch@christianjaeger.ch>
# Published under the same terms as perl itself
COPYRIGHT

use strict;

use File::Temp qw(tempfile unlink0);
use IO::File;


$0=~ /([^\/]+)$/s or die "?";
my $myname=$1;
sub usage {
    print STDERR map{"$_\n"} @_ if @_;
    print "$myname [ options ] file1 file2
  Reformat the two given html/xml files so that only 'real'
  differences show up in diff, and call tkdiff on them.
  Options:
  -c | --clean  not only make new linebreaks but also make
                tags lowercase and reorder attributes alphabetically.
  -t|--text   remove all html tags (by regex, hack?)
  --diff      run diff -u instead of tkdiff
";
exit @_ ? 1 : 0;
}

my @files;
my $DEBUG=0;
my (
    $opt_clean,
    $opt_text,
    $opt_diff,
    );
for (my $i=0; $i<=$#ARGV; $i++) {
    local $_=$ARGV[$i];
    if (/^--?h(elp)?$/) {
    	usage
    } elsif ($_ eq '--') {
    	push @files, @ARGV[$i+1..$#ARGV];
    	last;
    } elsif (/^--debug$/) {
	$DEBUG=1;
    } elsif (/^--?c(lean)?$/) {
	$opt_clean=1;
    } elsif (/^--?t(ext)?$/) {
	$opt_text=1;
    } elsif (/^--diff$/) {
	$opt_diff=1;
    } elsif (/^-/) {
    	warn "Unknown option '$_'\n";
    	usage(1)
    } else {
    	push @files, $_
    }
}
usage unless @files==2;


# Remove all line breaks,
# add a line break before and after every tag,
# make non-linebreak whitespace uniform,
# add a line break after every ". ".

sub tagcleanup {
    my ($s)=@_;
    return $s unless $opt_clean;
    if ($s=~ s/^<(\/?[\w:-]+)//) {
	my $tagname= lc($1); # tagname includes '/' for end tags
	$s=~ s/(\/?>)$//s or die "?";
	my $closure= $1;
	my %attr;
	$s=~ s/([\w:-]+)\s*=\s*"([^"]*)"/$attr{lc($1)}=$2;""/sge;
	$s=~ s/([\w:-]+)\s*=\s*'([^']*)'/$attr{lc($1)}=$2;""/sge;
	$s=~ s/([\w:-]+)\s*=\s*(\S*)/$attr{lc($1)}=$2;""/sge;
	my @flags= split /\s+/,$s; #$s=~ /([\w:-]+)/g;
	if (@flags or %attr){
	    "<$tagname ".join(" ",map{my $a=$attr{$_};
				      $a=~ s/"/\&quot;/sg;
				      "$_=\"$a\""} sort keys %attr)
	      .join(" ",@flags)
	      .$closure
	} else {
	    "<$tagname$closure"
	}
    } else {
        $s
    }
}


sub diffprepare {
    my ($str)= @_;
    $str=~ s/\s+/ /sg;
    $str=~ s/\s*(<[^>]+>)\s*/"\n".($opt_text ? "" : tagcleanup($1)."\n")/sge;
    $str=~ s/\. /.\n/sg;
    $str=~ s/\n\n/\n/sg; # why is this necessary?
    $str=~ s/^\n//s; # and why that?
    $str
}


my @tmpfiles;

my @tmpnames;
TRY: {
    for my $n (1..10) {
	@tmpnames = map {
	    m|((?:/?[^/]+){$n})\z|s ? $1 : $_
	} @files;
	last TRY if $tmpnames[0] ne $tmpnames[1];
    }
    die "the two paths are the same!";
}

sub maxdashes {
    my ($str)=@_;
    my $max=0;
    $str=~ s/(-+)/
      if (length($1)>$max) { $max= length($1) }
    /sge;
    $max
}

my $ndashes = maxdashes($tmpnames[0]);
my $ndashes1 = maxdashes($tmpnames[1]);
if ($ndashes1 > $ndashes) {
    $ndashes = $ndashes1;
}

for (0..1) {
    my $name = $tmpnames[$_];
    $name =~ s|/|"-"x($ndashes+1)|sge;
    my ($fh, $filename) = tempfile "${name}.XXXX", DIR=>"/tmp";
    my $fhin = IO::File->new($files[$_], O_RDONLY)
        or die "can't open '$files[$_]': $!";
    my $in= do {
        local $/;
        <$fhin> # errors?
    };
    $fhin->close
        or die "error reading/closing file '$files[$_]': $!";
    $fh->autoflush(1);
    print $fh diffprepare($in)
        or die "writing to tempfile: $!";
    $tmpfiles[$_]= [$fh,$filename];
}

system(($opt_diff ? ("diff", "-u") : "cj-guidiff"),
       map {$_->[1]} @tmpfiles);

unlink0(@$_) for @tmpfiles;
