#!/usr/bin/env perl

my $copyright= <<'COPYRIGHT';
# Copyright 2021 by Christian Jaeger <ch@christianjaeger.ch>
# Published under the same terms as perl itself
COPYRIGHT

use strict;
use utf8;
use warnings;
use warnings FATAL => 'uninitialized';
use experimental 'signatures';

use Getopt::Long;
use Chj::xperlfunc qw(xchdir xlstat xstat Xlstat xxsystem xgetfile_utf8);
use FP::Div qw(max);
use Chj::xIOUtil qw(xputfile_utf8);

# use FP::Repl::Trap; #

my ($email_full)= $copyright=~ / by ([^\n]*)/s;

my ($mydir, $myname);
BEGIN {
    $0=~ /(.*?)([^\/]+)\z/s or die "?";
    ($mydir, $myname)=($1,$2);
}

sub usage {
    print STDERR map{"$_\n"} @_ if @_;
    print "$myname  [file.md ..]

  Retranslate the given markdown files (or all in the current
  repository) to html if the .md is newer than the .html

  Options:

     -a|--all      translate all .md files in the current git 
                   repository
     -v|--verbose  print what's happening
     --suffix str  use str instead of md as the suffix

  ($email_full)
";
exit (@_ ? 1 : 0);
}

our $verbose=0;
our $opt_all=0;
our $opt_suffix;
#our $opt_dry;
GetOptions("help"=> sub{usage},
	   "verbose"=> \$verbose,
           "all"=> \$opt_all,
           "suffix=s"=> \$opt_suffix,
	   #"dry-run"=> \$opt_dry,
	   ) or exit 1;

sub Log {
    warn @_, "\n"
	if $verbose;
}

my ($suffix) = defined($opt_suffix) ?
    $opt_suffix=~ /^([^']+)\z/s
    : "md"
    or usage "invalid suffix $opt_suffix";


sub source2html($sourcepath) {
    my $htmlpath = $sourcepath;
    $htmlpath =~ s{\.$suffix\z}{.html}s
	or die "source path not ending in .$suffix: '$sourcepath'";

    my $generate = sub() {
	xxsystem "pandoc", "-s", "-o", $htmlpath, $sourcepath;
	# Change .$suffix links to .html (HACK):
	my $s = xgetfile_utf8 $htmlpath;
	$s =~ s{(href\s*=\s*"[^"]*)\.$suffix(")}{${1}.html${2}}sg;
	#use FP::Repl;repl if $sourcepath=~ /index/;
	xputfile_utf8 $htmlpath, $s;
    };
    
    if (my $starget = Xlstat $htmlpath) {
	my $t_target = $starget->mtime;
	my $ssource = xlstat($sourcepath);
	my $t_source = $ssource->is_link ?
	    max($ssource->mtime,
		xstat($sourcepath)->mtime,)
	    : $ssource->mtime;
	if ($t_target <= $t_source) {
	    Log "regenerating '$htmlpath'";
	    $generate->()
	} else {
	    Log "'$htmlpath' is up to date";
	}
    } else {
	Log "generating '$htmlpath'";
	$generate->()
    }
}

if (@ARGV) {
    source2html $_ for @ARGV;
} elsif ($opt_all) {
    my $gitdir = `git rev-parse --git-dir`;
    $? == 0 or die "git failed";
    chomp $gitdir;
    xchdir "$gitdir/..";
    
    my @files = `gls-of-suffix '$suffix'`; chomp @files;
    source2html $_ for @files;
} else {
    usage "missing file arguments or -a option";
}


