#!/usr/bin/perl -w

# Thu 23 Jul 22:20:51 BST 2020
(my $email='ch%christianjaeger,ch')=~ tr/%,/@./;

use strict; use warnings FATAL => 'uninitialized';
use utf8;

$0=~ /(.*?)([^\/]+)\z/s or die "?";
my ($mydir, $myname)=($1,$2);
sub usage {
    print STDERR map{"$_\n"} @_ if @_;
    print "$myname [datestring(s)]

  Parse the given date string(s) (or read all of stdin as one
  datestring) and show it/them as unixtime and localtime on stdout.
  If string contains some kind of dash or 'to', it will parse both
  start and end time and show them both with a minus inbetween.

  Accepts locations in Continent/City format as well as some
  abbreviated time zones without daylight savings information (PT,
  ET, BT).

  If the TZ env var is set, adds the time zone name to the output.

  Also see sleep-better.

  (Christian Jaeger <$email>)
";
exit (@_ ? 1 : 0);
}

use Getopt::Long;
our $verbose=0;
#our $opt_dry;
GetOptions("verbose"=> \$verbose,
	   "help"=> sub{usage},
	   #"dry-run"=> \$opt_dry,
	   ) or exit 1;
#usage unless @ARGV;

use Date::Parse;
use Encode qw(decode_utf8);


sub european2us {
    # turn European to US date format -- *assuming* that no US dates
    # ever use the dot:
    my ($str)= @_;
    if (my ($pre, $day,$mon,$maybe_year, $post)=
        $str=~ /^(.*?)\b(\d+)\.(\d+)(?:\.(\d+\b)?)?(.*)\z/s) {
        if ($pre=~ /:\z/) {
            # 10:01:13.499132167
            $str
        } else {
            # *have* to use dots as neither 27/7/ nor 27/7 is accepted by
            # str2time
            my $usdate= "$mon.$day.".($maybe_year //"");
            "$pre $usdate ".european2us($post);
        }
    } else {
        $str
    }
}

sub tzname_of_location_for_t {
    my ($location, $unixtime)= @_;
    require DateTime::TimeZone;
    my $tz= DateTime::TimeZone->new(name=> $location);
    my $dt= DateTime->from_epoch(epoch=> $unixtime);
    $tz->short_name_for_datetime ($dt)
}

sub pars {
    my ($tz_offsetter, $str)=@_;
    my $usstr= european2us($str);
    my $t_possibly_UTC= Date::Parse::str2time $usstr
        or die "Date::Parse::str2time failed for: '$usstr'";
    my $t= $tz_offsetter->($t_possibly_UTC, $str);
    my $lt= localtime $t;
    if (my $TZ= $ENV{TZ}) {
        my $tzname= tzname_of_location_for_t $TZ, $t;
        $lt=~ s/ (\d{4})\z/ $tzname $1/
            or die "could not find year at the end of: '$lt'";
    }
    [ $t, $lt ]
}

sub pt {
    my $tz_offsetter= shift;
    my @ps= map { pars $tz_offsetter, $_ } @_;
    my @ts= map { $$_[0] } @ps;
    my @ls= map { $$_[1] } @ps;
    my $t = join(" - ", @ts);
    my $l = join(" - ", @ls);
    print "$t  $l\n"
        or die "stdout: $!";
}

sub offsetter_for_TZ {
    my ($location, $origTZ) = @_;
    #require FP::Repl::AutoTrap;
    require DateTime::TimeZone;
    my $tz= DateTime::TimeZone->new(name=> $location);
    sub {
        my ($unixtime_parsedAsUTC, $str) = @_;
        my $dt= DateTime->from_epoch(epoch=> $unixtime_parsedAsUTC);
        $str=~ s/\bUTC\b/$origTZ/sg or warn "bug?";
        $str=~ s/\s+/ /sg;
        $str=~ s/^ +//;
        $str=~ s/ \z//;
        my $TZstr = $tz->short_name_for_datetime ($dt);
        warn "$str: assuming $TZstr\n";
        my $offset = $tz->offset_for_datetime($dt);
        $unixtime_parsedAsUTC - $offset
    }
}


# Meetup.com, in their Emails, uses "PT" for Pacific time without DST
# specification; deal with that.
our $nondst_zone_names= +{
    PT=> "America/Los_Angeles",
    Pacific=> "America/Los_Angeles",
    # "Pacific Standard Time" (PST) when standard time is
    # being observed (early November to mid-March)
    # "Pacific Daylight Time" (PDT) when daylight saving
    # time (mid-March to early November) is being observed.
    MT=> 'America/Phoenix', # MST
    Mountain=> 'America/Phoenix', # MST
    # Mountain Time Zone, Mountain Daylight Time
    CT=> 'America/Chicago', # CDT
    # Central Time Zone, Central Daylight Time
    ET=> "America/New_York",
    # Eastern Standard Time, when observing standard time
    # (autumn/winter) are five hours behind Coordinated
    # Universal Time (UTC−05:00).
    # Eastern Daylight Time, when observing daylight saving
    # time (spring/summer), is four hours behind Coordinated
    # Universal Time (UTC−04:00).

    BT=> 'Europe/London',

    JT=> 'Asia/Tokyo',

    # We're now using country codes, really?
    CH=> 'Europe/Zurich',
    DE=> 'Europe/Berlin',
    SE=> 'Europe/Stockholm',
};

our $city2nondst_zone_name= +{
    Zurich=> "CH",
    "Zürich"=> "CH",
    Bern=> "CH",
    Switzerland=> "CH",
    Berlin=> "DE",
    Germany=> "DE",
    Stockholm=> "SE",
    "Malmö"=> "SE",
    Sweden=> "SE",
    London=> "BT",
    New_York=> "ET",
    "New York"=> "ET",
    Boston=> "ET",
    Miami=> "ET",
    Orlando=> "ET",
    Detroit=> "ET",
    Pittsburgh=> "ET",
    Richmond=> "ET",
    "Salt Lake City"=> "MT",
    Phoenix=> "MT",
    Denver=> "MT",
    Dallas=> "CT",
    Chicago=> "CT",
    Houston=> "CT",
    "New Orleans"=> "CT",
    Seattle=> "PT",
    "Los_Angeles"=> "PT",
    "Los Angeles"=> "PT",
    "San Francisco"=> "PT",
    "San_Francisco"=> "PT",
    Portland=> "PT",
    Tokyo=> 'JT',
};

# Used to accept e.g. 'Europe/Zurich'
our $continents=
    # from DateTime::TimeZone::all_names
    ['Africa', 'America', 'Antarctica', 'Asia', 'Atlantic', 'Australia',
     'Europe', 'Indian', 'Pacific'];

sub _pr {
    my ($str)= @_;

    my $tz_offsetter= do {
        my $origstr= $str;
        my @replacements= map {
            my $n= $str=~ s/\b$_\b/UTC/sg;
            # ^ XX bug: multiple are all replaced but multiple 'UTC'
            #   makes parsing fail later
            if ($n) {
                [$_, $n]
            } else {
                ()
            }
        } sort keys %$nondst_zone_names;

        if (@replacements==0) {
            # check if locations are mentioned:
            my @replacements= do {
                my $cre= join("|", @$continents);
                my %r;
                while ($str=~ s{\b((?:$cre)/\w+)\b}{UTC}s) {
                    $r{$1}++
                }
                sort keys %r
            };
            if (@replacements==0) {
                # check if cities are mentioned:
                my @replacements = map {
                    my $n = $str=~ s/\b$_\b/UTC/sgi;
                    # UTC is the hack so that we can do offset
                    # ourselves, right?
                    if ($n) {
                        [$_, $n]
                    } else {
                        ()
                    }
                } sort keys %$city2nondst_zone_name;

                if (@replacements == 0) {
                    sub { $_[0] }
                } elsif (@replacements == 1) {
                    my ($city, $n)= @{$replacements[0]};
                    my $nondstTZ = $city2nondst_zone_name->{$city} || die "bug";
                    my $location= $nondst_zone_names->{$nondstTZ} || die "bug";
                    offsetter_for_TZ $location, $nondstTZ
                } else {
                    die("$myname: more than one city/country used, "
                        ."can't currently deal with that: "
                        .join(", ", map { $$_[0] } @replacements)
                        ."\n")
                }
            } elsif (@replacements==1) {
                offsetter_for_TZ $replacements[0], $replacements[0]
            } else {
                die("$myname: more than one location used, "
                    ."can't currently deal with that: "
                    .join(", ", @replacements)
                    ."\n")
            }
        } elsif (@replacements==1) {
            my ($nondstTZ, $n)= @{$replacements[0]};
            my $location= $nondst_zone_names->{$nondstTZ} || die "bug";
            offsetter_for_TZ $location, $nondstTZ
        } else {
            die("$myname: more than one non-dst time zone name used, "
                ."can't currently deal with that: "
                .join(", ", map { $$_[0] } @replacements)
                ."\n")
        }
    };

    my @p= split /(?:-|—|\b(?:to|bis|à)\b) (?!\d{4}\b)/x, $str;
    if (@p==1) {
        pt $tz_offsetter, $p[0]
    } elsif (@p==2) {
        my ($from,$to)=@p;
        eval {
            my ($frombegin,$fromt)= $from=~
                /^(.*?)\b(\d+:\d+(?::\d+)?(?:\s*(?:pm|am))?)\s*$/si
                or die "no match for first part: '$from'";
            my ($tot,$torest)= $to=~
                /^\s*\b(\d+:\d+(?::\d+)?(?:\s*(?:pm|am))?)(.*)/si
                or die "no match for latter part: '$to'";
            my $t1= "$from $torest";
            my $t2= "$frombegin $to";
            pt $tz_offsetter, $t1, $t2;
            1
        } or do {
            my $e1= $@; # XX ignore??
            pt $tz_offsetter, $from, $to
        };
    } elsif (@p==3
             and $p[0]=~ /\d\z/
             and $p[1]=~ /^\d+\z/
             and $p[2]=~ /^\d/) {
        pt $tz_offsetter, $str
    } elsif (@p==0) {
        # wow, didn't realize split does this (or is this new?)
        die "no input";
    } else {
        die "can't handle more than one dash in: '$str'";
    }
}


sub pr {
    my ($str)=@_;
    eval {
	_pr $str;
	1
    } || do {
	my $e1= $@;
	my $str_= $str;
	# `date_` style format:
	$str_=~ s/_(\d{2})(\d{2})(\d{2})_/ $1:$2:$3 /sg;
	$str_=~ s/_/ /sg;
	# cj-tim (Emacs) style format:
	$str_=~ s/\{(?:mtime)?(.+?)\}/$1/sg;
	if ($str eq $str_) {
	    die $e1
	} else {
	    eval {
		_pr $str_;
		1
	    } || do {
		my $e2= $@;
		if ($e1 eq $e2) {
		    die $e1
		} else {
		    die ("Exceptions with original and with underscores replaced by space:\n"
			 . "  $e1"
			 . "  $e2")
		}
	    }
	}
    }
}

#pr "2:00 PM — 5:30 PM UTC+00:00"

if (@ARGV) {
    pr $_ for map { decode_utf8 $_ } @ARGV;
} else {
    my $str= do {
        local $/;
        <STDIN>
    };
    close STDIN or die "stdin: $!";
    pr decode_utf8 $str;
}
