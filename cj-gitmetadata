#!/usr/bin/perl -w

# Mon Dec  7 23:55:11 EST 2009
(my $email='christian-novo%jaeger,mine,nu')=~ tr/%,/@./;

use strict; use warnings FATAL => 'uninitialized';

use Getopt::Long;
use Chj::xperlfunc ':all';
use Chj::xopen qw(perhaps_open_read xopen_write);
use POSIX qw(ENOENT);
use Chj::xopen 'xopen_read';
use Chj::Path;
use Chj::xtmpdir;
use Chj::IO::Command;
use Chj::Parallel_for_each;
use Chj::xpipe;
use Chj::Git::Functions 'git_ls_files';
# plus those in nested namespaces

our $metadatadir=".METADATA-v2";
our $metadataignorepath= "$metadatadir.ignore";
our $metadataoptionspath= "$metadatadir.options";

my $opt_optimize=1;

$0=~ /(.*?)([^\/]+)\z/s or die "?";
my ($mydir, $myname)=($1,$2);
sub usage {
    print STDERR map{"$_\n"} @_ if @_;
    print "$myname save|restore [files to restore]

  save: create a directory '$metadatadir' which contains metadata
  information for all files in the current repository except for the
  '$metadatadir' dir itself and, if present, the files listed in
  '$metadataignorepath' (it does *not* git-add or commit it
  automatically currently). Note that any path listed it that file is
  treated as a filename (and excluded everywhere it's found, not just
  in the root level) if it does not contain a slash. Use './foo' to
  only exclude foo in the top level.

  restore: read '$metadatadir', and restore the contained metadata to
  all files, [except if they have a newer mtime than stored in the
  metadatafile?]

  NOTE: saves/expects on the current directory and subdirs only and
  expects '$metadatadir' in the current directory. So if you want to
  track metadata of the whole repository, cd to the root of the
  working dir first.

  Also, only the files in the current HEAD are tracked ('of course').

  Options:
     
     these can also be written to '$metadataoptionspath',
     without the leading '--', one per line. Those given
     as command arguments have precedence.

   --no-user-group
       do not record user nor group (still restore whatever is stored)

   --no-mtime / --no-times
       don't restore mtime, only user/group/permissions

   --ignore-chown-errors
       if chown fails with EPERM then still execute the chmod
       afterwards, unless the chmod requests to set the setuid or
       setgid bits, in which case the default behaviour still happens,
       which reports a warning and leaves permissions at 0.


  (Christian Jaeger <$email>)
";
exit (@_ ? 1 : 0);
}

our $verbose=0;
our $opt_no_user_group;
our $opt_no_time;
our $opt_ignore_chown_errors;

my $maybe_config_read_exn;
eval {
    if (-e $metadataoptionspath) {
        my $in = xopen_read $metadataoptionspath;
        my @l = $in->xreadline;
        $in->xclose;
        chomp @l;
        my %opts = map {
            if (/^\s*#/s) {
                ()
            } elsif (/^\s*([\w-]+)\s*$/s) {
                # The value `1` is nice for pulling out; have no opts with
                # values for now.
                ($1 => 1)
            } else {
                die "$myname: invalid line in '$metadataoptionspath': "
                    . "'$_'";
            }
        } @l;
        $opt_no_user_group = delete $opts{"no-user-group"};
        my $no_mtime = delete $opts{"no-mtime"};
        my $no_times = delete $opts{"no-times"};
        $opt_no_time = $no_mtime || $no_times;
        $opt_ignore_chown_errors = delete $opts{"ignore-chown-errors"};
        if (my @k = keys %opts) {
            die "$myname: unknown options in '$metadataoptionspath': "
                . join (", ", sort @k)
        }
    }
    1
} or do {
    $maybe_config_read_exn = $@;
};

GetOptions("verbose"=> \$verbose,
	   "help"=> sub{usage},
	   "no-user-group"=> \$opt_no_user_group,
	   "no-times"=> \$opt_no_time,
	   "no-mtime"=> \$opt_no_time,
	   "ignore-chown-errors"=> \$opt_ignore_chown_errors,
	   ) or exit 1;

die $maybe_config_read_exn if defined $maybe_config_read_exn;

usage unless @ARGV>=1;

our ($command,@args)= @ARGV;


# not fast, but 'easy'
sub xsymlink_set_mtime ($$) {
    my ($path, $time)=@_;
    xxsystem("touch", "--no-dereference", "-d", localtime($time)."",
	     "--", $path);
}

sub xContent ( $ ; $) {
    my ($path, $maybe)= @_;
    if (my $f= perhaps_open_read $path) {
	my $cntrf= $f->xcontentref;
	$f->xclose;
	$$cntrf
    } else {
	if ($maybe and $! == ENOENT) {
	    undef
	} else {
	    die "open_read '$path': $!";
	}
    }
}

sub XContent ($) {
    my ($path)= @_;
    xContent ($path, 1)
}

sub xPutfile ( $ $ ) { # the above should then be called xGetfile ?
    my ($path,$str)=@_;
    #my $f= xtmpfile $path;
    #or, really just write directly, here, since in a tmpdir anyway already.'man', heh.
    my $f= do {
	my $f= eval {
	    xopen_write $path;
	};
	if (ref $@ or $@) {
	    my $e=$@;
	    my $errno=$!+0;
	    if ($errno == ENOENT) {
		my $lp; $lp= sub {
		    my ($d)= @_;
		    if ($d eq "." or $d eq "/") {
			# end
		    } else {
			if (-e $d) {
			    # end
			} else {
			    &$lp (dirname $d);
			    mkdir $d;
			}
		    }
		};
		&$lp (dirname $path);
		undef $lp;
		xopen_write $path;
	    } else {
		die $e
	    }
	} else {
	    $f
	}
    };
    $f->xprint ($str);
    $f->xclose;
    # thatsit
}
##/lib


{
    package CHJ::Metadata;
    use POSIX 'EPERM';
    our @ct_statfields;
    BEGIN {
	@ct_statfields=
	  (
	   #'atime', no good, because some filesystems are not mounted noatime
	   'mtime',
	   # inode: nope, since not stable across filesystems
	   'permissions', #incl setuid and such, right?.
	   'type', #not settable of course. but checkable, ok?. like symlink vs file.

           # On writing only used if !$opt_no_user_group, on reading
           # only if any stored record does contain those fields:
	   'caching_username', #not uid, right?
	   #'uid', #keep anyway? no would give bad diff
	   'caching_groupname',
	  );
    }
    use Class::Array -fields=>
      -publica=>
	(
	 'path',
         'restore_no_user_group',
	 @ct_statfields,
	);
    our @write_statfields=
      $opt_no_user_group
      ? @ct_statfields[0,1,2]
      : @ct_statfields[0,1,2,3,4];

    sub new_from_stat {
	my $cl=shift;
	my ($path,$stat)=@_;
	my $s=$cl->SUPER::new;
	$$s[Path]=$path;
	for my $field (@write_statfields) {
	    my $setmethod="set_$field";
	    $s->$setmethod($stat->$field);
	}
	$s
    }
    use Chj::xperlfunc 'xlstat','xutime','xchmod','xchown','Xlstat';
    sub maybe_new_from_path {
	my $cl=shift;
	my ($path)=@_;
	if (my $s= Xlstat($path)) {
	    $cl->new_from_stat($path, $s);
	} else {
	    undef
	}
    }
    use Chj::schemestring 'schemestring_oneline','parse_schemestring';
    sub stringify {
	my $s=shift;
	join("\t", #to make parsing easy
	     map {
		 scalar schemestring_oneline(scalar $s->$_)
	     }
	     (
	      @write_statfields,
	     ))
    }
    sub new_from_path_string { #parse
	my $cl=shift;
	my ($path,$str)=@_;
	my $s=$cl->SUPER::new;
	my @v=
	  (
	   map {
	       scalar parse_schemestring $_
	   }
	   split /\t/, $str
	  );
	$s->[Restore_no_user_group]= do {
            if (@v == 3) { 1 }
            elsif (@v == 5) { 0 }
            else { die "invalid number of fields in str '$str':", @v }
        };
	# pairing how?...
	$$s[Path]= $path;
	for (my $i=0; $i < @v; $i++) {
	    my $field= $ct_statfields[$i];
	    my $setmethod="set_$field";
	    $s->$setmethod($v[$i]);
	}
	$s
    }
    # equal method needed?
    sub restore {
	my $s=shift;
	my ($stat, # since I already have it at hands..
	   )=@_;
	if ($stat->type eq $s->type) {
	    if ($stat->mtime != $s->mtime
		and not $opt_no_time) {
		if ($stat->is_link) {
		    main::xsymlink_set_mtime($s->path, $s->mtime);
		} else {
		    # (keep old atime)
		    xutime $stat->atime,$s->mtime, $$s[Path];
		}
	    }
	    unless ($s->[Restore_no_user_group]) {
		if (($stat->uid != $s->xuid)
		    or
		    ($stat->gid != $s->xgid)
		    or
		    ($stat->permissions != $s->permissions)) {
		    # make it safe: first disable all access, then
		    # set owner, then set perms.
		    xchmod 0, $$s[Path];
		    eval {
			$! = 0;
			xchown $s->xuid, $s->xgid, $s->path;
			1
		    } || do {
			if ($! == EPERM
			    and $opt_ignore_chown_errors
			    and not $stat->permissions_s) {
			    # silently go on
			} else {
			    die $@
			}
		    };
		    xchmod $$s[Permissions], $$s[Path];
		}
	    }
	} else {
	    die "changed type: ".$stat->type." vs ".$s->type;
	}
    }
    sub atime {
	my $s=shift;
	die "not available";
    }
    sub mkx_id {
	my ($idname, $namemethod, $op)=@_;
	sub {
	    my $s=shift;
	    my $name= $s->$namemethod;
	    if (defined (my $res=$op->($name))) {
		$res
	    } else {
		die "x$idname: unknown $namemethod: $name";
	    }
	}
    }
    sub xuid; sub xgid;#prevent warning sigh.
    use Chj::xperlfunc 'caching_getpwnam','caching_getgrnam';
    *xuid= mkx_id ("uid", "caching_username", \&caching_getpwnam);
    *xgid= mkx_id ("gid", "caching_groupname", \&caching_getgrnam);
    end Class::Array;
}


sub pathstr_canonicalize {
    my ($pathstr)=@_;
    Chj::Path->new_from_string ($pathstr)->canonicalize->string
}

our $ignore_path=
  +{
    $metadatadir=> 1,
    $metadataignorepath=> 1,
   };

our $ignore_filename=
  +{
   };

if (-f $metadataignorepath) {
    my $in=xopen_read $metadataignorepath;
    while (<$in>) {
	chomp;
	next if (/^\s*\z/ or /^\s*\#/);
	my $is_path= /\//; # use "./foo" to ignore foo at the toplevel only!
	my $str= pathstr_canonicalize ($_);
	${$is_path ? $ignore_path : $ignore_filename}{$str}++;
    }
    $in->xclose;
}

sub dir_or_fold {
    my ($pred,$d)=@_;
    if ($d eq "." or $d eq "/") {
	0
    } else {
	(&$pred ($d)) or do {
	    @_=($pred, dirname $d); goto &dir_or_fold;
	}
    }
}

sub _ignore {
    my ($path)=@_;
    $$ignore_path{$path} or $$ignore_filename{basename $path}
}
sub ignore_path {
    my ($path)=@_;
    dir_or_fold (*_ignore, $path)
}


our $commands=
  +{
    save=> sub {
	usage "save cannot take path arguments"
	  if @args;
	
	mkdir $metadatadir;

	my $outdir=
	  $opt_optimize ? $metadatadir : xtmpdir $metadatadir;

	my $now_files= git_ls_files;

	my ($seen_r, $seen_w);
	my $deletepid;
	if ($opt_optimize) {
	    # collect seen paths from all subprocesses, in a
	    # subprocess, then delete the now unused entries in the
	    # metadatadir

	    ($seen_r, $seen_w)= xpipe;
	    $seen_w->autoflush(1);

	    if ($deletepid= xfork) {
		$seen_r->xclose;
	    } else {
		$seen_w->xclose;

		my %new_path;
		# children are sending in parallel, *counting on the
		# OS* not mixing them up. XXX safety?
		while (defined (my $v= $seen_r->xreadline0_chop)) {
		    # actually existing path, i.e. path newly saved
		    # into $metadatadir, i.e. what we must not delete.
		    $new_path{$v}=1;
		}
		$seen_r->xclose;
		
		xchdir $metadatadir;

		my $files_of_type= sub {
		    my ($type)=@_;
		    my $c= Chj::IO::Command->new_sender
		      ("/usr/bin/find", "-type", $type, "-print0");
		    map {
			$_ eq "." ? () : do {
			    s|^\./|| or die "path not starting with ./: '$_'";
			    $_
			}
		    }
		      $c->xreadline0_chop
		};

		# This also yields new paths
		for (&$files_of_type ("f")) {
		    unless ($new_path{$_}) {
			xunlink $_
		    }
		}

		# (try to) remove (possibly) stale dirs
		for (reverse sort &$files_of_type ("d")) {
		    rmdir $_
		}

		exit 0;
	    }
	}

	Parallel_for_each
	  ($now_files,
	   sub {
	       my ($path)=@_;
	       if (not ignore_path($path)) {
		   if (my $metadata= CHJ::Metadata->maybe_new_from_path ($path)) {
		       $seen_w->xprint($path,"\0");
		       my $content= $metadata->stringify."\n";
		       my $path= "$outdir/$path";
		       my $oldcontent;
		       if ($opt_optimize
			   and defined ($oldcontent= XContent($path))
			   and $oldcontent eq $content) {
			   # do nothing
		       } else {
			   xPutfile($path, $content);
		       }
		   } else {
		       warn "path '$path' doesn't exist (anymore)\n";
		   }
	       }
	   });

	$seen_w->xclose;

	if ($opt_optimize) {
	    xxwaitpid $deletepid
	} else {
	    xxsystem ("rm","-rf","--",$metadatadir);
	    $outdir->autoclean(0);
	    xrename "$outdir", $metadatadir;
	}
    },
    restore=> sub {
	my $metadatapaths= @args ?
	  [
	   map {
	       "$metadatadir/$_"
	   } @args
	  ]
	    : git_ls_files($metadatadir);

	Parallel_for_each
	  ($metadatapaths,
	   sub {
	       my ($metadatapath)=@_;
	       my $path= substr($metadatapath,length ($metadatadir) + 1);
	       eval {
		   local our $metadata= CHJ::Metadata->new_from_path_string
		     ($path, xContent($metadatapath));
		   my $path= $metadata->path;
		   local our $s= xlstat $path;
		   $metadata->restore($s);
	       };
	       if (ref $@ or $@) {
		   print STDERR "warn: '$path': $@";
	       }
	   });
    }
   };
if (my $c= $$commands{$command}) {
    &$c
} else {
    usage "unknown command '$command'"
}


