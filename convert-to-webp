#!/usr/bin/env perl

my $copyright= <<'COPYRIGHT';
# Copyright 2022 by Christian Jaeger <ch@christianjaeger.ch>
# Published under the same terms as perl itself
COPYRIGHT

use strict;
use utf8;
use warnings;
use warnings FATAL => 'uninitialized';
use experimental 'signatures';

use Getopt::Long;
# use FP::Repl::Trap; #

my ($email_full)= $copyright=~ / by ([^\n]*)/s;

my ($mydir, $myname);
BEGIN {
    $0=~ /(.*?)([^\/]+)\z/s or die "?";
    ($mydir, $myname)=($1,$2);
}


my $minorigsize = 100000;
my $mincompression= 0.7;

sub usage {
    print STDERR map{"$_\n"} @_ if @_;
    print "$myname file..

  Convert file to .webp, over the existing file (yes, using the wrong
  suffix!), moving the original file into the trash via `trash`, but
  only if the source file is larger than $minorigsize and the
  compressed file is actually smaller than $mincompression times the
  original.

  Used to save space in saved web pages.

  ($email_full)
";
exit (@_ ? 1 : 0);
}

our $verbose=0;
#our $opt_dry;
GetOptions("verbose"=> \$verbose,
	   "help"=> sub{usage},
	   #"dry-run"=> \$opt_dry,
	   ) or exit 1;
usage unless @ARGV;

use Chj::xperlfunc ":all";

sub con($path) {
    my $p2 = $path;
    $p2 =~ s{\.\w+$}{.webp};
    if (-e $p2) {
        warn "$myname: target already exists: '$p2'\n";
    } else {
        my $s = xlstat $path;
        if ($s->is_symlink) {
            warn "$myname: source is a symlink: '$path'\n";
        } else {
            my $origsize = $s->size;
            if ($origsize < $minorigsize) {
                warn "$myname: file is only $origsize bytes, < $minorigsize: '$path'\n";
            } else {
                xxsystem "convert", $path, $p2;
                my $t = xlstat $p2;
                my $factor = $t->size / $s->size;
                if ($factor < $mincompression) {
                    xxsystem "trash", $path;
                    xrename $p2, $path;
                } else {
                    xunlink $p2;
                    warn "$myname: file compressed only $factor x, < $mincompression: '$path'\n";
                }
            }
        }
    }
}

con $_ for @ARGV;

#use FP::Repl; repl;
#use Chj::ruse;
#use Chj::Backtrace; 

