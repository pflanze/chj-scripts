#!/usr/bin/perl -w

# Sun 14 Mar 23:46:14 GMT 2021
(my $email='ch%christianjaeger,ch')=~ tr/%,/@./;

use strict;
use warnings FATAL => 'uninitialized';
use experimental 'signatures';

use lib "/opt/functional-perl/lib"; ## tmp
#use FP::Repl; use FP::Repl::Trap;#
#use Chj::Backtrace;#


# COPY from meta/bin/update-database
use Encode;
sub utf8decode($context, $str) {
    eval {
        Encode::decode("UTF-8", $str, Encode::FB_CROAK)
    } // die "utf8decode: $context: $@"
}



$0=~ /(.*?)([^\/]+)\z/s or die "?";
my ($mydir, $myname)=($1,$2);
sub usage {
    print STDERR map{"$_\n"} @_ if @_;
    print "$myname regex...

  In the current Git checkout, searches both paths, as well as file
  contents, for all of the given perl style regexes. Shows those paths
  that can be found (either via path or content) for all regexes
  (intersection).

  Options:

     -i | --insensitive      regex is matched insensitively
     --sort-alpha            sort alphabetically instead of by mtime
     --ignore-filename  regex    ignore filenames that match regex;
                                 can be given multiple times
     --warn-broken-symlinks  warn about broken symlinks
     --warn-deleted          warn about files recorded in the Git index
                             but not existing
     --warn-encoding         report each file that does not decode as
                             UTF-8 (a summary will be printed in any case)
     --warn                  turn on all the warnings

  (Christian Jaeger <$email>)
";
exit (@_ ? 1 : 0);
}

use Getopt::Long;
our $verbose=0;
#our $opt_dry;
my $opt_i;
my $opt_sort_alpha;
my ($opt_warn_broken, $opt_warn_deleted, $opt_warn_encoding);
my @opt_ignore_filename;
GetOptions("verbose"=> \$verbose,
	   "help"=> sub{usage},
           "i"=> \$opt_i,
           "insensitive"=> \$opt_i,
           "sort-alpha"=> \$opt_sort_alpha,
           "ignore-filename=s"=> sub {
               push @opt_ignore_filename, $_[1];
           },
           "warn-broken-symlinks"=> \$opt_warn_broken,
           "warn-deleted"=> \$opt_warn_deleted,
           "warn-encoding"=> \$opt_warn_encoding,
           "warn"=> sub {
               ($opt_warn_broken, $opt_warn_deleted, $opt_warn_encoding)=(1,1,1);
           },
	   #"dry-run"=> \$opt_dry,
	   ) or exit 1;
usage unless @ARGV;

#[[ use Chj::Parallel_for_each qw(Parallel_for_each);
# no, need results, and   hu not even in fperl there's sth  ? ?

use Chj::xperlfunc ":all";
use Chj::xpipe;
use Chj::Linux::numcpus;

our $Parallel_n= numcpus; # number of cpus to use

use POSIX ();

package parallel_map::Exception {
    use FP::Struct ['string']
        => qw(FP::Struct::Equal FP::Struct::Show);
    _END_
}

# Return types can only be strings for now!
sub parallel_map($vec, $proc) {
    my @shifts= (0..($Parallel_n-1));
    my $len= @$vec;
    my @child= map {
	my $shift=$_;
        my ($piperead, $pipewrite) = xpipe;
	if (my $pid= xfork) {
            $pipewrite->xclose;
	    [ $pid, $piperead ]
	} else {
            $piperead->xclose;
	    for (my $i= $shift; $i< $len; $i+= $Parallel_n) {
                my $res;
		if (eval {
                    $res = $proc->($$vec[$i]);
                    1
                    }) {
                    $res=~ s/\\/\\\\/sg; 
                    $res=~ s/\0/\\0/sg;
                    $pipewrite->xprint("R$res\0");
                } else {
                    my $e = "$@";
                    $e=~ s/\\/\\\\/sg; 
                    $e=~ s/\0/\\0/sg;
                    $pipewrite->xprint("E$e\0");
                }
	    }
            $pipewrite->xclose;
	    POSIX::_exit(0);
	}
    } @shifts;

    # have to bring the results into the right order again (kinda
    # sigh):
    my @ress =
        map {
            my ($pid, $piperead) = @$_;
            xxwaitpid $pid, 0;
            my @ress= map {
                my $type = substr $_, 0, 1;
                my $val = substr $_, 1;
                if ($type eq "E") {
                    parallel_map::Exception->new($val)
                } elsif ($type eq "R") {
                    # XX utf-8 ! todo
                    $val
                } else {
                    die "BUG"
                }
            } $piperead->xreadline0_chop;
            $piperead->xclose;
            \@ress
    } @child;
    my @res;
    for (my $i= 0; $i< $len; $i+= 1) {
        for (my $shift = 0; $shift < $Parallel_n; $shift++) {
            my $slice = $ress[$shift];
            last unless $i < @$slice;
            push @res, $slice->[$i];
        }
    }
    \@res
}

sub parallel_filter($vec, $proc) {
    my $bools_and_exns = parallel_map($vec, $proc);
    my @res;
    for (my $i = 0; $i < @$vec; $i++) {
        my $be= $bools_and_exns->[$i];
        if (ref $be) {
            die $be
        }
        push @res, $vec->[$i] if $be;
    }
    \@res
}

#]]


use Encode;
use Chj::Git::Functions qw(git_ls_files);
use FP::HashSet ":all";
use Chj::xperlfunc qw(Xlstat xgetfile_utf8);
use Chj::xopen qw(glob_to_fh);
# why use both array and purearray? XX hashset should be adapted.
use FP::Array ":all";
use FP::PureArray ":all";
use FP::Predicates qw(complement);
use FP::Hash;

# Hash to array of key-value tuples
sub hash_kvs_unsorted($hash) {
    [
     map {
         [ $_ => $hash->{$_} ]
     }
     keys %$hash
    ]
}

# Array of key-value tuples to hash
sub kvs_to_hash($kvs) {
    +{
        map {
            $_->[0] => $_->[1]
        }
        @$kvs
    }
}

sub suffix ($path) {
    if (my ($suffix) = $path=~ m{\.(\w+)\z}) {
        $suffix
    } else {
        ""
    }
}

my $ignored_suffix= +{
    map { $_=> 1 }
    qw(pdf bz2 zip gz rz png jpeg jpg gif ods odt doc docx xls)
};
sub ignore_suffix($suff) {
    $ignored_suffix->{lc($suff)}
}
sub ignore($path) {
    $path=~ m{(?:^|/)\.METADATA-v2/} or ignore_suffix(suffix $path) or do {
        my $filename = utf8decode "filename of path '$path'", basename $path;
        sub {
            for (@opt_ignore_filename) {
                return 1 if $filename=~ /$_/
            }
            0
        }->()
    }
}

package APP::search::Info {
    use Chj::xperlfunc qw(Xstat);
    
    use FP::Struct [
        "path",
        "lstat",
        # only for symlinks which stopped to match on their own; "$!"
        # if can't stat:
        "maybe_stat_or_err",
        ]
        => qw(FP::Struct::Equal FP::Struct::Show);

    sub is_link($self) {
        $self->{lstat}->is_link
    }

    sub is_dir($self) {
        # directly (i.e. git submodules; not symlinks to dirs)
        $self->{lstat}->is_dir
    }
    
    sub is_file($self) {
        # directly
        $self->{lstat}->is_file
    }

    sub mtime($self) {
        # OK to use lstat's mtime here?
        $self->{lstat}->mtime
    }

    sub maybe_contentkey($self) {
        # "$devicenumber:$inode", if file, or if target exists
        exists $self->{_maybe_contentkey} ? $self->{_maybe_contentkey} :
            $self->{_maybe_contentkey} = do {
                my $s = $self->{lstat};
                if ($s->is_file) {
                    $s->dev . ":" . $s->ino
                } elsif ($s->is_link) {
                    my $s = $self->{maybe_stat_or_err} //= do {
                        eval {
                            Xstat($self->{path}) // do {
                                warn "$myname: note, broken symlink: '$self->{path}'\n"
                                    if $opt_warn_broken;
                                "$!"
                            }
                        } // do {
                            # hard error, well, currently including EPERM on link target
                            "$!"
                        }
                    };
                    if (ref($s)) {
                        if ($s->is_file) {
                            $s->dev . ":" . $s->ino
                        } else {
                            # it was a symlink to a directory (or device file or something)
                            undef
                        }
                    } else {
                        # target doesn't exist
                        undef
                    }
                } else {
                    die "XX directory?";# should already have been weeded out ?
                }
        }
    }
    
    _END_ "main"
}

# path => Info, including symlinks
my $fileset_with_links= do {
    my $fs= array_to_purearray scalar git_ls_files;
    my $infos=
        $fs
        ->filter(complement \&ignore)
        ->filtermap(
            sub ($path) {
                if (my $s= Xlstat $path) {
                    Info(utf8decode("path", $path), $s)
                } else {
                    warn "$myname: file in index but not in working dir: '$path'\n"
                        if $opt_warn_deleted;
                    ()
                }
            });
    my $filter= sub ($pred) {
        $infos
            ->filter(
            sub ($info) {
                $pred->($info->is_dir)
            })
    };
    $filter->(sub ($isdir) { $isdir })->for_each(
        sub ($info) {
            warn "NOTE: ignoring sub-repository: ".$info->path."\n";
        });
    my %s;
    $filter->(sub ($isdir) { not $isdir })->for_each(
        sub ($info) {
            $s{$info->path} = $info;
        });
    \%s
};


# -> (contentkey//:path) => path => Info
# (For broken symlinks, use a fake contentkey, ensuring each symlink
# only has one entry, thus it will survive.)
sub by_contentkey($set) {
    my %h;
    for my $k (keys %$set) {
        my $info = $set->{$k};
        $h{$info->maybe_contentkey // ":".$info->path}{$info->path} = $info;
    }
    \%h
}


my $fileset = $fileset_with_links;
my $num_encoding = 0;

for my $regex_raw (@ARGV) {
    my $regex = utf8decode "regex argument '$regex_raw'", $regex_raw;
    my $re= $opt_i ? qr/$regex/i : qr/$regex/;

    my $fileset2 = hash_key_filter $fileset, sub ($path) {
        $path =~ m/$re/
    };

    # Might there be more paths to consider, via their contents?
    # We promised Perl style regexes, deliver on that.
    my $_tocheckset= hashset_difference $fileset, $fileset2;
    # Only plain files, and symlinks to plain files, can be checked /
    # can match, exclude anything else:
    my $checkableset = hash_value_filter $_tocheckset, sub ($info) {
        defined $info->maybe_contentkey
    };
    # First build an index of inodes, to avoid duplicate loading
    # (hard- and symlinks):
    # contentkey => path => Info
    my $checkable_by_contentkey = by_contentkey $checkableset;
    # Run the checks:
    my $checked =  # [[contentkey, {path=>info}]..]
        parallel_filter(
            hash_kvs_unsorted($checkable_by_contentkey),
            sub ($contentkey_path_info) {
                my ($contentkey, $path_info) = @$contentkey_path_info;
                # This might be a symlink, but it has been checked to resolve, so what:
                my $path = (keys %$path_info)[0];
                my $res;
                eval {
                    my $cnt= xgetfile_utf8 $path;
                    $res= $cnt=~ /$re/;
                    1
                } ? $res : do {
                    if ($@ =~ /ill-formed UTF-8/) {
                        warn "$myname: ignoring file in non-utf8 encoding: '$path'\n"
                            if $opt_warn_encoding;
                        $num_encoding++;
                    } else {
                        warn "$myname: ignoring file with error: '$path': $@";
                    }
                    0
                }
            });
    my $morefiles= do {
        # hash_values_flatten ?
        my %h;
        for (@$checked) {
            my ($_contentkey, $path_info) = @$_;
            for my $path (keys %$path_info) {
                my $info = $path_info->{$path};
                $h{$path}= $info;
            }
        }
        \%h
    };
    $fileset = hashset_union $fileset2, $morefiles;
}

if ($num_encoding) {
    warn "$myname: ignored $num_encoding files that did not decode as UTF-8\n".
        "$myname: (use --warn-encoding to see which)\n";
}

# For the same content, only take one path; take the first
# (alphabetically) path to a plain file if present, otherwise the
# first path at all (a symlink):
$fileset = do {
    my $cset = by_contentkey $fileset;
    my %h;
    for my $ckey (keys %$cset) {
        my $path_info = $cset->{$ckey};
        # Take the first plain file item, if any, otherwise the first path:
        my $path_to_take;
        for my $path (sort keys %$path_info) {
            if ($path_info->{$path}->is_file) {
                $path_to_take = $path;
                last;
            }
            $path_to_take //= $path;
        }
        $h{$path_to_take}= $path_info->{$path_to_take};
    }
    \%h
    
};


# always sort alphabetically, first (for stable sort order for entries
# with identical mtime)
my @k = hashset_keys $fileset;

if (! $opt_sort_alpha) {
    @k = sort { $fileset->{$a}->mtime <=> $fileset->{$b}->mtime } @k;
}

my $out = glob_to_fh *STDOUT;
$out->xbinmode(":utf8");

for my $path (@k) {
    $out->xprintln($path);
}

