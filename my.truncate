#!/usr/bin/perl -w

# Fre Nov 24 00:04:59 CET 2006

# Funny that this tool doesn't exist already ?  touch doesn't do
# that. And my mksparse script will do this either (not even with the
# --truncate option..).

my $copyright= <<'COPYRIGHT';
# Copyright 2006-2022 by Christian Jaeger <ch@christianjaeger.ch>
# Published under the same terms as perl itself
COPYRIGHT

use strict;
use utf8;
use warnings;
# To promote 'Argument "foo" isn't numeric in truncate' into an exception:
use warnings FATAL => 'all';
use experimental 'signatures';

my ($email_full)= $copyright=~ / by ([^\n]*)/s;

$0=~ /(.*?)([^\/]+)\z/s or die "?";
my ($mydir, $myname)=($1,$2);
sub usage {
    print STDERR map{"$_\n"} @_ if @_;
    print "$myname newlen file(s)

  Truncate the files down to the newlen (in bytes).

  ($email_full)
";
exit (@_ ? 1 : 0);
}

my @args;
my $DEBUG=0;
for (my $i=0; $i<=$#ARGV; $i++) {
    local $_=$ARGV[$i];
    if (/^--?h(elp)?$/) {
    	usage
    } elsif ($_ eq '--') {
    	push @args, @ARGV[$i+1..$#ARGV];
    	last;
    } elsif (/^--?d(ebug)?$/) {
	$DEBUG=1;
    } elsif (/^-./) {
    	usage("Unknown option '$_'\n");
    } else {
    	push @args, $_
    }
}
usage unless @args;

my $newlen= shift @args;

sub my_truncate($path) {
    truncate $path, $newlen
        or die "truncate('$path', $newlen): $!";
}

my_truncate $_ for @args;
