#!/usr/bin/perl -w

# Tags: (debian)

# Copyright 2008-2020 by Christian Jaeger, published under the same
# terms as Perl 5.

(my $email='ch%christianjaeger,ch')=~ tr/%,/@./;

use strict;

our $file= "/etc/debian_version";

$0=~ /(.*?)([^\/]+)\z/s or die "?";
my ($mydir, $myname)=($1,$2);
sub usage {
    print STDERR map{"$_\n"} @_ if @_;
    print "$myname [ versionstring ]

  Reads the contents of $file (or takes versionstring instead)
  and displays the result as both the number, release name, and
  release date if it's a stable release.

  Options:
  --la       list all known releases instead of picking the one from
             $file or the versionstring argument (but showing
             an asterisk in front of the line that matches the
             release of the former)
  -l|--list  like --la but only show name / number / release_date

  (Christian Jaeger <$email>)
";
exit (@_ ? 1 : 0);
}

{
    package CHJ::Release;
    use Class::Array -fields=> -publica=>
      qw(name
	 number
	 release_date
	 num_packages_binary
	 num_packages_source
	 num_developers
	 securitysupport_termination_date
	);
    sub new {
	my $class=shift;
	if (@_==7) {
	    bless [@_],$class
	} elsif (@_==2 or @_==3) {
	    bless [@_], "CHJ::Release::Alias"
	} else {
	    die "invalid number of arguments: @_"
	}
    }
    my $max_number_length= 4;
    sub as_string {
	my $s=shift;
	my ($maybe_max_name_length)=@_;
	# should this give 'sid'? instead of lenny, for the name? OPEN
	my $name= $s->name;
	my $len= length($name);
	my $pad= $maybe_max_name_length ? do {
	    my $rem= $maybe_max_name_length - $len;
	    $rem > 0 ? " "x$rem : ""
	} : "";
        my $numberwithpad= sub {
            my $numberpad= do {
                my $rem= $max_number_length - length($$s[Number]);
                $rem > 0 ? " "x$rem : ""
            };
            $numberpad.$$s[Number]
        };
	"$name$pad (".($$s[Number] ? &$numberwithpad : "unknown release number").")"
    }
    sub fullinfo {
	my $s=shift;
	my ($max_name_length)=@_;
	($s->as_string($max_name_length)
	 ." ["
	 .join(", ",
	       map {
		   my ($method,$desc)=@$_;
		   if (my $v= $s->$method) {
		       "$desc: $v"
		   } else {
		       ()
		   }
	       }
	       [release_date=> "released"],
	       [num_packages_binary=> "binpackages"],
	       [num_packages_source=> "sourcepackages"],
	       [num_developers=> "developers"],
	       [securitysupport_termination_date=> "secsupport<"]
	      )
	 ."]")
    }
    end Class::Array;
    # for CHJ::Release_with_key:
    sub maybe_release_date;
    *maybe_release_date= \&release_date;
}

our $release_by_name;
{
    package CHJ::Release::Alias;
    use Class::Array -fields=> -publica=>
      qw(name
	 number
	 maybe_release_date);

    sub fullinfo {
	my $s=shift;
	$$release_by_name{$$s[Name]}->fullinfo
    }
    sub as_string {
        my $s=shift;
        $s->name
    }
    end Class::Array;
}


# where to get this information from? No, *not* from
# http://www.us.debian.org/releases/
# since that's cheating about the release date of the stable release,
# and the links to the older releases won't give any date at all.

# http://www.debian.org/doc/manuals/project-history/ch-detailed.en.html

our $releases=
  [
   map { new CHJ::Release @$_ }
   # name, number, release_date, num_packages_binary, num_packages_source,
   #    num_developers, securitysupport_termination_date
   ["hamm", "2.0", "1998-07-XX", "1500+", undef, "400+", undef ],
   #   ^ is the 1500+ number for binary packages really?
   ["slink", "2.1", "1999-03-09", "~2250", undef, undef, undef ],
   # ^ first to include apt; Alpha + Sparc
   ["potato", "2.2", "2000-08-15", "3900+", "2600+", "450+", undef],
   # ^ PowerPC and ARM
   # Introduction of "Testing" distribution ("unstable" did already exist)
   ["woody", "3.0", "2002-07-19", "~8500", undef, "900+", undef ],
   # ^ first on DVD media
   ["sarge", "3.1", "2005-06-06", "~15000", undef, "1500+", undef ],
   # ^ *unofficial* AMD64 port; new installer (with RAID, XFS and LVM support)
   #   'aptitude as the selected tool for package management'
   ["etch", "4.0", "2007-04-08", "~18200", undef, "1030+", "2010-02-15" ], #hm muchless?.
   # ^ includes AMD64, but drops m68k (which was still in unstable, though)
   ["lenny", "5.0", "2009-02-14", ">23000", ">12000", undef, undef ],
   # ^ adds support for Marvell's Orion platform, .. now supports several Netbooks, .. also contains the build tools for Emdebian .. includes the new ARM EABI port, ..
   #  With the integration of X.Org 7.3 the X server autoconfigures itself with most hardware.
   #  Overall improvements for notebooks have been introduced, such as out of the box support of CPU frequency scaling.
   #  The availability and updates of OpenJDK, GNU Java compiler, GNU Java bytecode interpreter, Classpath and other free versions of Sun's Java technology, into Debian GNU/Linux 5.0 allow us to ship Java-based applications in Debian's "main" repository.
   #  Further improvements in system security include the installation of available security updates before the first reboot by the Debian Installer, the reduction of setuid root binaries and open ports in the standard installation, and the use of GCC hardening features in the builds of several security-critical packages. Various applications have specific improvements, too. PHP for example is now built with the Suhosin hardening patch.
   #  In addition to the regular installation media, Debian GNU/Linux can now also be directly used without prior installation. The special images used, known as live images, are available for CDs, USB sticks, and netboot setups. Initially, these are provided for the amd64 and i386 architectures only.

   ["squeeze", "6.0", "2011-02-06", ">29000", "<15000", undef, "2016-02-12"],

   ["wheezy", "7.0", "2013-05-04", ">36000", "<17500", undef, undef],
   # sigh, now Debian starts to publish point releases as 7.X versions
   #   ** ah,yes,because before:  [19 Jul 2014] Updated Debian 6.0: 6.0.10 released

   # https://wiki.debian.org/DebianReleases/PointReleases
   # As of February 2009 they should happen at about every two months.
   # oldstable is subjected to a similar handling until it is
   # considered as end-of-life, although the periods may be longer.
   # Debian Etch 4.0r4 (name Etch and a half) was the first point
   # release to introduce improved hardware support, through optional
   # packages.

   # https://www.debian.org/News/

   ["wheezy", "7.1", "2013-06-15"],
   ["wheezy", "7.2", "2013-10-12"],
   ["wheezy", "7.3", "2013-12-14"],
   ["wheezy", "7.4", "2014-02-08"],
   ["wheezy", "7.5", "2014-04-26"],
   ["wheezy", "7.6", "2014-07-12"],
   ["wheezy", "7.7", "2014-10-18"],
   ["wheezy", "7.8", "2015-01-10"],
   ["wheezy", "7.9", "2015-09-05"],
   ["wheezy", "7.10", "2016-04-02"],
   ["wheezy", "7.11", "2016-06-04 (final update)"],

   ["jessie", "8.0", "2015-04-25", ">43000", "20000..20100", undef, "2020-06-30 (LTS 5y)"],
   ["jessie", "8.1", "2015-06-06"],
   ["jessie", "8.2", "2015-09-05"],
   ["jessie", "8.3", "2016-01-23"],
   ["jessie", "8.4", "2016-04-02"],
   ["jessie", "8.5", "2016-06-04"],
   ["jessie", "8.6", "2016-09-17"],
   ["jessie", "8.7", "2017-01-14"],
   ["jessie", "8.8", "2017-05-06"],
   ["jessie", "8.9", "2017-08-14"],
   ["jessie", "8.10", "2018-02-28"],
   ["jessie", "8.11", "2018-08-31 (final update)"],

   ["stretch", "9.0", "2017-06-17", "?", "?", undef, "2022-06 (5y)"],
   # https://www.debian.org/News/2017/20170617
   # Thanks to the Reproducible Builds project, over 90% of the source packages included in Debian 9 will build bit-for-bit identical binary packages .
   # X display system no longer requires "root" privileges to run.
   # [..] feature the "modern" branch of GnuPG in the "gnupg" package. This brings with it elliptic curve cryptography, better defaults, a more modular architecture, and improved smartcard support.
   # Debug packages are easier to obtain and use in Debian 9 "Stretch". A new "dbg-sym" repository can be added to the APT source list to provide debug symbols automatically for many packages. # ?
   # Support for 32-bit Motorola/IBM PowerPC (powerpc) has been removed .
   ["stretch", "9.1", "2017-08-14"],
   ["stretch", "9.2", "2017-11-09"],
   ["stretch", "9.3", "2018-02-28"],
   ["stretch", "9.4", "2018-06-07"],
   ["stretch", "9.5", "2018-08-31"],
   ["stretch", "9.6", "2018-12-11"],
   ["stretch", "9.7", "2019-01-23"],
   ["stretch", "9.8", "2019-02-16"],
   ["stretch", "9.9", "2019-07-01"],
   ["stretch", "9.10", "2019-09-07"],
   ["stretch", "9.11", "2019-09-08"],
   # ^ https://www.debian.org/News/2019/20190908
   # This point release is primarily an update to the
   # recently-released 9.10, in order to resolve a critical problem
   # with the installer that was discovered during image testing.
   ["stretch", "9.12", "2020-02-08"],
   ["stretch", "9.13", "2020-07-18 (final update)" ],

   ["buster", "10.0", "2019-07-06", "59000+", "29000-", undef, "2024-07-06~"],
   ["buster", "10.1", "2019-09-07"],
   ["buster", "10.2", "2019-11-16"],
   ["buster", "10.3", "2020-02-08"],
   ["buster", "10.4", "2020-05-09"],
   ["buster", "10.5", "2020-08-01"],
   ["buster", "10.6", "2020-09-26"],
   ["buster", "10.7", "2020-12-05"],
   ["buster", "10.8", "2021-02-06"],
   ["buster", "10.9", "2021-03-27"],
   ["buster", "10.10", "2021-06-19"],
   ["buster", "10.11", "2021-10-09"],
   ["buster", "10.12", "2022-03-26"],
   ["buster", "10.13", "2022-09-10"],
   ["buster", "10.14", ],
   ["buster", "10.15", ],
   ["buster", "10.16", ],

   ["bullseye", "11.0", "2021-08-14", "59551", "30000+", undef, "2026-08-14~" ],
   ["bullseye", "11.1", "2021-10-09"],
   ["bullseye", "11.2", "2021-12-18"],
   ["bullseye", "11.3", "2022-03-26"],
   ["bullseye", "11.4", "2022-07-09"],
   ["bullseye", "11.5", "2022-09-10"],
   ["bullseye", "11.6", "2022-12-17"],
   ["bullseye", "11.7", "2023-04-29"],
   ["bullseye", "11.8", ],
   ["bullseye", "11.9", ],

   ["bookworm", "12.0", "2023-06-10",
    "64419",
    undef, # num_packages_source
    undef, # num_developers
    "2028-06-10~" # securitysupport_termination_date
   ],
   ["bookworm", "12.1", ],
   ["bookworm", "12.2", ],
   ["bookworm", "12.3", ],
   ["bookworm", "12.4", ],
   ["bookworm", "12.5", ],
   ["bookworm", "12.6", ],
   ["bookworm", "12.7", ],
   ["bookworm", "12.8", ],
   ["bookworm", "12.9", ],
   
   # The last entry must/should always be the sid distribution (check
   # how it is being added as 'sid' to $release_by_name below) :
   ["trixie", "13.0", undef, undef, undef, undef, undef ]
  ];

sub index_of_by {
    my ($list)=@_;
    sub {
	my ($method)= @_;
	my %idx;
	for my $item (@$list) {
	    my $k= $item->$method;
	    next if not $k or $idx{$k};
	    $idx{$k}= $item;
	}
	\%idx
    }
}
*index_by= index_of_by($releases);

$release_by_name= index_by ("name");
our $release_by_number= index_by ("number");
$$release_by_name{sid}= $$release_by_name{$$releases[-1][0]};
#^hm. http://www.debian.org/releases/ says that *testing* is called squeeze, unstable is sid. I'm somewhat confusing those here hm.


use Chj::Fileutil 'xCatfile';

{
    package CHJ::Release_with_key;
    use Class::Array -fields=> -publica=>
      qw(key
	 release);
    sub new {
	my $class=shift;
	@_==2 or die;
	bless [@_],$class
    }
    sub _delegate {
    	my ($methodname)=@_;
	sub {
	    my $s=shift;
	    defined $$s[Release] ? $$s[Release]->$methodname(@_) : "(unknown release)"
	}
    }
    no warnings;## agains 'used only once: possible typo'
    *as_string=_delegate ("as_string");
    #*fullinfo=_delegate ("fullinfo");
    
    *maybe_release_date= _delegate("maybe_release_date");
    
    sub fullinfo {
	my $s=shift;
	"[found: ".$s->key.
	  do {
	    if (defined (my $rd= $s->maybe_release_date)) {
	      " (released $rd)"
	    } else {
	      ""
	    }
	  }
	    ."] ".(defined $$s[Release] ? $$s[Release]->fullinfo : "(no release)")
    }
    # no need for proxies of the fields right?
    end Class::Array;
}
sub make_release_with_key ($ $ ) {
    CHJ::Release_with_key->new(@_);
}

sub maybe_find_release {
    my ($key)= @_;
    $$release_by_number{$key} || $$release_by_name{lc $key} || do {
	$key=~ /^(\d+\.\d+)\.\d+\s*\z/s and $$release_by_number{$1}
    }
}
#use Chj::repl;repl;die "WRTF"; exit;

sub parseversion {
    my ($versionstring,$maybe_file)=@_;
    $versionstring=~ s/\s+\z//s;
    $versionstring=~ m/\s/s
      and die ("'"
	       .($file||$versionstring)
	       ."' contains whitespace not at the end");
    my @parts= split /\//,$versionstring;
    @parts <= 2 or die "'$file' contains more than one slash";
    my $r1= maybe_find_release ($parts[0]);
    if (@parts==2 and $parts[1] ne 'sid') {
	my $r2= maybe_find_release ($parts[1]);
	if ($r1 eq $r2) {
	    make_release_with_key (join(" / ",@parts),$r1)
	} else {
	    #warn "shit: '$r1' '$r2'";
	    die ("'$file' contains contradicting information, "
		 ."leading to release "
		 .(ref $r1 ? $r1->as_string : $r1)
		 ." vs. "
		 .(ref $r2 ? $r2->as_string : $r2))
	}
    } else {
	if ($r1) {
	    make_release_with_key ($parts[0],$r1)
	} else {
	    die "couldn't find release for key '$parts[0]'";
	}
    }
}

sub list_releases {
    my ($show_short,$vers)=@_;

    my $maxlen=0;
    for my $r (@$releases) {
	my $len= length ($r->name);
	$maxlen=$len if $len > $maxlen;
    }

    my $vers_name= $vers->release->name; # or $vers->as_string, which is better?

    for my $r (@$releases) {
	next if $r->isa("CHJ::Release::Alias") or $r->name eq "?";
	my $rest=
	  ($show_short) ?
	    $r->as_string ($maxlen)." ".($r->release_date // "")
	      :
		$r->fullinfo ($maxlen);
	my $prefix=
	  ($r->name eq $vers_name) ? "* " : "  ";
	print $prefix, $rest, "\n"
	  or die $!;
    }
}

use Getopt::Long;
our $verbose=0;
our $opt_la;
our $opt_list;
GetOptions("verbose"=> \$verbose,
	   "help"=> sub{usage},
	   "la"=> \$opt_la,
	   "l|list"=> \$opt_list,
	   ) or exit 1;
usage if @ARGV > 1;


our $vers=
  (@ARGV) ?
  parseversion ($ARGV[0])
  :
  parseversion (xCatfile $file);

if ($opt_list) {
    list_releases(1,$vers);
} elsif ($opt_la) {
    list_releases(0,$vers);
} else {
    print $vers->fullinfo,"\n";
}

#use Chj::Backtrace; use Chj::repl; repl;

