#!/usr/bin/perl -w

# Thu Sep 24 17:42:50 EDT 2009
(my $email='XXX%YYY,ch')=~ tr/%,/@./;

use strict;

$0=~ /(.*?)([^\/]+)\z/s or die "?";
my ($mydir, $myname)=($1,$2);
sub usage {
    print STDERR map{"$_\n"} @_ if @_;
    print "$myname [-- lsof-arguments]

  Show deleted files opened by processor, filtering the output of
  lsof, relying on it's at the time used convention to display such
  files.

  The aim is to find programs that have object files open that have
  been replaced by a package upgrade. For this reason, ignores
  /(tmp|dev|var|run)/ and a couple other uninteresting paths.

  (It is more precisely filtering lsof output, but otherwise doing the
  same as 'lsof |grep DEL' (but there is code to alternatively do our
  own stat calls, too, see source) and ignoring uninteresting paths,
  too.)

  Options:
    --verbose
    --more     Show cases of deleted files which could not have been
               touched by system package upgrades, too (e.g. in
               home directories). By default only cases caused by system
               upgrades are considered.
    --style-friendly  show in a grouped manner (default)
    --style-lsof      show in an lsof-like style ('denormalized' in lines)

  (Christian Jaeger <$email>)
";
exit (@_ ? 1 : 0);
}

use Getopt::Long;
our $verbose = 0;
my $opt_more = 0;
my $style = "friendly";
GetOptions("verbose"=> \$verbose,
	   "help"=> sub{usage},
           "more"=> sub { $opt_more++ },
           "style-lsof" => sub { $style = "lsof" },
           "style-friendly" => sub { $style = "friendly" },
	   ) or exit 1;
#usage unless @ARGV;


sub uid_to_possibly_username {
    my ($uid)=@_;
    if(my $nam= getpwuid($uid)) {# [is this slow?shouldIcache?]
	$nam
    } else {
	$uid # "<$uid>" ?
    }
}


sub pid_to_programname_orelse {
    my ($pid, $orelse)= @_;
    # /proc/2710/exe -> /usr/libexec/gvfs-udisks2-volume-monitor
    # /proc/3061/exe -> /usr/bin/emacs-gtk
    # or
    # cat /proc/2710/cmdline |tr '\0' '\n'|head -1  =>  same
    # cat /proc/3061/cmdline |tr '\0' '\n'|head -1  => emacs
    my ($_pid) = $pid=~ /^(\d+)\z/ or die "bug";
    if (open my $in, "<", "/proc/$_pid/cmdline") {
        local $/ = "\0";
        my $cmd0 = <$in>;
        chomp $cmd0;
        close $in or die $!;
        $cmd0=~ s{.*/}{}s;
        if (defined (my $l = readlink "/proc/$_pid/exe")) {
            "$cmd0 ($l)"
        } else {
            $cmd0
        }
    } else {
        $orelse
    }
}

sub mkJustify {
    my ($adjoin)=@_;
    sub {
	my ($width, $val)=@_;
	my $len= length $val;
	if ($len>= $width) {
	    $val
	} else {
	    &$adjoin(" "x($width-$len), $val)
	}
    }
}

*JustifyLeft= mkJustify
  (sub {
       my ($sp,$val)=@_;
       $val.$sp
   });
*JustifyRight= mkJustify
  (sub {
       my ($sp,$val)=@_;
       $sp.$val
   });

use Chj::IO::Command;

use Chj::xperlfunc ':all';


our $rely_on_lsof_DEL=1; # whether to rely on DEL reporting.

sub perhaps_chase ($) {
    my $c= Chj::IO::Command->new_sender ("chase",@_);
    my $path= $c->xcontent;
    chomp $path;
    $c->xfinish == 0 ? $path : ()
}

our $ignore=
  +{ map{$_=>1}
     '/SYSV00000000',
     '/drm mm object',
     perhaps_chase ('/usr/share/icons/hicolor/icon-theme.cache'),
};

our %friendly_us; # u => c => p => path => undef

sub process_entry {
    my ($h)=@_;
    my $f=$$h{fileSet}  or die;
    return unless ($$f{t} eq "REG");
    # and maybe also:
    #return unless ($$f{f} eq "txt"); # ?   well or  whatever. maybe not.

    local our $path= $$f{n};
    xprint ("  checking path: '$path'\n")
      if $verbose;
    if ($$ignore{$path}
	or $path=~ m{^/SYSV[0-9a-f]{8}\z}
	or $path=~ m{^/(?:tmp|dev|var|proc|run)/}
	or $path=~ m|/\.galeon/mozilla/|
	or $path=~ m{^/home/\w+/\.(config|cache)/dconf/user$}
	or $path=~ m{^/memfd:}
	or $path=~ m{^/usr/share/.*\.cache$}
        or ($path=~ m{^/home/} and not $opt_more)
       ) {
	# suppress
    } else {
        my $report= (
            $style eq "lsof" ?
            sub {
                xprint( JustifyLeft(15, $$h{c}),
                        " ",
                        JustifyRight(7, $$h{p}),
                        " ",
                        JustifyLeft(15, uid_to_possibly_username($$h{u})),
                        " ",
                        $path,
                        "\n");
            } :
            $style eq "friendly" ?
            sub {
                # record for grouped display at the end
                $friendly_us{
                    uid_to_possibly_username $$h{u}
                }{
                    pid_to_programname_orelse($$h{p}, $$h{c})
                }{
                    $$h{p}
                }{
                    $path
                } = undef;
            } :
            die "bug");
	if ($rely_on_lsof_DEL) {
	    if ($$f{f} eq "DEL") {
		&$report;
	    }
	} else {
	    if (my $s= Xlstat $path) {
		my $inode= $$f{i};
		if ($s->ino == $inode) {
		    # no report
		    xprint("$inode is correct\n")
		      if $verbose;
		} else {
		    &$report;
		}
	    } else {
		xprint( "process $$h{p}: can't stat '$path': $!\n"); ## assumes $! is still set.
	    }
	}
    }
}

our $in= Chj::IO::Command->new_sender ("lsof", "-n", "-F", ##"-0",
				       @ARGV);

our $processSet=undef;
# and inside, we put the file sets. or, each new file set. at key " 
#our $fileSet= undef; # as i said, stored in the processSet. each time anew.

##local $/="\0";

#our $in_processSet; are we always  well i mean  just  not fileset rite'
our $in_fileSet;
#statemacshin.

while (<$in>) {
    chomp;
    my $key= substr($_,0,1);
    my $val= substr($_,1);
    xprint ("key '$key' -> '$val'\n")
      if $verbose;
    if ($key eq 'p') {
	if ($$processSet{fileSet}) {
	    # process it before deletion
	    process_entry ($processSet);
	}
	#^isnt' that sooo hacky. +- copy from below. but? x.
	$processSet={};
	$$processSet{$key}=$val;
	$in_fileSet=0;
    } elsif ($key eq 'f') {
	$in_fileSet=1;
	if ($$processSet{fileSet}) {
	    # process it before deletion
	    process_entry ($processSet);
	}
	$$processSet{fileSet}={};#clear it.
	$$processSet{fileSet}{$key}= $val;
    } else {
	# other fields for the last set decided.
	unless ($in_fileSet) {
	    $$processSet{$key}=$val;
	} else {
	    $$processSet{fileSet}{$key}= $val;
	}
    }

}

$in->xxfinish; # yeah gell better than in the shell where this is verschluckt.


if ($style eq "friendly") {
    for my $u (sort keys %friendly_us) {
        xprint "User: $u\n";
        my $cs = $friendly_us{$u};
        for my $c (sort keys %$cs) {
            xprint "  Program: $c\n";
            my $ps = $cs->{$c};
            for my $p (sort { $a <=> $b } keys %$ps) {
                xprint "    Process: $p\n";
                my $paths = $ps->{$p};
                for my $path (sort keys %$paths) {
                    xprint "      File: $path\n";
                }
            }
        }
    }
    #use Data::Dumper; print Dumper(\%friendly_cs);
    #use FP::Repl; repl;
}


#use Chj::ruse;
#use Chj::Backtrace; use Chj::repl; repl;
