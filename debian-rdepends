#!/usr/bin/perl -w

my $copyright= <<'COPYRIGHT';
# Copyright 2008-2022 by Christian Jaeger <ch@christianjaeger.ch>
# Published under the same terms as perl itself
COPYRIGHT

use strict;
use warnings;
use warnings FATAL => 'uninitialized';
use experimental 'signatures';

use Getopt::Long;
use Chj::IO::Command;
use Chj::singlequote;
use FP::autobox;
use Chj::xperlfunc qw(xprintln);
use FP::Ops qw(the_method);

my ($email_full)= $copyright=~ / by ([^\n]*)/s;

$0=~ /(.*?)([^\/]+)\z/s or die "?";
my ($mydir, $myname)=($1,$2);
sub usage {
    print STDERR map{"$_\n"} @_ if @_;
    print "$myname packagename

  Uses 'apt-cache rdepends' and 'dpkglist' to only list the rdepends
  which are locally installed (unless --all is given).

  Options:

    --all  show rdepends even if not locally installed

  ($email_full)
";
exit (@_ ? 1 : 0);
}

our $verbose=0;
our ($opt_all, $opt_repl);
GetOptions("verbose"=> \$verbose,
	   "help"=> sub{usage},
           "all"=> \$opt_all,
           "repl"=> \$opt_repl,
	   ) or exit 1;
usage unless @ARGV==1;

our ($packagename)=@ARGV;

our $packagename_installed= $opt_all ? undef : do {
    my $h={};
    my $in= Chj::IO::Command->new_sender ("dpkglist");
    while (<$in>) {
	chomp;
	$$h{$_}=1;
    }
    $in->xxfinish;
    $h
};


package PFLANZE::Package {
    use FP::Ops qw(the_method);
    use FP::Struct ['packagename', 'is_or'];
    sub is_installed ($self) {
        $main::opt_all ? 1 : $main::packagename_installed->{ $self->packagename }
    }
    _END_
}
PFLANZE::Package::constructors->import;

sub packagename_rdepends {
    my ($packagename)=@_;
    my $in= Chj::IO::Command->new_sender ("apt-cache","rdepends","--",$packagename);
    my $cnt=$in->xcontent;
    $in->xxfinish;
    my $die= sub {
	die join ("",@_,": ",singlequote($cnt));
    };
    $cnt=~ s/^$packagename\s+//s
        or &$die("was expecting packagename in output first");
    $cnt=~ s/^Reverse Depends:\s+//s
        or &$die("was expecting 'Reverse Depends:' in output");
    my $dependencies= [ split /\s+/, $cnt ];
    $dependencies->sort->map(
        sub ($packagename) {
            my $is_or= $packagename=~ s/^\|//;
            $packagename =~ /^[\w\-.+]+\z/
                or die "hm invalid packagename or not?: '$packagename'";
            Package($packagename, $is_or)
        })
}

sub packagename_rdepends_local {
    my ($packagename)=@_;
    packagename_rdepends($packagename)->filter(the_method "is_installed")
}


if ($opt_repl) {
    require FP::Repl;
    FP::Repl::repl();
} else {
    for my $package (@ARGV) {
        unless ($opt_all) {
            Package($package)->is_installed
                or warn "Note: package '$package' is not installed\n";
        }
        packagename_rdepends_local($package)->for_each(
            sub($p) {
                xprintln $p->packagename
            });
    }
}

