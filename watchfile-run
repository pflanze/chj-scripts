#!/usr/bin/env perl

# Fre Sep  7 11:43:44 CEST 2007
my $copyright= <<'COPYRIGHT';
# Copyright 2007-2022 by Christian Jaeger <ch@christianjaeger.ch>
# Published under the same terms as perl itself
COPYRIGHT
my ($email_full)= $copyright=~ / by ([^\n]*)/s;

use strict;
use utf8;
use warnings;
use warnings FATAL => 'uninitialized';
use experimental 'signatures';


my $sleeptime= 0.1; # how long to sleep between change verifications
my @excludes = qw(./.git );  # sigh, must be paths! Pretty useless.
my @ignore_re = (
    qr/^\.#/ # Emacs lock files
    );

sub ignored($filename) {
    for my $re (@ignore_re) {
        return 1 if $filename=~ /$re/
    }
    0
}

$0=~ /(.*?)([^\/]+)\z/s or die "?";
my ($mydir, $myname)=($1,$2);
sub usage {
    print STDERR map{"$_\n"} @_ if @_;
    print "$myname cmd filename_regex dir(s)

  Watch <dir(s)> for files whose basename match <filename_regex> for
  changes, if a change happens, run cmd with the paths that changed as
  arguments.

  Notes: $myname does not recurse into dirs (currently).  It *does*
  pick up newly created files matching the regex, no need to restart
  the script. It currently does not end when the dirs are (re)moved
  (TODO?).

  Options:
   -a  also run before waiting
   -t  show time stamp before running cmd

  Also see: 'C' and 'lambda' for building 'cmd'.

  ($email_full)
";
exit (@_ ? 1 : 0);
}

my @args;
my $DEBUG=0;
our $verbose;
our $opt_a;
our $opt_t;
for (my $i=0; $i<=$#ARGV; $i++) {
    local $_=$ARGV[$i];
    if (/^--?h(elp)?$/) {
    	usage
    } elsif ($_ eq '--') {
    	push @args, @ARGV[$i+1..$#ARGV];
    	last;
    } elsif (/^--?d(ebug)?$/) {
	$DEBUG=1;
    } elsif (/^--?a$/) {
	$opt_a=1;
    } elsif (/^--?t$/) {
	$opt_t=1;
    } elsif (/^--?v(erbose)?$/) {
	$verbose=1;
    } elsif (/^-./) {
    	usage("Unknown option '$_'\n");
    } else {
    	push @args, $_
    }
}
usage unless @args >= 3;

use Time::HiRes 'sleep';
use Chj::xperlfunc;# 'xstat';
use Chj::Unix::Exitcode 'exitcode';
use Chj::xopendir;
use Linux::Inotify2;
# https://lwn.net/Articles/605128/
# Filesystem notification, part 2 A deeper investigation of inotify [LWN.net].html



my ($cmd, $regex, @dirs)= @args;

$|++;

sub run_with(@paths) {
    if ($opt_t) {
        print "--".localtime()."-------------------------------------\n";
    }
    xsystem_safe $cmd, @paths;
    if ($opt_t) {
        print(("-"x63)."\r");
    }
}

sub path_please_report($path) {
    my $n = $path;
    $n=~ s{^.*/}{};
    $n=~ /$regex/ and not ignored($n)
}

if ($opt_a) {
    my @paths;
    for my $dir (@dirs) {
        my $d = xopendir $dir;
        push @paths, grep {
            path_please_report $_
        } map {
            "$dir/$_"
        } $d->xnread;
        $d->xclose
    }
    my %paths = map { $_=> undef} @paths;
    run_with(sort keys %paths);
}

sub any_changes($path2maybe_stat) {
    my $changed = 0;
    for my $path (sort keys %$path2maybe_stat) {
        my $olds= $path2maybe_stat->{$path};
        my $s= Xlstat $path;
        if (not defined $olds and not defined $s) {
            # continue
        } else {
            if (defined $olds and defined $s) {
                if ($s->equal($olds)) {
                    # continue
                } else {
                    $path2maybe_stat->{$path} = $s;
                    $changed = 1;
                }
            } else {
                $path2maybe_stat->{$path} = $s;
                $changed = 1;
            }
        }
    }
    warn "any_changes => $changed" if $verbose;
    $changed
}

my $inotify = new Linux::Inotify2
    or die "unable to create new inotify object: $!";

my $watch_mask =
    IN_MODIFY|IN_MOVED_FROM|IN_MOVED_TO|IN_CREATE|IN_DELETE
    |IN_DELETE_SELF # |IN_MOVE_SELF no
    |IN_DONT_FOLLOW;

sub iwatch($path) {
    $inotify->watch ($path, $watch_mask)
        or die "watch creation failed";
}

iwatch($_) for @dirs;

sub ipath($event) {
    $event->w->name . "/" . $event->name
}

# Need to carry $path2maybe_stat over since $watcher returns more
# events that came before our cmd finishes (or we do our own polling),
# we need to ignore those:
my $path2maybe_stat;

while (1) {
    my @_events = $inotify->read;
    if ($verbose) {
        warn "\nchanges reported on: ".join(", ", map { ipath $_ } @_events);
    }
    my @events = grep {
        path_please_report(ipath $_)
    } @_events;
    next unless @events;
    if ($verbose) {
        warn "    after filtering: ".join(", ", map { ipath $_ } @events);
    }

    if ($path2maybe_stat) {
        if (not any_changes($path2maybe_stat)) {
            warn "   ignoring duplicate report" if $verbose;
            next;
        }
    }
    
    $path2maybe_stat = +{
        map {
            $_=> scalar Xlstat $_
        } map {
            # $_->type eq "delete" ? () : $_->path
            # no, verify delete events, too
            ipath $_
        } @events
    };
    # Wait till filehandles are closed and don't change anymore: (no
    # way to get that from File::ChangeNotify)
    do {
        sleep $sleeptime;
    } while (any_changes($path2maybe_stat));
    do {
        run_with(sort keys %$path2maybe_stat);
        sleep $sleeptime;
    } while (any_changes($path2maybe_stat));
}
