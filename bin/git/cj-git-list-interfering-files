#!/usr/bin/perl -w

# Don Aug 16 12:02:32 CEST 2007
(my $email='XXX%YYY,ch')=~ tr/%,/@./;

use strict;

$0=~ /(.*?)([^\/]+)\z/s or die "?";
my ($mydir, $myname)=($1,$2);
sub usage {
    print STDERR map{"$_\n"} @_ if @_;
    print "$myname -r HEAD..origin/HEAD

  Hacky solution for the problem with git where old files are lieing
  around locally that have been checked in in the mean time in the
  (e.g.) origin repository.

  (careful: can't call mvnumber repeatedly if one of it's dependencies
  is moved on the way! This should be safe:

  $myname -r HEAD..origin/HEAD > .list ; while read f; do /bin/mv -i \"\$f\" \"\$f\"_AUSWEG; done
  )

  (Christian Jaeger <$email>)
";
exit (@_ ? 1 : 0);
}

our @args=@ARGV;
usage unless @args;

use Chj::IO::Command;

my $c= Chj::IO::Command->new_sender ("git", "diff", @args);

our @files;
while (<$c>) {
    chomp;
    if (/^--- (.+)/) {
	my $oldfile= $1;
	defined ($_= <$c>) or die "missing +++ line after --- line";
	#oder, undef gibts gelll?joglaub.
	chomp;
	/^\+\+\+ (.+)/ or die "+++ line doesn't carry a path: '$_'";
	my $newfile= $1;
	if ($oldfile eq "/dev/null") {
	    die "??" if $newfile eq "/dev/null";
	    #ah dann noch b/ wegmachen
	    $newfile=~ s|^b/||s or die "file doesn't start with b/ : '$newfile'";
	    push @files, $newfile;
	}
    }
}

print map {"$_\n"} @files;
