#!/usr/bin/perl -w

# Mon Jun  9 20:05:39 CEST 2008
(my $email='christian%jaeger,mine,nu')=~ tr/%,/@./;

use strict;

$0=~ /(.*?)([^\/]+)\z/s or die "?";
my ($mydir, $myname)=($1,$2);
sub usage {
    print STDERR map{"$_\n"} @_ if @_;
    print "$myname importlistfile

  Goes through importlistfile which has this format:

file-including-keepstuff.  <- start of line
maybeanotherfile-dito
   =commitmessage (optional, defaults to stuff from keepstuff (hmwhichtakeasfirstline?))
                  (alternatively: +commitmessage, will use that as the first line but still add the keepmessages)
                           <- empty line to indicate 'commit'
file-including-keepstuff
...


  (Christian Jaeger <$email>)
";
exit (@_ ? 1 : 0);
}

use Getopt::Long;
our $verbose=0;
GetOptions("verbose"=> \$verbose,
	   "help"=> sub{usage},
	   ) or exit 1;
usage unless @ARGV==1;

our ($importlistfile)=@ARGV;


use Chj::xopen ":all";
use Chj::xperlfunc;

sub file_to_source_and_maybemsg ( $ ) {
    my ($fullfile)=@_;
    $fullfile=~ m/(.+)\.[1-9][0-9]*(?:_(.*))?\z/s
      or die "not a versioned file: '$fullfile'"; #hm. good?
    ($1,$2)
}

sub read_import_file {
    my $il= xopen_read $importlistfile;

    # whole
    my $commits=[]; # [ [files], maybe_mainmessage, maybe_mainmessage_type ]

    # per commit
    my $files=[]; # of [ source, target, msg ]
    my $maybe_mainmessage;
    my $maybe_mainmessage_type; # a char
    my $flag_expecting_commit_as_next;

    while (<$il>) {
	chomp;
	if (/^\s*\z/s) {
	    push @$commits, [$files, $maybe_mainmessage, $maybe_mainmessage_type];
	    $files=[];
	    undef $maybe_mainmessage;
	    undef $maybe_mainmessage_type;
	    undef $flag_expecting_commit_as_next;
	} elsif (/^\s+(.*)/s) {
	    die "already expected commit"
	      if $flag_expecting_commit_as_next;
	    $flag_expecting_commit_as_next=1;
	    ##^hm, multiline comments shou mb be allowed
	    my $str= $1;
	    $str=~ s/^([\+=])//
	      or die "message does not start with a + or = character: '$str'";
	    ($maybe_mainmessage_type,$maybe_mainmessage)= ($1,$str);

	} else {
	    # a file
	    die "expected commit"
	      if $flag_expecting_commit_as_next;
	    my $file=$_;
	    my ($target,$maybemsg)= file_to_source_and_maybemsg($file);
	    push @$files,[ $_, $target, $maybemsg ]
	}
    }
    $il->xclose;
    $commits
}

sub contains_multiple_lines ( $ ) {
    my ($str)=@_;
    chomp $str;
    $str=~/\n/
}

sub commit_message ($ ) {
    my ($commit)=@_;
    my ($files, $maybe_mainmessage, $maybe_mainmessage_type)= @$commit; #'code dup' as said below.
    my $messages_from_files= sub {
	my ($indentation)=@_;
	join ("",
	      map {
		  my ($source,$target,$msg)=@$_; #again needless re-naming ("code dup" even dangerous..f course.)
		  ## now what do we want exactly, "file => msg" or just the msg ?
		  ## for now, just the latter and ignore if none.
		  if (defined $msg) {
		      "$indentation$msg\n"
		  } else {
		      ()
		  }
	      } @$files)
    };
    if ($maybe_mainmessage) {
	if ($maybe_mainmessage_type eq "=") {
	    $maybe_mainmessage
	} elsif ($maybe_mainmessage_type eq "+") {
	    $maybe_mainmessage."\n\n"
	      .&$messages_from_files (" ");
	} else {
	    die "invalid type '$maybe_mainmessage_type'";
	    # and yes pattern matching would make this more expicit (implicit? the 'message' of the code would make it through more explicitely; it's *purpose* I mean), easier to type, etc.
	}
    } else {
	#&$messages_from_files  ##hmm what if it's multiline?
	my $message= &$messages_from_files ("");##good idea to not indent here ?##probably not
	if (contains_multiple_lines $message) {
	    die "multiline message '$message'";## for now.
	} else {
	    $message
	}
    }
}

sub do_commits {
    my ($commits)=@_;
    for my $commit (@$commits)
      {
	  my ($files,$_maybe_mainmessage, $_maybe_mainmessage_type)= @$commit; #is this code duplication?.. of course. and yes oo does inhibit ehr so it. instead of matching. =copying. --actually not even using one of those now hehe.
	  my $commit_message= commit_message ($commit);
	  my $linked=[];
	  eval {
	      for (@$files) {
		  my ($source,$target,$_msg)=@$_; #of course again dup thing
		  xlink ($source,$target);
		  push @$linked,$target;
	      }
	      xxsystem "git","add", "--", @$linked;
	      xxsystem "git","commit", "-m", $commit_message, "--", @$linked;
	  };
	  my $e=$@;
	  xunlink $_ for @$linked;
	  die $e if ref $e or $e;
      }
}

#use Chj::ruse;
use Chj::Backtrace;
#use Chj::repl; repl;

do_commits read_import_file;

##ps. error checking was the idea for the early parse.
## but now I'm doing erroring again during commit phase, right? the effort was futile right?
## what's the use   of stream processing?
## monads?
## type checking.
## and auto conversion.

