#!/usr/bin/perl -w

# Don Jun 12 00:10:49 CEST 2008
(my $email='christian%jaeger,mine,nu')=~ tr/%,/@./;

use strict;

$0=~ /(.*?)([^\/]+)\z/s or die "?";
my ($mydir, $myname)=($1,$2);
sub usage {
    print STDERR map{"$_\n"} @_ if @_;
    print "$myname ancestor descendant

  Returns true (and says so by default) if ancestor is in the history
  seen from descendant.

  NOTE: gives true for the case of ancestor == descendant.

  Options:
  -q|--quiet    only use exit status to tell result, do not print anything
                unless errors happen (0=true, 1=false, other=error)
  -v|--verbose  show arguments ('prefix')
  -a|--both     show ancestry both ways (shows prefix even without -v)

  (Christian Jaeger <$email>)
";
exit (@_ ? 1 : 0);
}

use Getopt::Long;
our $verbose=0;
our $opt_quiet=0;
our $opt_both=0;
GetOptions("verbose"=> sub {
	       $verbose++
	   },
	   "help"=> sub{usage},
	   "q|quiet"=> \$opt_quiet,
	   "a|both"=> \$opt_both,
	   ) or exit 1;
usage unless @ARGV==2;

our ($ancestor,$descendant)=@ARGV;

use Chj::Git::Functions 'is_ancestor_of';

sub show_ancestority ( $ $ $ ) {
    my ($show_prelude,$ancestor,$descendant)=@_;
    my $is= is_ancestor_of ($ancestor,$descendant,$verbose > 1);
    if (!$opt_quiet) {
	print(($show_prelude ? "is '$ancestor' ancestor of '$descendant'?: " : ""),
	      ($is ? "yes" : "no"),
	      "\n")
	  or die;
    }
    $is
}
sub main_both {
    exit ((show_ancestority (1,$ancestor,$descendant)
	   or
	   show_ancestority (1,$descendant,$ancestor)) ? 0 : 1);
}
sub main_one {
    my $is= show_ancestority ($verbose,$ancestor,$descendant);
    exit ($is ? 0 : 1);
}

if ($opt_both) {
    main_both
} else {
    main_one
}

#use Chj::ruse;
#use Chj::Backtrace; use Chj::repl; repl;
