#!/usr/bin/perl -w

# Sun Apr 18 16:18:00 EDT 2010
(my $email='chrjae%gmail,com')=~ tr/%,/@./;

use strict;

$0=~ /(.*?)([^\/]+)\z/s or die "?";
my ($mydir, $myname)=($1,$2);
sub usage {
    print STDERR map{"$_\n"} @_ if @_;
    print "$myname [git ls-files parameters]

  Use git blame and count lines by authors.

  Options:
  --sort-by authorname
          sort by number of lines that author contributed, as
          percentage in that file
          Only report files that actually have a contribution by
          authorname in the current version

  (Christian Jaeger <$email>)
";
exit (@_ ? 1 : 0);
}

use Getopt::Long;
our $verbose=0;
our $opt_sort_by;
#our $opt_dry;
GetOptions("verbose"=> \$verbose,
	   "help"=> sub{usage},
	   "sort-by=s"=> \$opt_sort_by,
	   #"dry-run"=> \$opt_dry,
	   ) or exit 1;
#usage unless @ARGV;

our @lsfiles_opt=@ARGV;
# no "-" options? well, possibly yes. after "--" to this script

use Chj::IO::Command;
use Chj::Git::Functions 'git_ls_files';

our @ls= git_ls_files (undef, \@lsfiles_opt);

#use FP::Repl::Trap;

sub blame_path ( $ ) {
    my ($path)=@_;
    my $authors={};
    my $total=0;
    # not sure what -b does. (would it ever convert an id to eg. "master" or so without it?)
    local our $in= Chj::IO::Command->new_sender
      ("git","blame","-t","-l","-b",
       # -c is necessary to suppress showing the ~source paths (which it otherwise does *sometimes*)
       #  u wait, then it doesn't give the author full name. hmmm
       $path);
    while (<$in>) {
	chomp;
	/^
            # accept up to 80 char long id's to be compatible with future gits where it's not a sha-1 anymore (well?)
            # git blame -t -l -b uses the empty string for lines that are available in the initial commit
            (?:[a-f0-9]{40,80}|[ ]{40,80})

            # ignore filenames if present. assume that they never contain a paren.ok?
            [^(]*

             # author fullname followed by unixtime, tz, lineno
             \((.*?)\s+\d+\ [+-]\d{4}\s+\d+\)
	 /x
	  or die "no match in '$_'";
	my $author= $1;
	$$authors{$author}++;
	$total++;
    }
    $in->xxfinish;

    $$authors{__ALL__}=$total; #wl. gensym?wll.
    $authors
}

{
    package CJ_git_authorship;
    use Class::Array -fields=> -publica=>
      (
       'path',
       'authors',
      );
    sub new {
	my $cl=shift;
	bless [@_],$cl
    }
    #sub output { ##can't use print as name oder?
    sub printit {
	my $s=shift;
	my $path=$s->path;
	my $authors=$s->authors;
	my $all= $$authors{__ALL__};
        #print "$path ($all):\n";
	print "$path:\n";
	for my $author (sort {
	    (($$authors{$b})
	     <=>
	     ($$authors{$a})
             or
             $a cmp $b)
	} keys %$authors) {
	    next if $author eq "__ALL__";
	    printf '%5d %s'."\n", $$authors{$author}, $author;
	}
    }
    sub maybe_lines_by {
	my $s=shift;
	my ($key)=@_;
	$$s[Authors]{$key}
    }
    sub linespercent_by {
	my $s=shift;
	my ($key)=@_;
	if (defined (my $l= $s->maybe_lines_by($key))) {
	    $l / ($s->linestotal)
	} else {
	    0  # well hope it's not 0 lines total hehe.wh'evr
	}
    }
    sub linestotal {
	my $s=shift;
	$s->maybe_lines_by("__ALL__")
	  #hehe hier waer extra von maybe in hsk, whereas herenot.
    }
    sub linesscore_by {
	my $s=shift;
	my ($key)=@_;
	#$s->linespercent_by($key)
	#  * $s->linestotal  #well.haha. hm.
	#my ($key,$totaltotal)=@_;
	#hm.
	$s->linespercent_by($key) * log($s->linestotal)
    }
    end Class::Array;
}

our $ignore_suffix= +{
    map { $_ => 1 }
    qw(tif png gif jpg jpeg svg ico icns
       bmp xpm
       pdf ai
       exe so
       pbxproj
       win32 win32-cygwin-gnuc win32-msvc gtk2
       depend
       COPYING LICENSE
        )};

our @entries= map {
    my $path= $_;
    my $suffix= $path;
    $suffix=~ s{^.*[/\\]}{}s;
    $suffix=~ s/^.*\.//s;
    if ($ignore_suffix->{$suffix} or $ignore_suffix->{lc $suffix}) {
        ()
    } else {
        my $authors= blame_path $path;
        CJ_git_authorship->new($path,$authors)
    }
} (@ls);



if ($opt_sort_by) {
    @entries= sort {
	(($b->linesscore_by($opt_sort_by))
	 <=>
	 ($a->linesscore_by($opt_sort_by)))
    } grep {
	defined($_->maybe_lines_by($opt_sort_by))
    } @entries
}

$_->printit for @entries;


#use Chj::ruse;
#use Chj::Backtrace; use Chj::repl; repl;
