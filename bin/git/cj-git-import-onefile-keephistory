#!/usr/bin/perl -w

# Mon Jul 21 13:09:34 CEST 2008
(my $email='christian%jaeger,mine,nu')=~ tr/%,/@./;

use strict;

$0=~ /(.*?)([^\/]+)\z/s or die "?";
my ($mydir, $myname)=($1,$2);

our $commitmsg_body= sub {
    my ($maybe_commitmsg, $versionnumber)=@_;
    # careful: $versionnumber can also be a string ("current")
    my $body= "(version: $versionnumber; imported by $myname)";
    if ($maybe_commitmsg) {
	chompspace($maybe_commitmsg)."\n\n".$body
    } else {
	$body
    }
};

our $sort_by= "mtime"; # a CHJ_CJGITIMPORT::Entry method
our $sort_cmp= sub { #non first class prl.5anywy.
    $_[0] <=> $_[1]
};

sub usage {
    print STDERR map{"$_\n"} @_ if @_;
    print "$myname files

  Give all kept files of one file; it will commit them in order and
  with AUTHOR_TIME set to their mtime.

  Only works for one file at a time (maybe create a new empty branch
  using cj-git-fast-switch-branch and merge afterwards). See
  cj-git-import-keephistory for another more complicated approach.

  Options:
  --dry-run
  --no-current-version   import keep histories where no non-kept current
                         file exists
  --drop-identical-versions   if a newer version is identical to the older
                         one, ignore the resulting error from git and proceed,
                         i.e. do not record any trace of it.

  (Christian Jaeger <$email>)
";
exit (@_ ? 1 : 0);
}

use Getopt::Long;
our $verbose=0;
our $dry_run;
our $opt_git_force=1; #will I ever want it to be off?
our $opt_no_current_version;
our $opt_drop_identical_versions;
GetOptions("verbose"=> \$verbose,
	   "help"=> sub{usage},
	   "dry-run"=> \$dry_run,
	   "no-current-version"=> \$opt_no_current_version,
	   "drop-identical-versions"=> \$opt_drop_identical_versions,
	   ) or exit 1;
usage unless @ARGV;


##*modified* COPY from cj-git-import-keephistory
sub file_to_source_versionnumber_maybemsg ( $ ) {
    my ($fullfile)=@_;
    if ($fullfile=~ m/(.+)\.([0-9][0-9]*)(?:_(.*))?\z/s) {
	($1,$2,$3)
    } else {
	()
    }
}

##/COPY

use Chj::chompspace;
use Chj::xperlfunc ':all';

{
    package CHJ_CJGITIMPORT::Entry;
    use Class::Array -fields=>
      -publica=>
	(
	 'path',
	 'stat',
	 'basename', ## eigentlich falscher name!!. basepath?
	 'version', # can be "current"
	 'maybe_message'
	);
    sub mtime {#und schon hab ich n delegate
	my $s=shift;
	$$s[Stat]->mtime
    }
    sub is_current {
	my $s=shift;
	$s->path eq $s->basename
    }
    end Class::Array;
}

# slurp in data
our $entries=
  do {
      my $seen_unversioned_item;
      [
       # filepath, basename, maybe_versionnumber, maybe_msg, statobject
       # basename should be identical for all files; check for this afterwards.
       map {
	   my $stat= xlstat ($_);
	   if (my ($basename,$vers,$msg)=
	       file_to_source_versionnumber_maybemsg ($_)) {
	       bless [
		$_,
		$stat,
		$basename,
		$vers,
		$msg,
	       ], "CHJ_CJGITIMPORT::Entry"
	   } else {
	       if ($seen_unversioned_item) {
		   die "more than one item without a versionnumber: "
		     ."'$seen_unversioned_item' and '$_'";
	       } else {
		   $seen_unversioned_item=$_;
		   bless [
		    $_,
		    $stat,
		    $_,
		    "current", #undef,
		    undef #"current", ##
		   ], "CHJ_CJGITIMPORT::Entry"
	       }
	   }
       } @ARGV
      ]
  };

# check that everything is of the same file:
my $basename= $$entries[0]->basename; # also used further below.
{
    for (@$entries[1..$#$entries]) {
	my $current_basename= $_->basename;
	$current_basename eq $basename
	  or die "not all files are of the same basename: "
	    ."'$basename' vs. '$current_basename'";
    }
}

my $sortedentries=
  [ sort { $sort_cmp->($a->$sort_by, $b->$sort_by) } @$entries ];

if ($dry_run) {
    for (@$sortedentries) {
	print $_->path,"\n";
    }
} else {
    my $tmppath= $basename."_tmp_".rand;
    xlinkunlink $basename, $tmppath
      unless $opt_no_current_version;
    eval {
	for my $entry (@$sortedentries) {
	    if ($entry->is_current) {
		xlink $tmppath, $basename;
	    } else {
		xlink $entry->path, $basename;
	    }
	    xxsystem("git",
		     "add",
		     ($opt_git_force ? "-f" :()),
		     "--",
		     $basename);
	    &{$opt_drop_identical_versions ? \&xsystem : \&xxsystem}
	      ("cj-git-commit-with-authordate-of-file",
	       $basename,
	       "-m",
	       &$commitmsg_body(
				$entry->maybe_message,
				$entry->version,
			       ),
	       "--",
	       $basename);
	    xunlink $basename;
	}
    };
    my $e=$@;
    unless ($opt_no_current_version) {
	unlink $basename; #safe, right?
	xlinkunlink $tmppath, $basename;
    }
    if (ref $e or $e) {
	die $e
    }
}


#use Chj::ruse;
#use Chj::Backtrace; use Chj::repl; repl;
