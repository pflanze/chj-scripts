#!/usr/bin/perl -w

# Sat Aug  9 22:54:05 CEST 2008
(my $email='XXX%YYY,ch')=~ tr/%,/@./;

use strict;

$0=~ /(.*?)([^\/]+)\z/s or die "?";
my ($mydir, $myname)=($1,$2);

use Chj::xhome;

our $logfile= xhome."/.$myname.log";
our $ignoreposition_v= "ICY_METADATA_STRIP_IGNORE_TILL";

sub usage {
    print STDERR map{"$_\n"} @_ if @_;
    print "$myname file

  writes the file, which is a captured http stream *including the http
  reply headers*, to stdout with the headers and metadata stripped;
  additionally it prints the titles and their byte positions in the output.

  Example:
   icy-metadata-strip foo.mp3httpstream > /tmp/chris/foo.mp3 2> foo.list

  Or:
   icy-metadata-strip --servlist foo.mp3httpstream > foo.servlist 2> foo.list
  in which case it outputs a list with the lengths of all gaps and live parts,
  usable for serving (by a yet-to-be-written program) without having to save
  the stripped binary data.


  Always logs output to $logfile, too, although it skips entries with
  positions lower than what $ignoreposition_v contains, if set.

  (Christian Jaeger <$email>)
";
exit (@_ ? 1 : 0);
}

use Getopt::Long;
our $verbose=0;
our $opt_servlist;
GetOptions("verbose"=> \$verbose,
	   "help"=> sub{usage},
	   "servlist"=> \$opt_servlist,
	   ) or exit 1;
usage unless @ARGV==1;
our ($file)=@ARGV;

# read how, bytewise? or just normal buffered functions all
# through?. well latter since anyway blah.

use Chj::xopen 'xopen_read';
use Chj::xsysopen 'xsysopen_append';
use Chj::chompspace;

local our $in=xopen_read $file;
local our $headers={};
while (<$in>) {
    s/[\r\n]+\z//s;
    if (/^\z/) {
	last; ##hm are both \r and \n consumed at that point or only one?
    }
    if (/^HTTP\//i) {
	# ignore
    } else {
	my ($key,$val)= split /:/,$_,2
	  or die "non-header?: '$_'";
	#well that wasn't a guarantee yet for 2 fields grr.?. anyway.
	if (defined $val) {
	    $$headers{lc(chompspace $key)}= chompspace($val);
	} else {
	    warn "invalid header: '$_'"
	      unless /^ICY 200 OK/; # di.fm sends these
	}
    }
}

local our $pos= $in->xtell;
our $maybe_ignoreposition= $ENV{$ignoreposition_v};

use Chj::xperlfunc;

# http://www.smackfu.com/stuff/programming/shoutcast.html
sub read_icy_data_block ( $ ) {
    my ($in)=@_;
    my $len= do {
	my $ch= getc $in; defined $ch or die "read error?: $!";
	16 * ord $ch
    };
    #warn "len=$len";
    my $buf;
    $in->xread($buf,$len);
    $buf
}

our ($justcopy,
     $chunksize,
     $metainterval)=
  do {
      if (my $v= $$headers{'icy-metaint'}) {
	  (0,
	   $v,
	   $v)
      } else {
	  warn "no icy-metaint header, thus no icy metadata present, right?";
	  warn "just copying remainder of input verbatim";#'verbatim'?
	  (1,
	   4096,
	   undef)
      }
  };

local our $out= bless *STDOUT{IO},"Chj::IO::File";#usual crack

local our $log = xsysopen_append($logfile,0600)
  unless $justcopy;

my $buf;
my $pos_shrunk=0;
while (1) {
    my $len= $in->xread($buf, $chunksize);
    if ($len==0) {
	last;
    } else {
	if ($justcopy) {
	    $out->xprint ($buf);
	} else {
	    if ($len == $metainterval) {
		#$pos_shrunk+= $out->xprint ($buf);  NOPE that's wrong. grr todo fix my lib?
		$out->xprint ($buf);
		$pos_shrunk+=length($buf);
		# now skip until \0 found. or capture if you want
		local our $str= read_icy_data_block ($in);
		if (length $str) {
		    if ($str=~ /StreamTitle='(.*?)';/i) {
			my $msg="$pos_shrunk\t$1\n";
			print STDERR $msg;
			if ($log
			    and
			    (not ($maybe_ignoreposition)
			     or
			     ($pos_shrunk >= $maybe_ignoreposition))) {
			    $log->xprint (time, " ", $msg);
			    $log->xflush;
			}
		    } else {
			#if (DEBUG) {
			#    use Chj::Backtrace; use Chj::repl; repl
			#} else {
			    die "no match in icy meta data";
			#}
		    }
		}
	    } else {
		warn "nearing end of file? only got $len bytes ".
		  "(after outputting $pos_shrunk bytes)";
		#$pos_shrunk+= $out->xprint ($buf);
		$out->xprint ($buf);
		$pos_shrunk+=length($buf);
		## set flag which makes us terminate if it proceeds?.
		## well or just <> here and expect eof.
	    }
	}
    }
}

$out->xclose;
$in->xclose;

#use Chj::ruse;
#use Chj::Backtrace; use Chj::repl; repl;
