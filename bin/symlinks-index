#!/usr/bin/perl -w

# Tue 12 May 14:17:43 BST 2020
(my $email='ch%christianjaeger,ch')=~ tr/%,/@./;

use strict; use warnings FATAL => 'uninitialized';

$0=~ /(.*?)([^\/]+)\z/s or die "?";
my ($mydir, $myname)=($1,$2);
sub usage {
    print STDERR map{"$_\n"} @_ if @_;
    print "$myname dirpath

  On startup creates an in-memory index of the symlinks contained in
  \$dirpath, then reads target-paths from stdin and writes the
  source-paths that link to the target-path to stdout. The end of an
  answer group is indicated by an empty string written to stdout.
  By default, entries are terminated by newline characters.

  Options:

   -z   use the null byte as record terminator for writing.
   -0   use the null byte as record terminator for reading and writing.
   --remove-base base   remove base from the target paths before putting
                        them into the index (simply substring it (for now))

  (Christian Jaeger <$email>)
";
exit (@_ ? 1 : 0);
}

use Getopt::Long;
our $verbose=0;
my $EOL= "\n";
my $opt_remove_base;
GetOptions("verbose"=> \$verbose,
	   "help"=> sub{usage},
	   "z" => sub { $EOL= "\0" },
	   "0" => sub { $EOL= "\0"; $/ = "\0" },
	   "remove-base=s" => \$opt_remove_base,
	  ) or exit 1;
usage unless @ARGV==1;

use Chj::xopendir;
use Chj::xperlfunc qw(xlstat xreadlink xprint);
use IO::Handle;

sub xprinteol {
    xprint @_, $EOL
}

sub xflush {
    *STDOUT{IO}->flush or die "flush: $!";
}

sub cleanup_target {
    my ($str)=@_;
    # remove end slash (but only if it's not the '/' dir)
    $str=~ s|([^/])/+\z|$1|;
    $str
}


my %target; # => [ source ]

for (@ARGV) {
    my $d= xopendir $_;
    while (defined (my $item= $d->xnread)) {
        my $s= xlstat "$_/$item";
        if ($s->is_symlink) {
	    my $target= xreadlink "$_/$item";
	    if ($opt_remove_base) {
		$target=~ s/^\Q$opt_remove_base//
		  or die "target does not start with '$opt_remove_base': ".
		    "'$target'";
	    }
	    $target= cleanup_target($target);
            push @{$target{$target}}, $item
        }
    }
}

while (<STDIN>) {
    chomp;
    $_= cleanup_target($_);
    if (my $items= $target{$_}) {
        for my $item (@$items) {
            xprinteol $item;
        }
    }
    xprinteol;
    xflush;
}



#use Chj::ruse;
#use Chj::Backtrace; use Chj::repl; repl;
