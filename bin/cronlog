#!/bin/bash

set -euo pipefail
IFS=
# remember, *still* need to quote variables!

usage () {
    echo "$0 logfile cmd [args]"
    echo "  run cmd with stdout and stderr piped through log-timestamp to logfile "
    echo " (and tee'd to a tempfile); if cmd fails (non-zero exit code, or one of "
    echo " the exit codes listed in the CRONLOG_EXIT_OK env variable), cat "
    echo " the saved stderr+stdout to stdout."
    echo " Set for example CRONLOG_EXIT_OK='0 1 2' to accept these 3 codes as OK "
    echo " (default: 0)."
    exit 1
}

if [ $# -lt 2 ]; then
    usage
fi

logfile="$1"
shift

tmpf=`mktemp`

is_ok () {
    local code="$1"
    local c
    local IFS=' '
    for c in ${CRONLOG_EXIT_OK-"0"}; do
	if [ "$c" = "$code" ]; then
	    return 0
	fi
    done
    return 1
}

declare -a pstatus
set +e
"$@" 2>&1 | tee "$tmpf" | log-timestamp >> "$logfile"
pstatus=(${PIPESTATUS[@]})
set -e

exitcode=${pstatus[0]}
teecode=${pstatus[1]}
logcode=${pstatus[2]}

if [ "$logcode" != 0 ]; then
    echo "== log-timestamp exited with code $logcode =="
fi
if [ "$teecode" != 0 ]; then
    echo "== tee exited with code $teecode =="
fi
if ! is_ok "$exitcode"; then
    echo "== command exited with code $exitcode and output: =="
    cat "$tmpf"
fi

rm "$tmpf"

exit "$exitcode"
