#!/usr/bin/perl -w

# Wed 24 Jul 08:37:09 BST 2019
(my $email='ch%christianjaeger,ch')=~ tr/%,/@./;

use strict; use warnings FATAL => 'uninitialized';
use experimental 'signatures';

$0=~ /(.*?)([^\/]+)\z/s or die "?";
my ($mydir, $myname)=($1,$2);
sub usage {
    print STDERR map{"$_\n"} @_ if @_;
    print "$myname timedesc

  Uses Perl's https://metacpan.org/pod/Time::ParseDate plus custom
  features (s, m, h, d, y shortcuts for seconds, minutes, .. years) to
  parse timedesc, which can be a duration or a point in time, and
  sleeps till then.

  --random
            sleep 0..2 times as long as the duration specified by
            timedesc (clustered around 1 times as long); uses random
            sub-second part, too.
  --verbose
            print the end time to stderr (default)
  --quiet
            do not print anything


  Also see dateparse.

  (Christian Jaeger <$email>)
";
exit (@_ ? 1 : 0);
}

use Getopt::Long;
our $verbose=1;
our $opt_random;
our $debug;
our $opt_test;
GetOptions("verbose"=> \$verbose,
           "debug"=> \$debug,
           "test"=> \$opt_test,
	   "help"=> sub{usage},
	   "quiet"=> sub{ $verbose = 0; },
           "random"=> \$opt_random,
	   ) or exit 1;

use Time::ParseDate;
use Time::HiRes qw(time sleep);
if ($opt_random) {
    require Chj::Random::Formatted; Chj::Random::Formatted->import("random_u64");
}

sub gaussianrandom {
    my ($ntries)= @_;
    my $tot= 0;
    $tot += random_u64() for 1..$ntries;
    $tot / ($ntries * 2**63)
}



my %short2long=
  (s=> "seconds",
   m=> "minutes",
   h=> "hours",
   d=> "days",
   y=> "years",
   "'"=> "minutes",
   "''"=> "seconds",
  );



use Scalar::Util qw(blessed);

sub Error($v) {
    die $v if $debug;
    bless [$v], "PFLANZE::Error"
}
sub is_Error ($v) {
    blessed($v) and $v->isa("PFLANZE::Error")
}

sub perhaps_parse($str, $unit_re) {
    if ($str=~ s/^\s*(\d+)\s* $unit_re \s*//sxi) {
        my ($val)= ($1);
        ($val, $str)
    } else {
        ()
    }
}

sub parse_hms {
    my ($orig)= @_;
    my $str0= $orig;
    my $ms= sub ($hours, $str1, $seen_hours) {
        if (my ($min, $str2)= perhaps_parse $str1, qr/m(?:in(?:utes?)?)?/) {
            my $sec;
            if (my ($_sec, $str3)= perhaps_parse $str2, qr/s(?:ec(?:onds?)?)?/) {
                length($str3) and return Error "parse_hms($orig): unknown rest '$str3'";
                $sec = $_sec;
            } else {
                if (($_sec)= $str2=~ /^(\d+)\s*\z/) {
                    $sec = $_sec;
                } else {
                    length($str2) and return Error "parse_hms($orig): unknown rest '$str2'";
                    $sec = 0;
                }
            }
            (($hours * 60) + $min) * 60 + $sec
        } else {
            if ($seen_hours) {
                my $min;
                if (my ($_min, $str2)= perhaps_parse $str1, qr/m(?:in(?:utes?)?)?/) {
                    length($str2) and return Error "parse_hms($orig): unknown rest '$str2'";
                    $min = $_min;
                } else {
                    if (($_min)= $str1=~ /^(\d+)\s*\z/) {
                        $min = $_min;
                    } else {
                        length($str1) and return Error "parse_hms($orig): unknown rest '$str1'";
                        $min = 0;
                    }
                }
                (($hours * 60) + $min) * 60
            } else {
                Error "parse_hms($orig): no match";
            }
        }
    };
    if (my ($hours, $str1)= perhaps_parse $str0, qr/h(?:ours?)?/) {
        $ms->($hours, $str1, 1)
    } else {
        $ms->(0, $str0, 0)
    }
}

require FP::Repl::Trap if $debug;
is_Error parse_hms "1" or die;
parse_hms("1h") == 3600 or die;
parse_hms("2h") == 2*3600 or die;
parse_hms("1h10m") == 70*60 or die;
parse_hms("1h10") == 70*60 or die;
is_Error parse_hms "1h10s" or die;
parse_hms("1h10m5") == 70*60+5 or die;
parse_hms("1h10m5seconds") == 70*60+5 or die;
parse_hms("10m5") == 10*60+5 or die;
parse_hms("10m") == 10*60 or die;
is_Error parse_hms("10s") or die; # OK since parsedate will handle that one
#use FP::Repl;repl;

sub parseFuture ($orig, $now, $accept_past = 0){
    my $hms= parse_hms $orig;
    if (! is_Error $hms) {
        $now + $hms
    } else {
        my @parts= split /\+/, $orig;
        my $t= do {
            if (@parts > 1) {
                # must be relative!-- or not? see below
                #my @ts = map { parseFuture $_ } @parts;
                #no, fold.
                my $t= $now;
                for my $p (@parts) {
                    # How to enforce it to be relative??  what about
                    # "10:40+5min" or so ? Ah that actually does work and is
                    # not all-parts relative! But, what about '5s+4:40'? Well
                    # that's parsed as 4:40:00 currently. And, might be
                    # perfect.
                    $t= parseFuture($p, $t, 1);
                }
                $t
            } else {
                my $s= $orig;
                # Time::ParseDate does not support 's' etc, thus pre-process
                $s=~ s{(\b|\d)([smhdy])(\b|\d)}{
                    $1 . ($short2long{$2} // die "bug") . $3
                }ge;
                $s=~ s{(\'+)}{
                    ($short2long{$1} // die "bug")
                }ge;
                my ($maybe_t, $err)=
                  parsedate($s,
                            WHOLE=> 1, PREFER_FUTURE=> 1, VALIDATE=> 1, UK=>1,
                            NOW=> $now);
                defined $maybe_t
                  or die join("\n  and ", @$hms, "parseFuture('$orig'): $err");
                $maybe_t
            }
        };
        if (!$accept_past and $t < $now) {
            die join("\n  and ", @$hms,
                     "parseFuture('$orig'): time (".localtime($t)
                     ." is past now (".localtime ($now).")");
        }
        $t
    }
}

sub sleepUntil ($) {
    my ($t)=@_;
    while (1) {
        my $now= time;
        my $d= $t-$now;
        if ($d <= 0) {
            return
        }
        #warn "sleep $d"; ah, perl already handles interrupted sleep calls?
        # well, would have to try with a signal handler.
        sleep $d
    }
}

exit if $opt_test;
usage unless @ARGV==1;

my ($str)= @ARGV;

my $t0= time;
my $t= parseFuture $str, $t0;

if ($opt_random) {
    my $t0 = time;
    my $d = $t - $t0;
    my $d2 = $d * gaussianrandom 3;
    $t = $t0 + $d2;
}

my $d= $t-$t0;
my $dstr= do {
    use integer;
    my $m1= $d / 60; my $s= $d % 60;
    my $h= $m1 / 60; my $m= $m1 % 60;
    sprintf '%02dh %02dm %02ds', $h, $m, $s
};

warn "$myname: sleeping $dstr\n"
    .(' ' x length($myname))."  until $t = ".localtime($t)."\n"
    if $verbose;

sleepUntil $t;

