#!/bin/bash

set -eu

usage () {
    echo "$0 file"
    exit 1
}

if [ $# -lt 1 ]; then
    usage
fi

if [[ $1 = "-h" || $1 = "--help" ]]; then
    usage
fi

if [ "$1" = "--" ]; then
    shift
fi

if [ $# -ne 1 ]; then
    usage
fi

file="$1"

sum=$(sha256sum < "$file" | printfield 1)


rzcat_shared_tmpdir_link=~/.rzcat-tmpdir

alloc_tmpdir () {
    tmpdir=$(tempdir)
    rm -f "$rzcat_shared_tmpdir_link"
    ln -s "$tmpdir" "$rzcat_shared_tmpdir_link"
}

if tmpdir=$(readlink "$rzcat_shared_tmpdir_link"); then
    if ! test -d "$tmpdir"; then
	alloc_tmpdir
    fi
else
    alloc_tmpdir
fi

uncompressedfile="$tmpdir/$sum"
tmp="$uncompressedfile.tmp$$"

if ! test -e "$uncompressedfile"; then

    # cleanup
    setsid perl -w -MPOSIX -e '
	for (@ARGV) {
	    m{^/} or die "path is not absolute: $_";
	}
	chdir("/");
	POSIX::close($_) for (0..1000);
	sleep(30*60); # keep cache files around that many seconds
	# warnings suppressed anyway via the closure of filehandles above
	unlink $_ for @ARGV;
    ' "$tmp" "$uncompressedfile" &

    # uncompress
    rm -f "$tmp"
    rzip -k -d -o "$tmp" -- "$file"
    mv -f -- "$tmp" "$uncompressedfile"

fi

# Tried my own 0cat here, using splice and sendfile, but those
# apparently don't help less get the file size in advance

cat "$uncompressedfile"

