#!/usr/bin/perl -w

# Mon Aug 11 03:34:02 CEST 2008
(my $email='XXX%YYY,ch')=~ tr/%,/@./;

use strict;

my $mainbranch= "trunk";

$0=~ /(.*?)([^\/]+)\z/s or die "?";
my ($mydir, $myname)=($1,$2);
sub usage {
    print STDERR map{"$_\n"} @_ if @_;
    print "$myname

  Create git tags from the tags/ branches imported by git svn
  --stdlayout, and do so for the branch points where the tags/
  branches diverted from the main branch '$mainbranch' (so that gitk
  without the --all option will show them).

  Options:
  --verbose  some verbosity

  (Christian Jaeger <$email>)
";
exit (@_ ? 1 : 0);
}

use Getopt::Long;
our $verbose=0;
GetOptions("verbose"=> \$verbose,
	   "help"=> sub{usage},
	   ) or exit 1;
usage if @ARGV;

use Chj::xperlfunc;
use Chj::Git::Functions ":all";
use Chj::IO::Command;

sub Warn {
    print STDERR "$myname: @_\n"
}


sub setenv_from_headerline {
    my ($line)=@_;
    my ($key,$name,$email,$time,$zone)=
      $line=~ /^(author|committer) (.*?) <([^<>\s]+)> (\d{6,}) ([+-]\d{4})$/
	or die "no match '$line'";
    my $set= sub {
	my ($e)= @_;
	$ENV{"GIT_${e}_NAME"}= $name;
	$ENV{"GIT_${e}_EMAIL"}= $email;
	$ENV{"GIT_${e}_DATE"}= localtime($time); #s1ck as always...
	# ZONE..HMMM.
	die "currently only supporting zone 0000, '$zone'"
	  unless $zone==0;
    };
    if ($key eq "author") {
	#&$set("TAGGER");  not used either
	&$set("COMMITTER");
    } elsif ($key eq "committer") {
	# ignore
    } else {
	die "??"
    }
}

sub xxbacktick {
    my $in= Chj::IO::Command->new_sender (@_);
    my $cnt= $in->xcontent;
    $in->xxfinish;
    $cnt
}

sub xgcat ($ ) {
    my ($id)=@_;
    # no check for type!
    xxbacktick ("git","cat-file","-p", $id)
}

sub maybe_git_tag_ref ($ ) {
    my ($name)=@_;
    if (my $id= maybe_git_rev_parse ($name)) {
	my $cnt= xgcat($id);
	## should really verify whether it is a tag object right.sgh.
	if ($cnt=~ /^object (\S+)\stype commit\ntag /s) {
	    $1
	} elsif (/^tree /) { # should really check for the type
	    # a direct tag
	    $id
	} else {
	    die "what type is tag ref '$name'??"
	}
    } else {
	undef
    }
}

my $branches= Chj::IO::Command->new_sender ("git","branch","-av");

while (<$branches>) {
    if (my ($name,$id)= m|^\s*(?:remotes/)?tags/(\S+)\s+(\S+)|) {
	my @ancest= git_merge_base__all ($mainbranch, $id);
	if(@ancest==1) {
	    my $ancest= $ancest[0];
	    if (my $exists= maybe_git_tag_ref ($name)) {
		if ($exists eq $ancest) {
		    Warn "tag $name already set to $ancest"
		      if $verbose;
		} else {
		    Warn "WARNING: tag $name set to $exists, while we want it at $ancest";
		}
	    } else {
		my $cnt= xgcat($id);
		my ($head,$body)= split /\n\n/,$cnt,2;
		my @headers= split /\n/, $head;
		setenv_from_headerline (grep {
		    not /^tree|parent/
		} @headers);
		xxsystem "git","tag","-a","-m",$body,
		  $name,$ancest;
	    }
	} else {
	    my $str= (@ancest==0) ? "no" : "more than one";
	    Warn "$str common ancestor for $mainbranch and tags/$name ($id)";
	    # not tags/$name/HEAD  btw, that one doesn't exist
	}
    }
}

$branches->xxfinish;

#use Chj::ruse;
#use Chj::Backtrace; use Chj::repl; repl;

