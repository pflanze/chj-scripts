#!/usr/bin/perl

# Copyright (c) 2003,2005,2014 Christian Jaeger, published under the
# Apache 2.0 license (see http://www.apache.org/licenses/)

(my $email='ch%christianjaeger,ch')=~ tr/%,/@./;

use strict;

$0=~ /([^\/]+)$/s or die "?";
my $myname=$1;
sub usage {
    print STDERR map{"$_\n"} @_ if @_;
    print "$myname [ options ]
  Print listener processes, with the help of netstat.
  Options:
  -t  --head(er|ing)  Print a header line.
  -s  --short(name)   Only print command name, no arguments.
  -w  wide output, do not truncate last column
";
exit @_ ? 1 : 0;
}

my @files;
my $DEBUG=0;
my ($opt_w,$opt_h,$opt_s);
for (my $i=0; $i<=$#ARGV; $i++) {
    local $_=$ARGV[$i];
    if (/^--?h(elp)?$/) {
    	usage
    } elsif ($_ eq '--') {
    	push @files, @ARGV[$i+1..$#ARGV];
    	last;
    } elsif (/^--?d(ebug)?$/) {
	$DEBUG=1;
    } elsif (/^--?w(ide)?$/) {
	$opt_w=1;
    } elsif ($_ eq '-t' or /^--h(ead(er|ing)?)?$/) {
	$opt_h=1;
    } elsif ($_ eq '-s' or /^--short(name)?$/) {
	$opt_s=1;
    } elsif (/^-/) {
    	warn "Unknown option '$_'\n";
    	usage(1)
    } else {
    	push @files, $_
    }
}
usage if @files;


my @lines= `netstat -A inet -A inet6 -p -l -n`;

((shift @lines)=~/^(udp|tcp)/ and die) for (1..2);

my @records = map {
    chomp;
    my ($pid,$progname)= do {
	if (s/\s(\d+)\/(\S+)//) {
	    ($1,$2)
	} else {
	    warn "no match: $_";
	    (undef, undef)
	}
    };
    my @cols= split /\s+/;
    my ($prot, undef, undef, $ip_port) =@cols;
    my ($ip,$port)= $ip_port=~ /(.*):(\d+)\z/s
      or die "no match for ip_port '$ip_port'";
    [$prot,$ip eq '0.0.0.0' ? '*' : $ip,$port,$pid,$progname]
} @lines;

sub getuserfrompid{
    my ($pid)=@_;
    return 0 if $pid eq "-"; # kernel thread?
    $pid=~ /^\d+$/s or die "This is not a pid: '$pid'";
    open PIDIN,"</proc/$pid/status"
      or die "pid '$pid': $!\n";
    local $/; my $a=<PIDIN>;
    close PIDIN
      or die $!;
    $a=~ /^Uid:\s*(.*)/m
      or die "could not find Uid entry in /proc/$pid/status:\n$a\n ";
    my @uids=split /\s+/,$1;
    my %uids;
    $uids{$_}=undef for @uids;
    #if (exists $uids{0}){
    #    "root"
    #} else {
    join ",", map {scalar getpwuid $_} sort keys %uids
    #}
}

sub getprognamefrompid{
    my ($pid)=@_;
    return "(kernel thread?)" if $pid eq "-"; # kernel thread?
    $pid=~ /^\d+$/s or die "This is not a pid: '$pid'";
    if (open PIDIN,"</proc/$pid/cmdline") {
	local $/; my $a=<PIDIN>; close PIDIN or die $!;
	$a=~ tr/\0/ /;
	$a
    } else { die "pid '$pid': $!\n" }
}

my ($prot,$ip,$port,$pid,$progname);
my ($user,$shown_progname);

my $lastcol= do {
    if ($opt_w) {
	"*"
    } else {
	my $linelength= $ENV{COLUMNS} || 80;
	"<" x ( $linelength - 3 - length
'@<<<  @>>>>>>>>>>>>>>> @<<<<< @|||||||... @>>>>> @') . "...";
    }
};

my $format= <<'END';
format STDOUT=
@<<<  @>>>>>>>>>>>>>>> @<<<<< @|||||||... @>>>>> @LAST
$prot,$ip,             $port, $user,      $pid,  $shown_progname
.
1
END

$format=~ s/LAST/$lastcol/;

eval $format || die;

if ($opt_h) {
    print <<'END';
Proto               Ip Port     User(s)      Pid Command
END
}

for (sort { $a->[0] cmp $b->[0]
	      or
		$a->[1] cmp $b->[1]
		  or
		    $a->[2] <=> $b->[2] } @records) {
    #print join(" ",@$_),"\n";
    ($prot,$ip,$port,$pid,$progname)=@$_;
    eval {
	$user=$shown_progname="???";
	$user= getuserfrompid($pid);
	$shown_progname= $opt_s ? $progname : getprognamefrompid($pid);
	1
    } ? write : print STDERR $@;
}
