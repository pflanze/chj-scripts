#!/usr/bin/perl -w

# Die Apr 13 09:52:42 MEST 2004
(my $email='pflanze%gmx,ch')=~ tr/%,/@./;

use strict;

my ($mydir, $myname);
BEGIN {
    $0=~ /(.*?)([^\/]+)\z/s or die "?";
    ($mydir, $myname)=($1,$2);
    unshift @INC,"$mydir/lib";
}
use Chj::IO::Command;
use Chj::xperlfunc;
use Chj::Unix::Daemonizer;
use Chj::xsysopen qw(xsysopen_append );

my $logturnperiod=60*60*4;

sub usage {
    print STDERR map{"$_\n"} @_ if @_;
    print "$myname host

  About the 'opposite' of ping: uses ping, but only shows *lost* packets.

  Options:
  -d dirpath   If given, the script runs as a daemon and logs the output
               to files in the given directory, opening a new log every
               $logturnperiod seconds.
  -k dirpath   kill a running daemon.
  --logturnperiod seconds   override default of $logturnperiod

  (Christian Jaeger <$email>)
";
exit @_ ? 1 : 0;
}


my @args;
my $dirpath;
my $killdirpath;
for (my $i=0; $i<=$#ARGV; $i++) {
    local $_=$ARGV[$i];
    if (/^--?h(elp)?$/) {
    	usage
    } elsif ($_ eq '--') {
    	push @args, @ARGV[$i+1..$#ARGV];
    	last;
    } elsif (/^--?d(?:irpath(?:=(.*))?)?$/) {
        if (defined $1) {
            $dirpath=$1
        } else {
            $dirpath=$ARGV[++$i] or usage "missing argument for '$_' option";
        }
    } elsif (/^--?k(?:ill(?:dirpath)?(?:=(.*))?)?$/) {
        if (defined $1) {
            $killdirpath=$1
        } else {
            $killdirpath=$ARGV[++$i] or usage "missing argument for '$_' option";
        }
    } elsif (/^--?l(?:ogturnperiod(?:=(.*))?)?$/) {
        if (defined $1) {
            $logturnperiod=$1
        } else {
            $logturnperiod=$ARGV[++$i] or usage "missing argument for '$_' option";
        }
    } elsif (/^-./) {
    	usage("Unknown option '$_'\n");
    } else {
    	push @args, $_
    }
}
usage unless @args==1 or $killdirpath;

my ($ip)=@args;

use Text::CSV;
my $csv= Text::CSV->new({sep_char=> ",",
			 eol=> "\n"});
#open $fh, ">:encoding(utf8)", "new.csv" or die "new.csv: $!";
my $fh= *STDOUT{IO};
sub print_csv ($$$) {
    $csv->print($fh, [@_]);
}

sub print_lost_title () {
    print_csv("lost packet",
	      "which was expected at",
	      "message");
}

# XX time passing argument inconsistency

sub print_lost ($$;$) {
    my ($n, $t, $maybe_msg)= @_;
    print_csv($n,
	      "".localtime($t),
	      (defined $maybe_msg ? $maybe_msg : ""));
}

sub print_lost_start($) {
    my ($firstline)= @_;
    print_lost_title;
    print_lost(undef, time, "start: $firstline");
}

sub print_lost_end($) {
    my ($str)= @_;
    print_csv(undef,
	      "".localtime(),
	      $str);
}

sub print_error ($) {
    my ($msg)= @_;
    print_csv("ERR",
              "".localtime(),
              $msg);
}

sub suchluecken {

    my $cmd= Chj::IO::Command->new_combinedsender("ping", $ip);

    # keep past packets

    my $biggestseenno=0;
    my %notyetseenno;

    $SIG{INT}= $SIG{TERM}= $SIG{ALRM}= $SIG{HUP}= sub {
	print_lost_end("stop because of SIG@_");
	for (sort { $a <=> $b } keys %notyetseenno) {
	    my $t= $notyetseenno{$_};
	    print_lost($_, $t);
	}
	kill 9, $cmd->pid;
	print_lost_end("stopped");
	exit;
    };

    alarm 10;

    # startup message
    {
	my $firstline= <$cmd>;
	$firstline=~ s/^PING /pinging: /
          or die "strange reply, terminating: $firstline";
	chomp $firstline;
	print_lost_start($firstline);
    }

    my $starttime= time;
    my $nimmererwartet= -1;

    $|=1;

    alarm 10; # to stop if no returns are coming at all.
    my $alarmoff;
    while (<$cmd>) {
        chomp;
	unless ($alarmoff) { alarm 0; $alarmoff=1 };
	# 64 bytes from 129.132.19.75: icmp_seq=0 ttl=246 time=11.4 ms
	if (/^\d+ bytes from \S+: icmp_seq=(\d+)/) {
            my $newseenno=$1;
            my $time=time;
            if ($newseenno > $biggestseenno) {
                if ($newseenno == $biggestseenno+1) {
                    # all ok
                } else {
                    for ($biggestseenno+1 .. $newseenno-1) {
                        # calculate back time
                        $notyetseenno{$_}= $time - ($newseenno - $_);
                    }
                }
                $biggestseenno= $newseenno;
            } else {
                # latecomer
                if ($newseenno <= $nimmererwartet) {
                    print_lost($newseenno, $time, "arrived late");
                }
            }
            # clean up
            for (sort { $a <=> $b } keys %notyetseenno) { # smallest first
                if (($biggestseenno - $_) < 10) {
                    # wait for the last that many packets
                    $nimmererwartet= $_;
                    last
                }
                my $t= $notyetseenno{$_};
                print_lost($_, $t);
                delete $notyetseenno{$_};
            }
        } else {
            print_error($_);
        }
    }

    # $cmd->xxfinish or ?
}

sub fullsleep {
    my ($span)=@_;
    my $now=time;
    my $endtime=$now+$span;
    do {
	sleep $endtime-$now;
	$now=time;
    } until ($now>=$endtime);
}

if ($dirpath) {
    !$killdirpath
      or usage "both -d and -k given";
    my $daemon= Chj::Unix::Daemonizer->default->clone;
    $daemon->set_runpath("$dirpath/.run");
    $daemon->set_outputs(xsysopen_append "$dirpath/.errlog");
    if (my $pid= $daemon->fork) {
	print "started daemon with pid $pid, see files in $dirpath;\n";
	print "to kill the daemon, type 'kill $pid' or '$myname -k $dirpath'.\n";
	exit;
    } else {
	# sigproxy again, sigh
	$SIG{INT}=$SIG{TERM}= $SIG{ALRM}=$SIG{HUP}= sub {
	    kill "HUP",$pid if $pid;
	    exit 3; # whatever
	};
	while (1) {
	    if ($pid= xfork) {
		fullsleep $logturnperiod;
		kill "HUP",$pid;
		wait;
	    } else {
		my $logname= localtime(); $logname=~ tr/ /_/; $logname=~ s/://sg;
		my $logfile= "$dirpath/$logname.csv";
		open STDOUT, ">>$logfile"
                  or die "error creating/opening '$logfile': $!";
		open STDERR, ">&STDOUT"
                  or die "dup: $!";
		suchluecken;
		exit;
	    }
	}
    }
} elsif ($killdirpath) {
    !$dirpath
      or usage "both -d and -k given";
    my ($user, $hostname, $ip, $pid)=
      Chj::Unix::DaemonRunfile->new("$killdirpath/.run")->readfile;
    # uuugly
    ($pid and $pid=~ /^\d+$/)
      or die "$killdirpath/.run does not contain a pid";
    xkill "HUP", $pid;
    print "stopped daemon.\n";
} else {
    suchluecken;
}
