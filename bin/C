#!/usr/bin/perl -w

# Tue May  4 07:00:03 EDT 2010
(my $email='ch%christianjaeger,ch')=~ tr/%,/@./;

use strict;

use Chj::xtmpfile;
use Chj::singlequote qw(possibly_singlequote_sh);
use Chj::xperlfunc 'xchmod';

$0=~ /(.*?)([^\/]+)\z/s or die "?";
my ($mydir, $myname)=($1,$2);
sub usage {
    print STDERR map{"$_\n"} @_ if @_;
    print "$myname cmd [args] _ [other args [ _ [further args]]]

  shortcut for: lambda 'cmd args \"\$1\" other args \"\$2\" further args'

  (Christian Jaeger <$email>)
";
exit (@_ ? 1 : 0);
}

usage unless @ARGV;
usage if (@ARGV==1 and ($ARGV[0] eq "-h" or $ARGV[0] eq "--help"));

my $t= xtmpfile;

# need the number of _ already; so choose to walk @ARGV twice
my $n = do {
    my $n=0;
    for (@ARGV) {
	if ($_ eq "_") {
	    $n++
	}
    }
    $n
};


# also produce the call code twice: here for display, later with '_'
# replaced by positional argument references
my $origcode= join(" ", map{possibly_singlequote_sh $_} @ARGV);

$t->xprint('#/bin/sh
set -eu
if [ $# -ne '.$n.' ]; then
    echo "$0 ("'.possibly_singlequote_sh($origcode).'"): '.
	   'got $# arguments, expecting '.$n.'"
    exit 1
fi
');


# now with '_' replaced with positional argument references:
my $i=1;
for (@ARGV) {
    $t->xprint
      (
       do {
	   if ($_ eq "_") {
	       '"$'.($i++).'"'
	   } else {
	       possibly_singlequote_sh $_
	   }
       },
       " "
      );
}
$t->xprintln;
$t->xclose;
$t->autoclean(0);
my $path= $t->path;
xchmod 0700, $path;

print $path, "\n"
  or die $!;

#use Chj::ruse;
#use Chj::Backtrace; use Chj::repl; repl;
