#!/usr/bin/perl -w

# Sat Aug  2 00:32:52 CEST 2008
(my $email='XXX%YYY,ch')=~ tr/%,/@./;

use strict;

our $max_in_window=5; #max number of loopings allowed in time_window
our $time_window=5; #seconds
our $shell= $ENV{SHELL}||"/bin/bash";
our $shell_execute_flag= "-c";

$0=~ /(.*?)([^\/]+)\z/s or die "?";
my ($mydir, $myname)=($1,$2);
sub usage {
    print STDERR map{"$_\n"} @_ if @_;
    print "$myname [ options ] [--] command [arguments]

  Options:
  -c|-s|--shell  pass command to $shell (overrideable through \$SHELL)
              with an $shell_execute_flag flag, and with arguments as arguments
  -e   exit on errors (default: proceed even if command exits
       uncleanly / with non-zero status, although upon non-existing
       commands the program will stop anyway)
  --sleep n   instead of looping 'as fast as is good', sleep n seconds
              between each run. (n can be a floatingpoint number.)


  (PS: as every perl script (and also shell?) works, this will not
  stop when signals are coming in while running the given command but
  just let through the signal to the running command (by trapping
  signals, or is this realy handled by the kernel?), but will if hit
  during sleep (or running the loop code).)

  (Christian Jaeger <$email>)
";
exit (@_ ? 1 : 0);
}

# split @ARGV into command and options part:
my ($options,$command)= do {
    my (@pre,@post);
    # simplicistic: assumes that no options need option
    # arguments. sigh.. ever waiting to write my own Getopt?
    while (@ARGV) {
	local $_=shift @ARGV; #vergessen.
	if ($_ eq '--') {
	    @post=@ARGV;
	    last
	} elsif (/^-/) {
	    push @pre,$_;
	    if ($_ eq '--sleep') {
		push @pre, shift @ARGV;
	    }
	} else {
	    @post=($_,@ARGV);
	    last #fast vergessen..
	}
    }
    (\@pre,\@post)
};

@ARGV=@$options;

use Getopt::Long;
our $debug=0;
our $verbose;
our $opt_e;
our $opt_shell;
our $opt_sleep;
GetOptions("verbose"=>\$verbose,
	   "debug"=> \$debug,
	   "help"=> sub{usage},
	   "e"=> \$opt_e,
	   "c|s"=> \$opt_shell,
	   "shell"=> \$opt_shell,
	   #"sleep=n"=> \$opt_sleep,  would give 'Value "0.1" invalid for option sleep (number expected)'
	   "sleep=s"=> sub {
	       my ($_k,$n)=@_;
	       $n=~ /^\d*(\.\d*)?\z/
		 or usage "not a positive number of acceptable format: '$n'"; #sigh I mean, exponent notation etc ?..... 'perl so ....'
	       $opt_sleep=$n;
	   },
	  ) or exit 1;
usage if @ARGV;
usage unless @$command;

use Time::HiRes 'time','sleep';
use Chj::xperlfunc;
use Chj::Unix::Exitcode 'exitcode';

our $call= $opt_shell ? sub {
    xsystem_safe $shell, $shell_execute_flag, @_;
} : sub {
    xsystem_safe @_
};

my $times= [(0)x($max_in_window-1)];

while (1)
  {
      my $res= &$call(@$command);
      if (!($res==0) and $opt_e)
	{
	    die "$myname: @$command exited with ".exitcode($res)."\n";
	}
      if (defined $opt_sleep) {
	  sleep $opt_sleep
      } else {
	  my $t=time;
	  push @$times, $t;
	  my $first_t= shift @$times;

	  my $wait= $time_window - ($t - $first_t);
	  warn "wait=$wait" if $debug;
	  if ($wait>0)
	    {
		if ($verbose) {
		    warn "$myname: too frequent restarts, sleeping for $wait seconds..\n";
		}
		sleep $wait;
	    }
	  if ($debug) {require Data::Dumper; print Data::Dumper::Dumper( $times); }
      }
  }

