#!/usr/bin/perl -w

# Fri Mar 27 09:51:23 EDT 2009
(my $email='XXX%YYY,ch')=~ tr/%,/@./;

use strict;

$0=~ /(.*?)([^\/]+)\z/s or die "?";
my ($mydir, $myname)=($1,$2);

sub ignorepath {
    @_==2 or die;
    my ($gitbase,$branchname)=@_;
    "$gitbase/$myname.ignore/*all*"
};

sub usage {
    print STDERR map{"$_\n"} @_ if @_;
    my $where= ignorepath (".git",'$branchname');
    print "$myname branchname

  Cherry-pick all patches that branch has which the current branch
  doesn't have (hm also older ones? or just from the latest fork
  point??) and apply them unless their sha1 is listed in
  $where,
  or they are recognized as having been applied to the current branch
  already. The latter does *only* work if all manually executed
  cherry-pick's are applied with the -x flag. (Also, there will be
  problems if cherry-picks need manual conflict resolution, as then
  the -x flag does not take effect. D'oh.)

  Options:
  --dry-run

  (Christian Jaeger <$email>)
";
exit (@_ ? 1 : 0);
}

use Getopt::Long;
our $verbose=0;
our ($opt_dry);
GetOptions("verbose"=> \$verbose,
	   "help"=> sub{usage},
	   "dry-run"=> \$opt_dry,
	   ) or exit 1;
usage unless @ARGV==1;

our ($branch)=@ARGV;#NOT @_ WHEN WILL I REMEMBER THAT.

use Chj::callcc;

# hm habe git modul sachen 'hm'.

#use Chj::Git::Functions ':all';
#our $git_dir= xgit_dir;

# well. what does this help, vs. using Git.pm

#COPY from below: well actually now the only definition since 'below' is in scope.
my $sha1_re= qr{[0-9a-f]{40}};
#/COPY

# declare as our $var instead of sub so that it can be seen in other namespace, does this work? -- it does (fun)
our $assert_sha1= sub {
    my ($str)=@_;
    $str=~ m/^$sha1_re\z/
      or die "assertion failure: not a sha1: '$str'";
};

use Git;
{
    package CJ_GIT_PICK_PICKY::Git::Commit;
    sub is_merge {
	my $s=shift;
	@{$$s[1]}>1
    }
    sub sha1 {
	my $s=shift;
	$$s[0]
    }
    sub identity {
	# string to identify a commit (if it's not a cherry-picked one), like to suppress doubly found patches from merges.
	# --well, actually the cherry-picks are already a case where the commit msg is spoiling; but shouldn't matter [so much], right?
	my $s=shift;
	$$s[2] # author+message
    }
}
{
    package CJ_GIT_PICK_PICKY::Git;
    use base 'Git';
    # ^ we assume here that it's a fixed Git.pm
    use Chj::Random::Formatted ();# 'random_passwd_string';

    our $gitformat_author= '%aN -- %aE -- %at';
    our $gitformat_body= '%s\n\n%b'; # really ok with these \n ? (well either way acceptable for the purpose, right?+-)
    sub log_sha1_and_parents {
	my $s=shift;
	@_==1 or die "need revision (range) argument";
	my $marker= Chj::Random::Formatted::random_passwd_string (8);
	my $marker1= Chj::Random::Formatted::random_passwd_string (8);
	my ($fh,$ctx)=$s->command_output_pipe
	  ("log",
	   '--pretty=format:%H:%P'.$marker1.$gitformat_author.$marker1.$gitformat_body.$marker,
	   @_);
	local $/=$marker;
	my @log=
	  #fullyeager..
	  map {
	      chomp;
	      s/^\s+//s; # (again to remove newline that git inserts after $marker's)
	      my ($meta,$author,$msg)= split /\E$marker1/,$_,3
		or die "?? '$_'";
	      my ($commit,$parents)= split /:/,$meta,2
		or die "invalid line '$_'";
	      my @parents= split / /,$parents;
	      bless [$commit, \@parents, "$author -- $msg"],"CJ_GIT_PICK_PICKY::Git::Commit"
	  } <$fh>;
	$s->command_close_pipe ($fh,$ctx);
	\@log
    }
    my $pre='(cherry picked from commit ';
    my $post= ')';
    my $re= qr/\Q$pre\E($sha1_re)\Q$post\E/;
    sub check_and_maybe_record_cherrypickchain {
	my $s=shift;
	my ($commit,$msg
	    ,$orig_to_new, $new_to_orig)=@_;
	&$assert_sha1($commit);
	for my $origcommit ($msg=~ m/$re/sg) {
	    push @{$$orig_to_new{$origcommit}},$commit;
	    push @{$$new_to_orig{$commit}},$origcommit;
	    # no need to check for endless loops, as git is (well, it's id's are) don't allow mutation
	    $s->check_and_maybe_record_cherrypickchain
	      ($origcommit,
	       $s->message_of_commit ($origcommit)
	       ,$orig_to_new, $new_to_orig);
	}
    }
    sub message_of_commit {
	my $s=shift;
	my ($commit)=@_;
	&$assert_sha1($commit); #well not necessarily. but for now check anyway.
	#ps $/ is still set to  whatever  be eh dangerous eh i mean.
	# inefficient.  but so.be it.f now
	#don't have my own git classes here so need to go lowlevel:
	my ($fh,$ctx)=$s->command_output_pipe ("cat-file","commit", $commit);
	local $/="\n"; #HAH 'forgotten'(well heh yep, always!wow), and  4 lines after the self warning I trapped into it.
	while (<$fh>) {
	    if (/^$/) {
		my @out;
		while (<$fh>) {
		    push @out,$_;
		}
		return join ("",@out)
	    }
	}
    }
    sub designated_cherry_picks {
	my $s=shift;
	@_<=1 or die "expecting 0 or 1 arguments";
	my $marker= Chj::Random::Formatted::random_passwd_string (8);
	my $marker1= Chj::Random::Formatted::random_passwd_string (8);
	my ($fh,$ctx)=$s->command_output_pipe
	  ("log",
	   '--pretty=format:%H'.$marker1.$gitformat_author.$marker1.$gitformat_body.$marker,
	   @_);
	local $/=$marker;
	my $orig_to_new={}; # origcommit=> [newcommits]
	my $new_to_orig={}; # newcommit => origcommit
	my $known_by_identity={}; # identity => true
	while (<$fh>) {
	    chomp;
	    # somehow we get whitespace (a newline actually) before the commit id starting from the 2nd record. (why? so does git imply a newline after all ?  maybe I forgot to give some  whatever -z or so option. or so.toolazytolooknow.havemyoldscmcode.). strip it.
	    s/^\s+//s;
	    my ($commit,$author,$msg)= split /\E$marker1/,$_,3
	      or die "invalid input record '$_'";
	    ##$$known_by_identity{"$author -- $msg"}++;
	    $s->check_and_maybe_record_cherrypickchain ($commit,$msg
							,$orig_to_new, $new_to_orig);
	    # ^no need to also pass known_by_identity, as we assume
	    # that 'identity' is the same over the cherrypickchain
	    # (well, if it would be 100% safe, we could even just rely
	    # on that instead. right. but it isn't).
	}
	$s->command_close_pipe ($fh,$ctx);
	($new_to_orig, $orig_to_new, $known_by_identity)
    }
    sub maybe_current_branch {
	my $s=shift;
	#hm I did this already somewhere. branches method. wherever.
	my ($fh,$ctx)=$s->command_output_pipe ("branch");
	my $current_branch;
	while (<$fh>) {
	    if (s/^\*\s+//s) {
		chomp;
		## some further checks needed?
		$current_branch= $_;
		# stop? well. avoid sigpipe?  btw yeh i also did solve *that* already.
		#hey, \MYLANG{expect and check for void in non-terminal begin form positions.
	    }
	}
	$s->command_close_pipe ($fh,$ctx);#(hope this dies upon errors,right?. ...)
	$current_branch
    }
}

sub Mk_hash_contains_commitsha1_possibly_indirectly { #looks commitsha1 up in cherry pick chaings
    my ($cherrycommit_to_orig)=@_;
    sub {
	my ($hash,$commitsha1)=@_;
	my $rec;
	callcc
	  (sub {
	       my ($exit)=@_;
	       $rec= sub {
		   my ($commitsha1)=@_;
		   &$exit($$hash{$commitsha1})
		     if (exists $$hash{$commitsha1});
		   #picked-from:
		   if (my $originals= $$cherrycommit_to_orig{$commitsha1}) {
		       # a short-cutting for.
		       for my $commitsha1 (@$originals) {
			   &$exit($$hash{$commitsha1})
			     if (exists $$hash{$commitsha1});
			   &$rec ($commitsha1)
		       }
		   }
		   return ()
	       };
	       &$rec ($commitsha1)
	   },
	   sub {
	       undef $rec;#don't forget.
	   })
    }
}

# / ~library parts

our $git= CJ_GIT_PICK_PICKY::Git->repository(Directory=> ".");#k? yep works even from subdirs.


our (undef,$done_cherry_picks,undef)= $git->designated_cherry_picks("HEAD");

# to look up whether a commit has been cherry-picked (and if so, whether from us):
our ($cherrycommit_to_orig,undef,$known_by_identity)= $git->designated_cherry_picks($branch);

*hash_contains_commitsha1_possibly_indirectly=
  Mk_hash_contains_commitsha1_possibly_indirectly ($cherrycommit_to_orig);

use Chj::xopen 'xopen_read';

our $ignore= do {
    my $current_branch= $git->maybe_current_branch
      or die "not on a branch?";
    our $ignorepath= ignorepath ($git->repo_path, $current_branch); # *not* $branch!
    my $f= xopen_read $ignorepath;
    my $ignore={};
    my $z=0;
    while (<$f>) {
	$z++;
	s/#.*//;
	s/^\s*//s;
	s/\s*\z//s;
	next unless length;
	#m/^$sha1_re\z/
	#  or die "file '$ignorepath' line $z does not match sha1 sum pattern: '$_'";
	m/^($sha1_re)\b/
	  or die "file '$ignorepath' line $z does not start with a sha1: '$_'";
	$$ignore{$1}++
    }
    $f->xclose;
    $ignore
};


# NOTE: git cherry-pick has a --mainline option, so I could maybe even
# pick merges. But maybe I *still* don't want to? (dunnoreally.)

# build index for quick lookup:
our $commit_is_ours= do {
    my $commits= $git-> log_sha1_and_parents ("HEAD");## well, until 'branch point' (?, 'oldest' common ancestor of all branch points, ~) would be enough. (todo)
    my $h={};
    for my $commit (@$commits) {
	$$h{$commit->sha1}++
    }
    $h
};

our $otherbranch_commits= $git-> log_sha1_and_parents ("HEAD..$branch");

#use Chj::Backtrace; use Chj::repl; repl;

for my $commit (reverse grep { not $_->is_merge } @$otherbranch_commits) {
    #( grep reverse   warum macht cperl mode verschiedene farben (f diese 2 kommandos) h.?.) (hautpsachefrbg)
    #warn "looking at commit '$commit'..\n";#
    my $commitsha1= $commit->sha1; #grrrr.
    if (hash_contains_commitsha1_possibly_indirectly
	($ignore,$commitsha1)) {
	print "ignore: $commitsha1\n"
	  if $verbose;
    } else {
	my $needit= sub {
	    my $identity= $commit->identity;
	    if (my $known=
		hash_contains_commitsha1_possibly_indirectly
		($done_cherry_picks,$commitsha1)) {
		print "already picked: ".$commitsha1."\n" #" (at @$known)\n"; is too long.
		  if $verbose;
		# to make sure that doubles in parallel branches will be suppressed subsequently:
		$$known_by_identity{$identity}++;
	    } else {
		if ($$known_by_identity{$identity}) {
		    print "patch (recognized by author/message) already applied: ".$commitsha1."\n" # from a different branch (part,  merging!), or from a previous run  - ehr no not previous run (would have the picked header), but from old history,k?
		      if $verbose;
		    # could also print $identity. but that contains the full message or so and probably more.
		} else {
		    if ($opt_dry) {
			print "would cherry-pick ".$commitsha1."\n";
		    } else {
			print "cherry-picking $commitsha1..\n";
			$git->command ("cherry-pick", "-x", $commitsha1);
		    }
		    $$known_by_identity{$identity}++;
		}
	    }
	};
	if (my $originalcommits=
	    hash_contains_commitsha1_possibly_indirectly
	    ($cherrycommit_to_orig,$commitsha1)) {
	    # side-effecting part only. well as everywhere in the loop.
	    for my $orig (@$originalcommits) {
		&$assert_sha1($orig);
		if (hash_contains_commitsha1_possibly_indirectly
		    ($commit_is_ours,$orig)) {
		    print "commit is ours: $commitsha1\n"
		      if $verbose;
		} else {
		    if (hash_contains_commitsha1_possibly_indirectly
			($done_cherry_picks,$orig)) {
			print "have picked it, too: $commitsha1\n"
			  if $verbose;
		    } else {
			&$needit
		    }
		}
	    }
	} else {
	    &$needit
	}
    }
}

#use Chj::ruse;
