#!/usr/bin/perl -w

# Sat Dec 13 22:19:53 CET 2008
(my $email='XXX%YYY,ch')=~ tr/%,/@./;

use strict;

use Chj::which "maybe_which";

# ============== local variant ===============================

our $maybe_wotsap=
  maybe_which ("wotsap");

our $maybe_displaytool=
  (
   maybe_which ("eog")
   or
   maybe_which ("display")
  );


use Chj::xperlfunc;

sub open_key_locally {
    @_==2 or die;
    my ($sourceid, $targetid)=@_;
    xxsystem "wotsap", $sourceid, $targetid, "-O","eog";
}

# ============= website variant ==============================

sub maybe_which_cmd {
    my $name= shift;
    if (defined (my $prog= maybe_which $name)) {
        [$prog]
    } else {
        undef
    }
}

our $maybe_browser_cmd=
  (
   do {
       if (my $b= $ENV{BROWSER}) {
           [split /\s+/, $b]
       } else {
           undef
       }
   }
   or
   maybe_which_cmd("sensible-browser")
   or
   maybe_which_cmd("firefox-esr")
   or
   maybe_which_cmd("firefox")
   or
   maybe_which_cmd("chromium-browser")
   or
   maybe_which_cmd("chromium")
   or
   maybe_which_cmd("mozilla")
  );

sub browser_cmd {
    defined $maybe_browser_cmd or die "can't find a web browser";
    @$maybe_browser_cmd
}

sub Keyid32bithex ( $ ) {
    my ($str)= @_;
    #if (s/^0x//) {
    ## just fine
    #}
    my $re= qr|[A-F0-9]{8}|;
    if ($str=~ m{^(?:0x|)($re)\z}s) {
	$1
    } else {
	die "key does not match 32bit hex format: '$str'";
    }
}

our $makeurl=sub ( $ $ ) {
    my ($from, $to)=@_;
    'http://webware.lysator.liu.se/jc/wotsap/wots/latest/paths/0x'.Keyid32bithex($from).'-0x'.Keyid32bithex($to).'.png?size=2000x700'
};

sub open_key_website {
    @_==2 or die;
    my ($sourceid, $targetid)=@_;
    xxsystem browser_cmd, &$makeurl ($sourceid, $targetid);
}

# ============ common code ===================================

# fetch the key from config:
use Chj::xopen 'xopen_read';
our $gpg_config_path= $ENV{HOME}."/.gnupg/gpg.conf";
sub maybe_gpg_config_parse ( $ ) {
    my ($path)=@_;
    return unless -f $path;
    my $in= xopen_read $path;
    my $h={};
    while (<$in>) {
	chomp;
	s/^\s*//;
	next if /^#/;
	if (/^(\S+)\s+(\S+)/) {
	    push @{$$h{lc $1}}, $2;
	}
    }
    $in->xclose;
    $h
}
our $maybe_gpg_config= maybe_gpg_config_parse ($gpg_config_path);
sub maybe_gpg_config_get_single ( $ ) {
    my ($key)=@_;
    $maybe_gpg_config and do {
	if (my $v=$$maybe_gpg_config{lc $key}) {
	    if (@$v==1) {
		$$v[0]
	    } elsif (@$v==0) {
		undef
	    } else {
		die "multiple definitions for key '$key' in gpg config '$gpg_config_path'";
	    }
	} else {
	    undef
	}
    }
}
our $maybe_default_key= maybe_gpg_config_get_single ("default-key");
our $maybe_default_key_short= ($maybe_default_key and do {
    my $str= $maybe_default_key;
    $str=~ m/^(?:|[A-F0-9]{8}|[A-F0-9]{32})([A-F0-9]{8})\z/
      or die "seems like invalid default-key setting, does not match our regex: '$str'";
    $1
});#parens needed!..


# which way should it be run, local or website?
our ($whichway_txt, $open_key) = do {
    if ($maybe_wotsap and $maybe_displaytool) {
	("local wotsap ($maybe_wotsap), with display tool $maybe_displaytool",
	 \&open_key_locally)
    } elsif ($maybe_browser_cmd) {
	("browser $maybe_browser_cmd->[0] on website",
	 \&open_key_website)
    } else {
	# 'eleganter' Weg um doch lazy zu sein. trotz 2er tuple.?.
	my $txt=
	  "neither wotsap and a png display tool nor a web browser could be found";
	($txt,
	 sub {
	     die $txt
	 })
    }
};
	


$0=~ /(.*?)([^\/]+)\z/s or die "?";
my ($mydir, $myname)=($1,$2);
sub usage {
    print STDERR map{"$_\n"} @_ if @_;
    my $ownkeyid_str=
      $maybe_default_key_short ? '0x'.$maybe_default_key_short : 'undefined';
    print "$myname openpgp-key-id

  Show 'wotsap' graph for the trust chain from your key
  ($ownkeyid_str, taken from the default-key directive in
  '$gpg_config_path') to the given keys.

  The program can either show it by opening the website in a web
  browser (well, the website is currently BROKEN!), or by running
  'wotsap' locally and opening the graph in some display tool. It
  gives preference to the latter if installed. From what it could
  find, it will choose the following:

  $whichway_txt

  Options:
    -s|--source-key id   use this key instead of $ownkeyid_str as
           source key for the graph.

  (Christian Jaeger <$email>)
";
exit (@_ ? 1 : 0);
}

use Getopt::Long;
our $verbose=0;
our $opt_source_key;
GetOptions("verbose"=> \$verbose,
	   "help"=> sub{usage},
	   "source-key=s"=> \$opt_source_key,
	   ) or exit 1;
usage unless @ARGV;

our $source_key =
  (
   $opt_source_key ##todo: check to be short right?.
   or $maybe_default_key_short
   or usage "need definition of default-key in '$gpg_config_path', or -s option"
  );#the parens are ESSENTIAL.

&$open_key($source_key, $_) for @ARGV;

#use Chj::ruse;
#use Chj::Backtrace; use Chj::repl; repl;
