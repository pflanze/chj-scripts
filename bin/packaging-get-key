#!/usr/bin/perl -w

my $copyright= <<'COPYRIGHT';
# Copyright 2021 by Christian Jaeger <ch@christianjaeger.ch>
# Published under the same terms as perl itself
COPYRIGHT

use strict; 
use warnings FATAL => 'uninitialized';
use experimental 'signatures';

my ($email_full)= $copyright=~ / by ([^\n]*)/s;

my ($mydir, $myname);
BEGIN {
    $0=~ /(.*?)([^\/]+)\z/s or die "?";
    ($mydir, $myname)=($1,$2);
}

sub usage {
    print STDERR map{"$_\n"} @_ if @_;
    print "$myname file key

  Retrieve the value (which must be an S-expression) for key from
  file, e.g.

    $myname foo Tags

  where foo contains this line near the top:

   # Tags: (git-shortcut debian)

  will print

   (git-shortcut debian)

  and then, importantly, whatever follows in the same comment block!
  It is the duty of the receiver of the output to only parse the first
  S-expression.

  Note that key names are case sensitive.

  ($email_full)
";
exit (@_ ? 1 : 0);
}


use Getopt::Long;
our $verbose=0;
#our $opt_dry;
GetOptions("verbose"=> \$verbose,
	   "help"=> sub{usage},
	   #"dry-run"=> \$opt_dry,
	   ) or exit 1;
usage unless @ARGV==2;

my ($file, $key)= @ARGV;

use Chj::xperlfunc qw(xslurp xprintln);

my $commentlinestart = qr/\n *#/s;

my $str= xslurp $file;
if (my ($valplus) = $str=~ m/
       .* $commentlinestart \ * \Q$key\E: \ * ([^\n]* # the first line
          (?: $commentlinestart [^\n]*)* # subsequent lines 
       )
    /sx) {
    $valplus =~ s/\n# ?/\n/sg;
    # This captured more than just the value! Rely on the user using
    # an S-expression parser that just reads the first expression.
    xprintln $valplus;
} else {
    die "$myname: key '$key' not found in '$file'\n";
}

