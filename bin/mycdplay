#!/usr/bin/perl -w
use strict;

use constant PRIO_PROCESS=> 0; #ç wo könnt ich das holen?
use Time::HiRes qw(time sleep);
my $MINTIMEDIFF=0.3;

# increase priority
setpriority PRIO_PROCESS,$$,-20 or die $!;

# drop priviledges?
# nee gar nicht nötig, fork (resp. exec?) übernimmts nicht wenn ich nicht realuserid ändere.


# OH doch nötig. in der neuen version. da sonst das *child* root bleibt! lustig komisch. war doch vorher schon so ?!!
$>=$<;

# Fri, 26 Dec 2003 00:22:54 +0100: (vorher war: 1. Jun 2001  mycdplay)
# umstellung auf cdparanoia. hm, sollt ich symlink implementationswahl eben zulassen.
# (wie bei firewalling oder debian alternatives.)

# grr, das is echt ärgerlich. relative pfade gehen nicht wegen setuid. dabei wird eh gedroppt bei exec. oder eben nur bei fork ? ?

#my $cdparanoia= `/usr/bin/which cdparanoia`; chomp $cdparanoia;
#my $swapendianness= `/usr/bin/which swapendianness`; chomp $swapendianness;
# ACH. nich mal backticks gehen ???
{
    my $path= $ENV{PATH}; $path=~/(.*)/s; $ENV{PATH}=$1;
}

# FUNNY: nice useful bug: when giving multiple ranges:
# ..could not open /dev/dsp: Das Gerät oder die Ressource ist belegt at /root/bin/mycdplay line 58.
# and:
# chris     2946  0.0  0.3  3904 1880 pts/13   S<   00:58   0:00 /usr/bin/perl -w /dev/fd/3//root/bin/mycdplay 2 3 4
# chris     2948  0.7  0.2  3448 1216 pts/13   S<   00:58   0:03 swapendianness
# chris     3021  1.2  0.2  3872 1116 pts/13   S<   01:03   0:02 cdparanoia --output-raw --disable-paranoia 3 -
# chris     3022  0.0  0.0     0    0 pts/13   Z<   01:03   0:00 [perl5.6.1 <defunct>]
# which means, if the child runs long enough, it'll be reused :)


pipe READ,WRITE;
sub xfork { my $pid=fork;defined $pid or die "fork: $!"; $pid }
sub usage {
    print "mycdplay range(s)
  range is given to cdparanoia, thus something like 1-3 or similar.
  or multiple range arguments - for each one, a new child set is run.
  (option -q hardcoded only, currently)
";
    exit;
}
usage unless @ARGV;
usage if $ARGV[0]=~ /^--?h/;
my @opt_q=("-q");
my @args=map {split /,/ } @ARGV;
for my $span (@args) {
    if (xfork) {
	wait;
	if ($? != 0) {
	    exit $?>>8;
	}
    } else {
	if (xfork) {
	    # parent
	    #close READ;
	    #open STDOUT,">&WRITE" or die "dupping error: $!";
	    #exec qw(cdparanoia --output-raw --disable-paranoia),@ARGV,"-";
	    #exec qw(cdparanoia --force-read-speed 4 --output-raw --disable-paranoia),$span,"-";# sigh: speed 1 reicht quasiauch aber bei 2 gibts still manchmal skips. och.
	    # decrease priority:
	    setpriority PRIO_PROCESS,$$,-16 or die $!;
	    pipe READ2,WRITE2;
	    $SIG{CHLD}=sub{print "\n";exit 0};#
	    if (xfork) {
		close READ;
		close WRITE;
		close WRITE2;
		$|++;
# 		my $start;
# 		my $lastprinttime=0;
# 		my $starttime=time;
# 		#while(<READ2>){
# 		#my $buf;
# 		#while(read READ2,$buf,1) {###erstmals dass ich merk dass ich in perl wenn ich grossen buffer angeb den gar nicht zurückkrieg unless er voll wurde????
# 		#print$buf;next;
# 		    #next unless /read/;
# 		    /^##.*\[wrote\] \@ (\d+)$/ or next;
# 		    if (defined $start) {
# 			my $t=time;
# 			if (($t-$lastprinttime)> $MINTIMEDIFF) {
# 			    my $pos=$1-$start;
# 			    my $diffsec=$pos/44100;
# 			    printf  "%.1f %.1f\n", $diffsec,time-$starttime;
# 			    $lastprinttime=$t;
# 			}
# 		    } else {
# 			$start=$1;
# 		    }
# 		}
		#$SIG{CHLD}=sub{print "\n";exit 0};# ##sollte vor dem fork sein man?
		my ($from_sect,$from_seconds);
		my ($to_sect,$to_seconds);
		while(<READ2>){
		    # from sector  149720 (track  9 [0:00.00])
		    #print "Gelesen: '$_'\n";
		    if (/from sector +(\d+).*\[(\d+):(\d+\.\d+)/) {#  fock da muss ich noch time parsen.
			my ($sect,$min,$sec)=($1,$2,$3);
			$from_sect=$sect;
			$from_seconds= $min*60+$sec;
		    }elsif(/to sector +(\d+).*\[(\d+):(\d+\.\d+)/) {#  fock da muss ich noch time parsen.
			my ($sect,$min,$sec)=($1,$2,$3);
			$to_sect=$sect;
			$to_seconds= $min*60+$sec;

			# now go into senselessloop throw away stderr?
			# oder eben einfach so bababa
			my $duration=$to_seconds-$from_seconds;
			#print "Es geht von $from_seconds bis $to_seconds, Dauer $duration\n";
			#print "the great fake display:\n";
			# na ich tubel müsste halt in den datastrom einfädeln der zum bfr fliesst , wär schon besser   also scheiss isch jetzt dass next stuck : mein counter lauf weiter obwohl noch nich mal letztes stuck vertig isch und bfp eh wartet mit spielen. sollte bfp modifizieren dass es angibt wo es mit schreiben isch.    NA isches derzeit nich so schlimm fangt mein counter doch ersch an wenn ripper begonnen hat. immerhin. aber das warten des rippers nach füllen des buffers, das reflektoeere ich doch nicht. komisch dass es dann doch bei 1.2 restsekunden exit gemacht hat?
			# ach  zwischenstuck bruche stimmts nicht
			# ach und too long stimmts auch nimme => wohl anderes outputformat manf*
			if (@opt_q) {
			    $SIG{CHLD}=sub{exit 0};#ohne \n
			    while(1){sleep 100}
			} else {
			    my $starttime=time;
			    while(1){
				sleep 0.0613;
				my $t=time;
				my $gone= $t-$starttime;
				my $togo=$duration-$gone;
				my $percent= ($gone/$duration)*100;
				printf chr(27)."M\n". "%.1f%% %.1f %.1f  " .chr(27)."[K",
				  $percent,$gone,$togo;
			    }
			}
		    }
		}
		wait;
		if ($? != 0) {
		    exit $?>>8;
		}
	    } else {
		close READ;
		close READ2;
		open STDOUT,">&WRITE" or die "dupping error: $!";
		open STDERR,">&WRITE2" or die "dupping error 2: $!";
		#exec qw(cdparanoia),@opt_q,qw(-e --force-read-speed 8 --output-raw --),$span,"-";# scheint wieder zu gehen. nötig? sigh. ps. 8 auf 10 ist mega unterschied glaub? ah ne nur 7 auf 8
		exec qw(cdparanoia),qw(--force-read-speed 8 --output-raw --),$span,"-";
		# MANN wenn stderr ne pipe isch scheint dass kein > anzeiger mehr kommt mann.
		exit 127;
	    }
	}
	else {
	    # child
	    close WRITE;
	    open STDIN,"<&READ" or die "dupping error: $!";
#	    open STDOUT,">/dev/dsp" or die "could not open /dev/dsp: $!"; # ps. ohne > öffnen gibt bad file descriptor, d.h. wird von perl *doch nicht* gleich gemacht!! 
	    #exec qw(swapendianness);
	    #system "nice -n 2 bfr | swapendianness";##todo  fehlerreporting.. (und nicelevel könnt ich beim einen auch noch runter. well das geht auch per shell)
	    #system "nice -n 2 bfr";#cj 26.7.04 für Cohen CD. na für alle. na shit. scheint kernel 2.6 hab ich noch nie benutzt?
	    #system "nice -n 2 bfr | play -r 41200 -f s -";
	    system "nice -n 5 swapendianness|nice -n 2 bfp";
	    exit;
	}
	#die "could not exec...
	exit(127);
    }
}

__END__
  todo:
exit 0 isch natürli scheisse.   wenn fehler sollte aufgefangene error message gegeben werden.
