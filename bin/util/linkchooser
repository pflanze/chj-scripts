#!/usr/bin/perl -w

# Mon Dez 30 01:06:18 MET 2002

use strict;

$0=~ /([^\/]+)$/s or die "?";
my $myname=$1;
sub usage {
    if (@_) {
	print STDERR @_,"\n";
    }
    print "$myname filenamewithoutsuffix suffix [ suffix2 ]
   -or-
$myname filenamewithoutsuffix_suffix
  Makes/replaces a symlink pointing from \$filenamewithoutsuffix
  to \"\$filenamewithoutsuffix\$suffix\".
  If the 3rd argument is given, the symlink is switched to the
  other target than the current.
  If only 1 argument is given, it is checked for the last underscore
  or minus or possibly dot, and then split at that position.

  Options
   -f|--force  unlink target even if it's not a symlink
   --test      run test suite then terminate

";
exit (@_ ? 1 : 0);
}

my @files;
my $DEBUG=0;
my $opt_force;
my $opt_test;
for (my $i=0; $i<=$#ARGV; $i++) {
    local $_=$ARGV[$i];
    if (/^--?h(elp)?$/) {
	usage
    } elsif ($_ eq '--') {
	push @files, @ARGV[$i+1..$#ARGV];
	last;
    } elsif (/^--?d(ebug)?$/) {
	$DEBUG=1;
    } elsif (/^--?f(orce)?$/) {
	$opt_force=1;
    } elsif (/^--test?$/) {
	$opt_test=1;
    } elsif (/^-/) {
	warn "Unknown option '$_'\n";
	usage(1)
    } else {
	push @files, $_
    }
}

use Chj::defined_and_length;

sub absolutize($$) {  ## could be much better: check for symlinks in paths in filesystem.
    my ($base,$path)=@_;
    $path=~ m|^/| ? $path : AddURL($base,$path)
}

sub split__without_suffix {
    my ($path)=@_;
    my ($tmp,$suffix);
    # (0
    #  or ($tmp,$suffix)= $path=~ /^(.*\.[^_-]+)([_-].+)$/s
    #  or ($tmp,$suffix)= $path=~ /^([^_]+)(_[^_]+)$/s
    #  or ($tmp,$suffix)= $path=~ /^([^-]+)(-[^-]+)$/s
    #  or return () );
    ($tmp,$suffix)= $path=~ /^(.*)([._-].+)$/s
    or return;
    ($tmp,$suffix)
}

use Chj::TEST;

TEST {[split__without_suffix ""]} []; # whatever
TEST {[split__without_suffix "-"]} []; # ["","-"]; # whatever
TEST {[split__without_suffix "_"]} []; # whatever
TEST {[split__without_suffix "foo"]} [];
TEST {[split__without_suffix "foo.bar"]} ["foo", ".bar"];
TEST {[split__without_suffix "foo-bar"]} ["foo","-bar"];
TEST {[split__without_suffix "foo_bar"]} ["foo","_bar"];
TEST {[split__without_suffix "foo-bar_baz"]} ["foo-bar","_baz"];
TEST {[split__without_suffix "foo_bar-baz"]} ["foo_bar","-baz"];

TEST {[split__without_suffix "foo.conf-bar_baz"]} ["foo.conf-bar","_baz"];
TEST {[split__without_suffix "foo-bar.conf_baz"]} ["foo-bar.conf","_baz"];

TEST {[split__without_suffix "foo.conf_bar-baz"]} ["foo.conf_bar","-baz"];
TEST {[split__without_suffix "foo_bar.conf-baz"]} ["foo_bar.conf","-baz"];

TEST {[split__without_suffix "foo_bar-conf.1"]} ["foo_bar-conf",".1"];

#use lib "/opt/functional-perl/lib"; use FP::Repl;repl; exit;


if ($opt_test) {
    my $rv= Chj::TEST::run_tests;
    #exit ($rv == 0 ? 0 : 1);
    exit 0; # XX: only newer Chj::TEST returns stats!
}

if (@files==1 or @files==2) {
  WITHOUT:
    my ($without,$suffix)=@files;
    if (!defined_and_length $suffix) {
	($without,$suffix)= split__without_suffix $without
	  or usage ("exactly one underscore or minus expected, "
		    ."which is not the case in '$without'");
    }
    my $with= "$without$suffix";
    if (-l $without) {
	unlink $without or die "could not unlink old link '$without': $!";
    } elsif (-e $without) {
	if ($opt_force) {
	    #unlink $without or die "could not unlink file at '$without': $!";
	    #well, or keep a backup? maybe a good idea.
	    rename $without, $without."~"
	      or die "could not rename '$without' to '$without~': $!";
	    warn "renamed '$without' to '$without~'";#
	} else {
	    die "target '$without' exists and is not a symlink"
	}
    }
    if (! -e $with) {
	warn "warning: symlink target '$with' does not exist.\n";
    }
    $with=~ s|.*/||;
    symlink $with,$without or die "could not create symlink '$without': $!";
} elsif (@files==3) {
    my ($without,$suffix1,$suffix2)=@files;
    if (defined (my $curlinkvalue= readlink $without)) {
	# calculate current target.
	require Filepaths;
	import Filepaths;
	my $withoutabs=  absolutize($ENV{PWD}, $without);
	my $withoutbaseabs= FolderOfThisFile($withoutabs);
	my $curtargetabs=  absolutize($withoutbaseabs, $curlinkvalue);
	# check target 1:
	my $target1abs= "$withoutabs$suffix1";
	my $target2abs= "$withoutabs$suffix2";
	if ($curtargetabs eq $target1abs) {
	    # link to target2
	    @files= (@files[0,2]);
	    goto WITHOUT;
	} else {
	    if ($curtargetabs ne $target2abs) {
		warn "warning: current target '$curtargetabs' "
		  ."does not match with either given suffix; "
		    ."choosing first version.\n";
	    }
	    # link to target1
	    @files= (@files[0,1]);
	    goto WITHOUT;
	}
    } else {
	# make link to first
	goto WITHOUT; # I like spaghetti
    }
}
else {
    usage;
}
