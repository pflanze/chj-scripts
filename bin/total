#!/usr/bin/perl -w

use strict;

$0=~ /([^\/]+)$/s or die "?";
my $myname=$1;
sub usage {
    print STDERR map{"$_\n"} @_ if @_;
    print "$myname
  Sum all numbers given on stdin.

  Options:
  -s|--statistics  print sum, n, mean, stdev
  -e|--eval        accept *perl* expressions and evaluate them; WARNING: insecure!
";
exit @_ ? 1 : 0;
}

my @files;
my $DEBUG=0;
our $opt_s;
our $opt_eval;
for (my $i=0; $i<=$#ARGV; $i++) {
    local $_=$ARGV[$i];
    if (/^--?h(elp)?$/) {
    	usage
    } elsif ($_ eq '--') {
    	push @files, @ARGV[$i+1..$#ARGV];
    	last;
    } elsif (/^--?d(ebug)?$/) {
	$DEBUG=1;
    } elsif (/^--?s(tatistics?)?$/) {
	$opt_s=1;
    } elsif (/^--?e(val?)?$/) {
	$opt_eval=1;
    } elsif (/^-/) {
    	warn "Unknown option '$_'\n";
    	usage(1)
    } else {
    	push @files, $_
    }
}
usage if @files;

my $tot=0;
my $n=0;
my $totsquares=0;
while (defined(local $_=<STDIN>)){
    chomp;
    my $n;
    if ($opt_eval) {
	$n= eval $_;
	if ($@) {
	    print STDERR "$myname: eval of input line '$_': $@";
	    $n=0;
	}
    } else {
	/^\s*([+-]?\s*(\d*)(?:\.(\d*))?)\s*$/
	  and (length($2) or length($3))
	  # could also accept:
	  # 1_324   1_134.245_123
	  # 1,324 -> europ. oder amerik.?
	  or do{
	      print STDERR "$myname: ignoring invalid input line '$_'\n";
	      next;
	  };
	$n=$1;
    }
    $tot+=$n;
    if ($opt_s) {
	$totsquares+= $n * $n;
	$n++;
    }
}
if ($opt_s) {
    # n, sum,  mean and stdev
    my $mean= $tot/$n;
    my $stdev= sqrt($totsquares/$n - $mean ** 2);
    print "$tot\t$n\t$mean\t$stdev\n";
} else {
    print "$tot\n";
}

