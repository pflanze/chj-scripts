#!/usr/bin/perl -w

# Sam Mär 15 23:21:53 MET 2003
# pflanze@gmx.ch

use strict;

$0=~ /([^\/]+)$/s or die "?";
my $myname=$1;
sub usage {
    print STDERR map{"$_\n"} @_ if @_;
    print "$myname
  Takes stream from input which could be part of a *long* ls listing
  (ls -l), and emits the item names cleaned from rest of stuff.

  Vorerst wirklich bloss mal abschneiden vorne.
  Könnte:  checken obs die files wirklich gibt, und ob datum und so stimmt.
  heuristik um kaputte pastings trotzdem zu matchen.

  Options:
   -f|--flush   flush output for every item (aka line), now default
   -F|--no-flush   do not flush output for every item (aka line)
   -s|--star|--starred  remove * characters at the end of the line
                        (as present in some ls output formats)
";
exit @_ ? 1 : 0;
}

my @files;
my $DEBUG=0;
our $opt_flush=1;
our $opt_starred;
for (my $i=0; $i<=$#ARGV; $i++) {
    local $_=$ARGV[$i];
    if (/^--?h(elp)?$/) {
	usage
    } elsif ($_ eq '--') {
	push @files, @ARGV[$i+1..$#ARGV];
	last;
    } elsif (/^--?d(ebug)?$/) {
	$DEBUG=1;
    } elsif (/^--?f(lush)?$/) {
	$opt_flush=1;
    } elsif ($_ eq "-F" or /^--?no-f(lush)?$/) {
	$opt_flush=0;
    } elsif (/^--?s(tar(red)?)?$/) {
	$opt_starred=1;
    } elsif (/^-./) {
	usage("Unknown option '$_'\n");
    } else {
	push @files, $_
    }
}
usage if @files;

$|++ if $opt_flush;

while (<STDIN>){
    if (m/^([-dlps])[-rwsxtSTcb]{9}\s+\d+\s+[\w-]+\s+\w+\s+\d+
	#17. Feb 02:05
	# 1. Jan 1970
	.{15}\d*\ 
	(.+)
	/sx) {
	my ($type,$fn)=($1,$2);
	chomp $fn;
	if ($type eq 'l') {
	    my @parts= split / -> /, $fn;
	    if (@parts==2) {
		$fn= $parts[0];
	    } elsif (@parts==1) {
		# leave it as is. maybe ls is set not to show the targets
	    } else {
		warn "$myname: symlink item has more than one ' -> ' part in it, ignoring: '$fn'\n";
		next; #ok this works right?. am i good in Perl?
	    }
	} else {
	    # is it correct that all these only ever apply to non-symlinks?
	    $fn=~ s|/$||s;
	    if ($opt_starred) {
		$fn=~ s|\*$||s
	    }
	}
	if (length($fn)>0){
	    if ($fn eq '.' or $fn eq '..') {
		warn "$myname: ignoring '$fn' item.\n";
		# well, manchmal will man diese ja, z.b. für chown oder so?
	    } else {
		print "$fn\n"
	    }
	} else {
	    warn "$myname: line gives empty filename: $_";
	}
    } else {
	warn "$myname: line does not match: $_";
    }
}
