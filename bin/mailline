#!/usr/bin/perl -w

# Fri Mar 22 20:21:52 GMT 2019
(my $email='ch%christianjaeger,ch')=~ tr/%,/@./;

use strict; use warnings FATAL => 'uninitialized';
use feature 'unicode_strings';

$0=~ /(.*?)([^\/]+)\z/s or die "?";
my ($mydir, $myname)=($1,$2);
sub usage {
    print STDERR map{"$_\n"} @_ if @_;
    print "$myname file(s)

  Show one line summary about the given mail files. I.e. for now from
  and subject.

  Run e.g. as:

   ls -rt | tail -30 |» mailline | less -RS; touch looking
   mv -f looking seen

  (Christian Jaeger <$email>)
";
exit (@_ ? 1 : 0);
}

use Getopt::Long;
our $verbose=0;
#our $opt_dry;
GetOptions("verbose"=> \$verbose,
	   "help"=> sub{usage},
	   #"dry-run"=> \$opt_dry,
	   ) or exit 1;


{
    # XX should really make part of mailmover available in lib? 
    # Mailmover::MailHead, even works without MIME::Parser.
    package Msg;

    use MIME::Parser;
    use Chj::xopen 'xopen_read';
    use Chj::xtmpdir;
    use Chj::xopendir;
    use MIME::Words 'decode_mimewords';
    use Chj::Encode::Permissive 'encode_permissive';

    sub open_path {
	my ($class, $path)=@_;
	my $tmp= xtmpdir;
	my $parser = new MIME::Parser;
	$parser->output_dir("$tmp");
	my $fh= xopen_read $path;
	my $ent= $parser->parse($fh);
	$fh->xclose;
	bless {
	       path=> $path,
	       tmp=> $tmp,
	       parser=> $parser, # do we need to retain it?
	       ent=> $ent,
	      }, $class
    }

    sub maybe_header {
	my ($s, $name)=@_;
	my $head= $s->{ent}->head;
	my @vals= $head->get(lc $name);
	if (!@vals) {
	    undef
	} elsif (@vals > 1) {
	    warn "more than one '$name' header in '$$s{path}'";
	    undef
	} else {
	    $vals[0]
	}
    }

    sub from { # just one string, hacky
	my ($s)=@_;
	if (defined (my $v= $s->maybe_header("from"))) {
	    if (my ($addr)= $v=~ /<(.*?)>/s) {
		if ($addr eq 'info@meetup.com') {
		    # HACK: this address is used for too many things,
		    # so use the name instead
		    $v=~ s/<(.*?)>//;
		    $v=~ s/^\s+//s;
		    $v=~ s/\s+\z//s;
		    $v=~ s/"//sg;
		    "M:$v"
		} else {
		    $addr
		}
	    } else {
		$v
	    }
	} else {
	    "(no from)"
	}
    }

    sub subject { # decoded
	my ($s, $as_charset)=@_;
	if (defined (my $v= $s->maybe_header("subject"))) {
	    join("",
		 map{ encode_permissive $_->[0], $_->[1], $as_charset }
		 decode_mimewords($v))
	} else {
	    "(no subject)"
	}
    }

    sub DESTROY {
	my ($s)=@_;
	my $d= xopendir ($$s{tmp});
	while (defined (my $item= $d->xnread)) {
	    my $path= "$$s{tmp}/$item";
	    unlink $path
	      or warn "could not unlink '$path': $!";
	}
    }
}


use Chj::xperlfunc ":all";

sub oneline {
    my ($str)=@_;
    $str=~ s/\s+/ /sg;
    $str=~ s/^\s+//sg;
    $str=~ s/\s+\z//sg;
    $str
}

# COPY in mailline2list
sub filenamepart {
    my ($s)=@_;
    $s=~ s|.*/||;
    $s=~ s|\..*||;
    $s
}

#xprintln "COLUMNS=$ENV{COLUMNS}";
my $cols= $ENV{COLUMNS} or die "missing COLUMNS setting";

binmode *STDOUT{IO}, ":encoding(utf8)"
  or die $!;

sub ansi_reverse_video {
    ("\033[7m", @_, "\033[0m")
}

for my $path (@ARGV) {
    eval {
	# handle special file names, so that this works:
	#  touch looking; ls -rt|tail -30 |» mailline|less -R
	#  mv -f looking seen
	my $bn= basename($path);
	if ($bn eq "seen") {
	    xprintln("-"x$cols);
	} elsif ($bn eq "looking") {
	    xprintln("."x$cols);
	} else {
	    my $m = Msg->open_path($path);
	    my $p= filenamepart $path;
	    my $a= oneline($m->from);
	    my $b= oneline($m->subject);
	    my $len= length($p) + 1 + length($a) + length($b);
	    my $miss= max(1, $cols - $len);
	    xprintln $p, " ", ansi_reverse_video($a), " " x $miss, $b;
	}
	1
    } || do {
	xprint "$@";
    }
}

#use Chj::ruse;
#use Chj::Backtrace; use Chj::repl; repl;
