#!/usr/bin/perl -w

# Son Mai 11 19:13:01 CEST 2008
(my $email='XXX%YYY,ch')=~ tr/%,/@./;

use strict;

our $fileregex= qr/\.txt(?:\.gz)?$/i;

$0=~ /(.*?)([^\/]+)\z/s or die "?";
my ($mydir, $myname)=($1,$2);
sub usage {
    print STDERR map{"$_\n"} @_ if @_;
    print "$myname index.html [ baseurl ]

  Extract the .txt{,.gz} references out of index.html and print a list
  of urls (to fetch them with wget). Baseurl is required unless
  --url-convert is given.

  e.g.
  wget http://foo
  $myname index.html http://foo | myxargs wget
  cat *txt > box
  cj-maildirmake ~/Maildir Moved/list/foo
  cj-mbox2maildir --parsedate --picky box ~/Maildir/.Moved.list.foo


  Options:
  --file-regex regex       regex to match paths against (default: '$fileregex')
  --url-convert perlcode   perlcode receives the url as 1st argument and in \$_
                           and should return it or a derivate or undef
                           to ignore it. Default is to ignore all
                           'external' uris (uris with a protocol) and
                           uris ending in .html, as well as those not
                           matching the file-regex (which is in
                           \$fileregex), and then prepend the given
                           baseurl. Overrides --file-regex (unless the
                           given perlcode makes use of \$fileregex).

  (Christian Jaeger <$email>)
";
exit (@_ ? 1 : 0);
}
use Chj::Backtrace;
use Getopt::Long;
our $verbose=0;
our $opt_urlconvert;
GetOptions("verbose"=> \$verbose,
	   "help"=> sub{usage},
	   "file-regex=s"=> sub {
	       my ($s)=@_;
	       $fileregex= qr/$s/;
	   },
	   "url-convert=s"=> \$opt_urlconvert,
	   ) or exit 1;
usage unless @ARGV==2 or @ARGV==1;

usage "baseurl is required unless --url-convert is given"
  unless (@ARGV==2 or $opt_urlconvert);
#warn "$myname: baseurl is not necessary if --url-convert is given\n";
# well maybe the user-provided perlcode will use it.

our ($file,$baseurl)=@ARGV;

use Chj::xopen ":all";

our $default_urlconvert = sub ($ ) {
    my ($href)=@_;
    if ($href=~ /^\w{3,6}:/) {
	undef # warn "ignoring external '$href'";
    } elsif ($href=~ m/$fileregex/) {
	$baseurl.$href
    } elsif ($href=~ /\.html?$/i) {
	undef # ignore
    } else {
	undef # warn "ignoring '$href'";
    }
};

our $urlconvert = $opt_urlconvert ? do {
    my $sub= eval 'sub { local $_=$_[0]; '.$opt_urlconvert.' }';
    die $@ if $@;
    $sub
} :
  $default_urlconvert;

sub get_hrefs {
    my $cnt=xopen_read ($file)->xcontent;
    my @res;
    while ($cnt=~ /<a\s+([^>]*)/migs) {
	my $bod=$1;
	#warn "got '$bod'";
	if ($bod=~ /href\s*=\s*"([^"]*)/is) {
	    my $href1=$1;
	    if (defined (my $href= &$urlconvert($href1))) {
		push @res,$href;
	    } else {
		warn "$myname: ignoring '$href1'\n";
	    }
	}
    }
    @res
}

print map {
    $_."\n"
} get_hrefs;

#use Chj::ruse;
#use Chj::Backtrace; use Chj::repl; repl;
