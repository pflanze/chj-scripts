#!/usr/bin/perl -w

# Fri May  6 22:52:06 EDT 2011
(my $email='XXX%YYY,ch')=~ tr/%,/@./;

use strict;

$0=~ /(.*?)([^\/]+)\z/s or die "?";
my ($mydir, $myname)=($1,$2);
sub usage {
    print STDERR map{"$_\n"} @_ if @_;
    print "$myname dir(s)

  Set mtime of dir, and, recursively, all of its child directories to
  the latest inferred creation time of all items contained in it.

  Algorithm for deriving creation times:

  - for files, take the older of atime and mtime
  - for directories, take the oldest creation time of all contained
    items; if empty, ignore it

  Meant to be used after cj-gitmetadata restore (i.e. spull) to change
  directory mtimes back to something close to what they would be where
  the files were created and stored with cj-gitmetadata save (scoma).

  (Christian Jaeger <$email>)
";
exit (@_ ? 1 : 0);
}

use Getopt::Long;
our $verbose=0;
#our $opt_dry;
GetOptions("verbose"=> \$verbose,
	   "help"=> sub{usage},
	   #"dry-run"=> \$opt_dry,
	   ) or exit 1;
usage unless @ARGV;


{
    package CHJdirmtimepull::item;
    use Class::Array -fields=> -publica=>
      (
       'path',
       'stat',
      );
    sub new {
	my $cl=shift;
	bless [@_],$cl
    }
    end Class::Array;
}

{
    package CHJdirmtimepull::file;
    use Class::Array -class=>"CHJdirmtimepull::item", -extend=> -publica=>
      (
      );
    use Chj::Env 'min';
    sub is_dir { 0 }
    sub maybe_creationtime { # always given for files, but same api as dirs
	my $s=shift;
	my $st= $$s[Stat];
	min($st->atime, $st->mtime)
    }
    sub possibly_write_mtime_recursively {
	# noop
    }
    end Class::Array;
}

{
    package CHJdirmtimepull::dir;
    use Class::Array -class=>"CHJdirmtimepull::item", -extend=> -publica=>
      (
       '_items', # array of CHJdirmtimepull::item
      );
    use Chj::Env 'min','max';
    sub is_dir { 1 }
    use Chj::xopendir;
    sub items {
	my $s=shift;
	$$s[_Items]||= do {
	    my @it;
	    my $path=$$s[Path];
	    my $d= xopendir $path;
	    while (defined (my $item= $d->xnread)) {
		push @it, main::xlstatitem("$path/$item");
	    }
	    $d->xclose;
	    \@it
	}
    }

    my $mk_tm = sub {
	my ($minmax)=@_;
	sub {
	    my $s=shift;
    	    my @ct= grep { defined $_ } map { $_->maybe_creationtime } @{$s->items};
	    if (@ct) {
		&$minmax( @ct)
	    } else {
		undef

	    }
	}
    };
    sub maybe_creationtime;
    sub maybe_mtime;
    *maybe_creationtime= &$mk_tm (\&min);
    *maybe_mtime= &$mk_tm (\&max);

    # action:
    use Chj::xperlfunc 'xutime';
    sub possibly_write_mtime {
	my $s=shift;
	my $path=$s->path;
	if (defined (my $mtime= $s->maybe_mtime)) {
	    xutime ($s->stat->atime, $mtime,  $path)
	} else {
	    warn "directory is empty, not setting mtime: '$path'\n";
	}
    }
    sub possibly_write_mtime_recursively {
	my $s=shift;
	for (@{$s->items}) {
	    $_->possibly_write_mtime_recursively
	}
	$s->possibly_write_mtime;
    }
    end Class::Array;
}

use Chj::xperlfunc ':all';

sub xlstatitem {
    my ($path)=@_;
    my $s= xlstat $path;
    ($s->is_dir ? "CHJdirmtimepull::dir" : "CHJdirmtimepull::file")->new($path,$s)
}

our @it= map {
    my $it= xlstatitem $_;
    $it->is_dir or die "not a directory: '".$it->path."'";
    $it
} @ARGV;

for (@it) {
    $_->possibly_write_mtime_recursively
}


#use Chj::ruse;
#use Chj::Backtrace; use Chj::repl; repl;
