#!/usr/bin/perl -w

# Mon Nov  5 13:42:46 MET 2007
(my $email='pflanze%gmx,ch')=~ tr/%,/@./;

use strict;

our $length_in_bytes= 12;

$0=~ /(.*?)([^\/]+)\z/s or die "?";
my ($mydir, $myname)=($1,$2);
sub usage {
    print STDERR map{"$_\n"} @_ if @_;
    my $_length_in_bits= $length_in_bytes*8;
    print "$myname [length_in_bytes]

  Generate password of length_in_bytes of randomness/entropy(?)/data
  (by default, $length_in_bytes bytes ($_length_in_bits bits)).

  Options:
  --pure   use pure entropy, aka /dev/random instead of /dev/urandom
           NOTE: this will die if the entropy pool does not have the
           requested number of bytes ready (on linux 2.6) (it will
           not block anymore?; interesting?)

           Well more precisely: it seems that it *does* block if there
           is *no* entropy left; but it will return as soon as there
           is some, which may be (or probably is, if the required
           length is more than 8, on novo) less than the required
           size.

  (Christian Jaeger <$email>)
";
exit (@_ ? 1 : 0);
}

use Getopt::Long;
our $verbose=0;
our $opt_pure;
GetOptions("verbose"=> \$verbose,
	   "help"=> sub{usage},
	   "pure"=> \$opt_pure,
	   ) or exit 1;
usage if @ARGV>1;
if (@ARGV) {
    ($length_in_bytes)=@ARGV
}

use Chj::Random::Formatted 'random_passwd_string';

my $act= sub {
    print random_passwd_string ($length_in_bytes),"\n"
      or die $!;

    close STDOUT
      or die $!;
};

if ($opt_pure) {
    $Chj::Random::randev eq "/dev/urandom"
      or die "expected \$Chj::Random::randev to be /dev/urandom but it is '$Chj::Random::randev'";
    local $Chj::Random::randev= "/dev/random";
    &$act
} else {
    &$act
}


