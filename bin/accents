#!/usr/bin/perl -w

# Fre Feb 20 19:57:25 CET 2015
(my $email='XXX%YYY,ch')=~ tr/%,/@./;

use strict; use warnings FATAL => 'uninitialized';
use utf8;

$0=~ /(.*?)([^\/]+)\z/s or die "?";
my ($mydir, $myname)=($1,$2);
sub usage {
    print STDERR map{"$_\n"} @_ if @_;
    print "$myname ..

  Convert combinations of accents and characters (as input when a
  keyboard doesn't support 'dead keys') into combined characters,
  e.g. 'All^o Qu´ebec, ' into 'All, Québec, ê'.

  (Christian Jaeger <$email>)
";
exit (@_ ? 1 : 0);
}

use Getopt::Long;
our $verbose=0;
#our $opt_dry;
GetOptions("verbose"=> \$verbose,
	   "help"=> sub{usage},
	   #"dry-run"=> \$opt_dry,
	   ) or exit 1;

our $map= +{
    
    # https://en.wikipedia.org/wiki/Cedilla
    '¸'=> {
	c=> 'ç',
	C=> 'Ç',
    },
    
    # https://en.wikipedia.org/wiki/Circumflex
    '^'=> {
	a=> 'â',
	A=> 'Â',
	e=> 'ê',
	E=> 'Ê',
	i=> 'î',
	I=> 'Î',
	o=> 'ô',
	O=> 'Ô',
	u=> 'û',
	U=> 'Û',
    },
    
    # https://en.wikipedia.org=> 'wiki=> 'Umlaut_(diacritic)
    '¨'=> {
	a=> 'ä',
	A=> 'Ä',
	e=> 'ë',
	E=> 'Ë',
	i=> 'ï',
	I=> 'Ï',
	o=> 'ö',
	O=> 'Ö',
	u=> 'ü',
	U=> 'Ü',
    },
    
    # https://en.wikipedia.org=> 'wiki=> 'Grave_accent
    '`'=> {
	a=> 'à',
	A=> 'À',
	e=> 'è',
	E=> 'È',
	i=> 'ì',
	I=> 'Ì',
	o=> 'ò',
	O=> 'Ò',
	u=> 'ù',
	U=> 'Ù',
	# ẁ ỳ ..
    },
    
    # https://en.wikipedia.org=> 'wiki=> 'Acute_accent
    '´'=> {
	a=> 'á',
	A=> 'Á',
	e=> 'é',
	E=> 'É',
	i=> 'í',
	I=> 'Í',
	o=> 'ó',
	O=> 'Ó',
	u=> 'ú',
	U=> 'Ú',
	# ń ḿ ..
    },
};


sub _conv {
    s{([\\¸^¨`´])(.?)}{
        my ($cmd, $c)= ($1,$2);
        ($cmd eq '\\') ?
            # ok to simply drop it at eof ?
            $c :
            do {
                my $m= $$map{$cmd} // die "bug";
                $$m{$c} //
		    ($cmd eq $c ?
			"$cmd$c" # lines of ^^^ or so, ok?
                        : do {
			    warn "unknown sequence '$cmd$c'";
			    "$cmd$c"
		    })
            }
    }sge;
}

sub conv ($) {
    local ($_)=@_;
    _conv;
    $_
}

sub convfh ($) {
    my ($fh)=@_;
    binmode $fh, "encoding(utf-8)" or die;
    while (<$fh>) {
	_conv;
	print or die $!;
    }
    close $fh or die $!;
}

use Chj::TEST;
TEST { conv q{Der ¨Ubermut} } q{Der Übermut};
TEST { conv q{Der \\¨Ubermut} } q{Der ¨Ubermut};
TEST { conv q{Der \\\\¨Ubermut} } q{Der \\Übermut};
TEST { conv q{Der ^^^^} } q{Der ^^^^}; # and no warning
TEST { conv q{Der ^^^^^} } q{Der ^^^^^}; # with warning, hum..XXX?

if ($ENV{RUN_TESTS}) {
    #use Chj::Backtrace; use Chj::repl; repl;
    Chj::TEST::run_tests;

} else {

    binmode STDOUT, "encoding(utf-8)" or die;

    if (@ARGV) {
	for (@ARGV) {
	    open my $in, "<", $_ or die "'$_': $!";
	    convfh $in;
	}
    } else {
	convfh *STDIN{IO};
    }

}
