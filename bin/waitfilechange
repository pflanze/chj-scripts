#!/usr/bin/perl -w

# Wed Aug 19 19:00:55 EDT 2009
(my $email='XXX%YYY,ch')=~ tr/%,/@./;

use strict;

our $sleeptime= 0.1;#
our $postsleeptime=0.1;

$0=~ /(.*?)([^\/]+)\z/s or die "?";
my ($mydir, $myname)=($1,$2);
sub usage {
    print STDERR map{"$_\n"} @_ if @_;
    print "$myname path(s)

  Watch the given path(s) and exit with success if one of them changed
  (looking at stat info only). Exit with error code if there was an
  error.

  Do this by polling with sleeptime $sleeptime seconds.

  Options:

    --post x   sleep x instead of $postsleeptime seconds after noticing
               a change (floating point value)
    --loop cmd   run a loop around running cmd and waiting.  re-runs cmd
                 if the path(s) have changed during the run.  cmd is
                 fed through Perl's auto-recognition of shell code
                 (good or bad?)

  (This might be a stepping stone in the simplification of my many
   old scripts like watchandprocess, observe_contentchange, ..)

  (Christian Jaeger <$email>)
";
exit (@_ ? 1 : 0);
}

use Getopt::Long;
our $verbose=0;
our $cmd;
GetOptions("verbose"=> \$verbose,
	   "help"=> sub{usage},
	   "post=s"=> \$postsleeptime,
	   "loop=s"=> \$cmd,
	   ) or exit 1;
usage unless @ARGV;

use lib "/opt/chj/perllib";
use Chj::xperlfunc ":all"; # 'xlstat'; #or xstat ?
$Chj::xperlfunc::time_hires=1;

*x_stat= *xlstat;
use Time::HiRes 'sleep';

sub getstats {
    [
     map {
	 scalar x_stat ($_)
     } @ARGV
    ]
}

my $nfiles= @ARGV;

sub waitchange ($) {
    my ($stats)=@_;
    my $newstats;
  OUTER: {
	while (1) {
	    sleep $sleeptime;
	    $newstats= getstats;
	    for (my $i=0; $i<$nfiles; $i++) {
		if ($$stats[$i]->equal($$newstats[$i])) {
		    # ok keep on going
		} else {
		    last OUTER;
		}
	    }
	}
    }
    sleep $postsleeptime
      if $postsleeptime;
    $newstats
}

if (defined $cmd) {
    my $stats= getstats;
    while (1) {
	xsystem $cmd;
	$stats= waitchange $stats;
    }
} else {
    waitchange getstats;
}

#use Chj::ruse;
#use Chj::Backtrace; use Chj::repl; repl;
