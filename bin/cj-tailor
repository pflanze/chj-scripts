#!/usr/bin/perl -w

# Fri Sep  4 16:08:14 EDT 2009
(my $email='XXX%YYY,ch')=~ tr/%,/@./;

use strict;

$0=~ /(.*?)([^\/]+)\z/s or die "?";
my ($mydir, $myname)=($1,$2);
sub usage {
    print STDERR map{"$_\n"} @_ if @_;
    print "$myname from to

  one time (hmm?) conversion between two repository formats
  (well could keep .bzr or whatever in 'to'? what about the git filter-branch --msgfilter thingie tho?)

  from and to are specs of this format:
     repotype:path

  e.g.  bzr:foo git:bar

  (Christian Jaeger <$email>)
";
exit (@_ ? 1 : 0);
}

use Getopt::Long;
our $verbose=0;
GetOptions("verbose"=> \$verbose,
	   "help"=> sub{usage},
	   ) or exit 1;
usage unless @ARGV==2;

{
    package CJ_TAILOR::spec;
    use Class::Array -fields=> -publica=> 'type', 'path', 'path_has_to_exist';
    use Chj::xrealpath ();
    sub new_parse {
	my $class=shift;
	my ($str)=@_;
	my $s=$class->new;
	my ($Type,$Path)= split /:/,$str,2
	  or die "missing : in str: '$str'";
	@$s[Type,Path]= ($Type,$Path);
	$s
    }
    sub xinit {
	my $s=shift;
	my ($Type,$Path)= @$s[Type,Path];
	$Type=~ /^\w+\z/ or die "invalid type '$Type'";
	if ($s->path_has_to_exist) {
	    $Path= Chj::xrealpath::xrealpath( $Path);
	} else {
	    $Path= Chj::xrealpath::xrealpath_dirname( $Path);
	}
	@$s[Type,Path]= ($Type,$Path);
	$s
    }
    end Class::Array;
}

our ($from,$to)= map {
    CJ_TAILOR::spec->new_parse ($_)
} @ARGV;
$from->set_path_has_to_exist (1);
$_->xinit for ($from,$to); #h which lengths to go for map. for for.

# create config file:

use Chj::xtmpfile;
my $tmp= xtmpfile;

##well, this may be a bad idea if tailor changes it's config file format but then hell what hell of an interface would it provide really.
#I'm currently using (Debian lenny) :
#$ tailor --version
#0.9.35

# TODO what kind of quoting does this file format need  grr?
$tmp->xprint("[DEFAULT]
verbose = True

[project]
target = ".$to->type.":target
start-revision = INITIAL
root-directory = ".$to->path."
state-file = ".$to->path.".tailor.state
source = ".$from->type.":source
subdir = .

[".$from->type.":source]
repository = ".$from->path."

[".$to->type.":target]
repository = ".$to->type."
");
## I'm not sure what repository = foo is for, it seems to be ignored? or is it really expected to be the type  ??.
## putting tailor.state in file *besides* the target dir, ok?.
## (Hm could use something else than . for subdir. I see, I thought it was subdir inside a repo. krwl)
$tmp->xclose;

use Chj::xperlfunc ':all';

xxsystem "tailor", "--configfile", $tmp->path;
##OH NO THIS tool S.CKS doesn't exit with non zero code in case of errors like: "Common base for tailor exceptions: 'bar' is not a known VCS kind: No module named bar"

##xstat $to->path."/.git"  hmm. but that would expect that the target is of type git. hell..

# (do we want to keep the config ? shouldn't be necessary. since I
# have my own control about the versions of my script, so I know the
# contents.)


# now, fix the commit messages: do this in a separate branch  ok ?.
print STDERR "\nGoing to fix the commit messages...\n\n";
##sh.t, subsequent tailor runs will assume it should look at the master branch?
##what about multiple branches anyway,hmmmmmm.
##wll just use a better commit msg converter ?.--todo actually filter-branch all branches.? how far back...?  wl.  todo improve performance in future.  but.  how will tailor handle this. convert back or what?  or, will I clone the git repo and filter the clone???.

##just do it badly on 'the master branch' for now:

my $_code= 'local $/; $cnt=<STDIN>; close STDIN or die $!; if (($first,$rest)= $cnt=~ /^(\[project \@[^\n]+)\n(.*)/s ) { print "$rest\n$first\n" or die $! } else { print $cnt or die $!}';
use Chj::singlequote 'singlequote_sh';
my $filtercode= 'perl -we '.singlequote_sh ($_code);

xchdir $to->path;
xxsystem "git","filter-branch","--msg-filter", $filtercode; #hm not even saying master branch. just the current one. what  ever.

#use Chj::ruse;
#use Chj::Backtrace; use Chj::repl; repl;

__END__

