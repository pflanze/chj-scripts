#!/usr/bin/perl -w

# Mon Mar 22 14:41:52 EDT 2010
(my $email='XXX%YYY,ch')=~ tr/%,/@./;

use strict;

$0=~ /(.*?)([^\/]+)\z/s or die "?";
my ($mydir, $myname)=($1,$2);
sub usage {
    print STDERR map{"$_\n"} @_ if @_;
    print "$myname tagsubname [reset_to_commit]

  Options:
  -f   force it even if the working directory is not clean
  -a   passed to git tag
  -s   passed to git tag
  -b|--base   instead of using prefix drop_, use prefix base_
  -n|--no-prefix   don't use a prefix at all
  --no-move  don't actually change HEAD, but instead tag the commit reset_to_commit

  Environment vars:
   GDROP_FORCE=1  same effect as -f

  (Christian Jaeger <$email>)
";
exit (@_ ? 1 : 0);
}

use Getopt::Long;
our $verbose=0;
our $opt_dry;
our $opt_force;
our $opt_base;
our $opt_no_prefix;
our $opt_no_move;
our @gitopts;

sub passgitopt ( $ ) {
    # we have to parse to know whether it will give 2 things to pass to git or 1.
    my ($designator)= @_;
    my @spl= split /=/, $designator;
    @spl==1 or @spl==2 or die "??? @spl";
    my ($_optname,$maybe_opttype)=@spl;
    my $optname= "-$_optname"; # just assuming one - is enough
    (
     $designator,
     do {
	 if (defined $maybe_opttype) {
	     sub {
		 my ($_Namobj,$val,@_something)=@_;
		 push @gitopts, $optname, $val
	     }
	 } else {
	     sub {
		 push @gitopts, $optname
	     }
	 }
     }
    )
};
GetOptions("verbose"=> \$verbose,
	   "help"=> sub{usage},
	   "dry-run"=> \$opt_dry,
	   "base"=> \$opt_base,
	   "no-prefix"=> \$opt_no_prefix,
	   "no-move"=> \$opt_no_move,
	   passgitopt "a",
	   passgitopt "s",
	   passgitopt  "m=s",
	   "force"=> \$opt_force,
	   ) or exit 1;
usage unless (@ARGV>=1 and @ARGV<=2);

$opt_force ||= $ENV{GDROP_FORCE};

our ($maybe_subname, $maybe_reset_to_commit)=@ARGV;

our $subname_= ((defined ($maybe_subname))# and length ($maybe_subname))
		? $maybe_subname."_" : "");

our $date_= `date_`; chomp $date_; #hum.
our $tagname=
  ($opt_base ? "base_" : ($opt_no_prefix ? "" : "drop_"))
  .$subname_.$date_;

use Chj::xperlfunc;
use Chj::Git::Functions 'status_is_clean';

our $cleanq= do {
    my $res;
    sub {
	$res ||= status_is_clean;
	$res
    }
};

##old:
sub _xxsystem {
    if ($opt_dry) {
	require Chj::singlequote;
	print "would call: ".Chj::singlequote::singlequote_many(@_)."\n";
    } else {
	xxsystem @_
    }
}

if ($opt_force or $opt_no_move or (&$cleanq)->[0]) {
    if ($opt_no_move) {
	_xxsystem "git", "tag", @gitopts, $tagname,
	  (defined $maybe_reset_to_commit ? $maybe_reset_to_commit : ());
    } else {
	_xxsystem "git", "tag", @gitopts, $tagname;
	if (defined $maybe_reset_to_commit) {
	    _xxsystem "git", "reset", "--hard", $maybe_reset_to_commit;
	}
    }
} else {
    print STDERR "\n  *** working directory status is not clean: ***\n\n"
      .(&$cleanq)->[1];
    exit 1;#well, die, but?,.
}


#use Chj::ruse;
#use Chj::Backtrace; use Chj::repl; repl;
