#!/usr/bin/perl -w

# Copyright 2004-2021 Christian Jaeger, published under the same terms
# as Perl 5
(my $email='ch%christianjaeger,ch')=~ tr/%,/@./;

use strict; use warnings FATAL => 'uninitialized';

$0=~ /(.*?)([^\/]+)\z/s or die "?";
my ($mydir, $myname)=($1,$2);

use Chj::Unix::Daemonizer;
use Chj::xsysopen qw(xsysopen_append xsysopen_read);
use Chj::xopendir;# ":all"; there's no :all
use Digest::MD5 "md5_hex";
use Chj::xperlfunc;
use Chj::xperlfunc qw(xmkdir_p dirname);
use Chj::Util::AskYN;
use Time::HiRes 'sleep';
use Chj::xtmpfile;
*Class::Array::clone=sub {
    my $self=shift;
    my $new=[@$self];
    bless $new,ref $self
}
  unless *Class::Array::clone{CODE};
use Chj::xhome;

my $usage;
my ($opt_stop, $opt_start, $opt_bg, $opt_nice, $opt_restart, $opt_status,
    $opt_noask);
my $runbase="(only calculated if cmd/arguments given)";
my $basedir= xhome."/.daemonize-run";
our $maxwait=3;#seconds
our $logfile;
our $opt_quiet;
our $opt_no_error_if_running;
our $signal=15; # SIGTERM
our ($opt_STOP, $opt_CONT);
our $opt_hash_input;
our $opt_list;
our $opt_multilog;
our $opt_multilog_n= 1000;
our $opt_multilog_s= 40000;
our $opt_shorthelp;

my @actions= qw(help --help -h stop kill start restart status STOP CONT cont);
my %is_action= map{$_=>1} @actions;

sub parse_action {
    my ($a)= @_;
    if ($a eq 'help' or
        $a eq '--help' or
        $a eq '-h') {
        $opt_shorthelp= 1;
    } elsif ($a eq 'stop' or $a eq 'kill') {
	$opt_stop=1;
    } elsif ($a eq 'start') {
	$opt_start=1;
    } elsif ($a eq 'restart') {
	$opt_restart=1;
    } elsif ($a eq 'status') {
	$opt_status=1;
    } elsif ($a eq 'STOP') {
	$opt_STOP=1;
    } elsif ($a eq 'CONT' or $a eq 'cont') {
	$opt_CONT=1;
    } else {
	die "$myname: invalid action '$a' (valid: @actions)\n";
    }
}


ARG:{
    while (@ARGV and $ARGV[0]=~ /^-(.*)/s) {
	my $opt=$1;
	shift @ARGV;
	if ($opt=~ /^-(.*)/s) {
	    if (length $1) {
		if ($is_action{$1}) {
		    parse_action($1);
		} elsif ($1 eq 'action') {
		    my $v= $ARGV[0];
		    defined $v
                        or die "$myname: expecting value after --action\n";
		    shift @ARGV;
		    parse_action($v);
		} elsif ($1 eq 'list') {
		    $opt_list=1;
		} elsif ($1 eq 'bg') {
		    $opt_bg=1;
		} elsif ($1 eq 'quiet') {
		    $opt_quiet=1;
		} elsif ($1 =~ /^nice(?:=(\d+)|(.*))?$/) {
		    if (defined $2) {
			$usage= "invalid value for --nice";
			last ARG;
		    } else {
			$opt_nice= $1 // 5;
		    }
		} elsif ($1 eq 'no-nice') {
		    undef $opt_nice;
		} elsif ($1 eq 'no-ask') {
		    $opt_noask=1;
		} elsif ($1 eq 'signal') {
		    $signal=$ARGV[0]; shift @ARGV;
		    if (defined( $signal) and $signal=~ /^\d+\z/) {
			# ok
		    } else {
			$usage= "--signal option needs an integer argument";
			last ARG;
		    }
		} elsif ($1 eq 'out') {
		    $logfile=$ARGV[0]; shift @ARGV;
		    defined $logfile or do {
			$usage= "missing argument to --out option";
			last ARG;
		    };
		} elsif ($1 eq 'maxwait') {
		    $maxwait=$ARGV[0]; shift @ARGV;
		    if (defined $maxwait) {
			$maxwait =~ /^\d+(?:\.\d+)?$/
			  or die " --maxwait needs a number, got '$maxwait'";
		    } else {
			$usage= "missing argument to --maxwait option";
			last ARG;
		    };
		} elsif ($1 eq 'hash-input') {
		    $opt_hash_input=$ARGV[0]; shift @ARGV;
		    unless (defined $opt_hash_input) {
			$usage= "missing argument to --hash-input option";
			last ARG;
		    };
		} elsif ($1 eq "multilog") {
		    $opt_multilog= $ARGV[0]; shift @ARGV;
		    unless (defined $opt_multilog) {
			$usage= "missing argument to --multilog option";
			last ARG;
		    }
		    unless (length $opt_multilog) {
			$usage= "--multilog requires at least 1 character as an argument";
			last ARG;
		    }
		} elsif ($1 eq "multilog-n") {
		    $opt_multilog_n= $ARGV[0]; shift @ARGV;
		    unless (defined $opt_multilog_n) {
			$usage= "missing argument to --multilog-n option";
			last ARG;
		    }
		    unless ($opt_multilog_n=~ /^\d+\z/ and $opt_multilog_n) {
			$usage= "--multilog-n only accepts natural numbers";
			last ARG;
		    }
		} elsif ($1 eq "multilog-s") {
		    $opt_multilog_n= $ARGV[0]; shift @ARGV;
		    unless (defined $opt_multilog_s) {
			$usage= "missing argument to --multilog-s option";
			last ARG;
		    }
		    unless ($opt_multilog_s=~ /^\d+\z/ and $opt_multilog_s) {
			$usage= "--multilog-s only accepts natural numbers";
			last ARG;
		    }
		} elsif ($1 eq 'help') {
		    $usage="";
		    #last ARG; nope
		} elsif (($1 eq 'no-error-if-running') or ($1 eq 'no-error')) {
		    $opt_no_error_if_running=1;
		} else {
		    $usage= "unknown option '$1'";
		    last ARG;
		}
	    } else {
		# '--'
		last ARG;
	    }
	} else {
	    # single letter options
	    while (length $opt){
		my $o= substr $opt,0,1,"";
		if ($o eq 's' or $o eq 'k') {
		    $opt_stop=1;
		} elsif ($o eq 'b') {
		    $opt_bg=1;
		} elsif ($1 eq 'q') {
		    $opt_quiet=1;
		} elsif ($o eq 'N') {
		    undef $opt_nice;
		} elsif ($o eq 'l') {
		    $opt_list=1;
		} elsif ($o eq 'h') {
		    $usage="";
		    #last ARG; nope
		} else {
		    $usage= "unknown option '$o'";
		    last ARG;
		}
	    }
	}
    }
}

sub mklogdir {
    my ($dirpath)= @_;
    xmkdir_p $dirpath, 0700;
}

if (defined $opt_multilog) {
    mklogdir $opt_multilog;
    if (defined $logfile) {
	if ($logfile=~ m|^/|) {
	    # leave alone
            mklogdir dirname $logfile;
	} else {
	    $logfile= "$opt_multilog/$logfile"
	}
    } else {
	$logfile= "$opt_multilog/nohup.out"
    }
} else {
    if (defined $logfile) {
        mklogdir dirname $logfile
    } else {
        $logfile= "nohup.out";
    }
}

unless ($usage) { # no defined: only avoid if an *error* parsing the
                 # arguments has occurred.
    if (@ARGV) {
	my $hash= md5_hex( defined ($opt_hash_input) ? $opt_hash_input
			   : join "\0",@ARGV );
	$runbase= "$basedir/$hash";
    } elsif ($opt_list) {
	# OK.
    } else {
	# state that there is no usage error [OMG] -- no wait, state
	# that there *is* a usage error, but no particular message for
	# it
	$usage="" # if not already set to "" anyway
    }
}

{
    use Chj::FP::ArrayLib 'array_fold';
    my $add= sub {
	my ($a,$b)=@_;
	$a + $b
    };
    my $n= array_fold $add, 0,
      [map { $_ ? 1 : 0 } ($opt_stop, $opt_STOP, $opt_CONT)];
    if ($n > 1) {
	$usage = "can only take one of --stop, --STOP, and --CONT at a time"
    }
}

sub usage {
    my ($maybe_usage)=@_;
    if ($maybe_usage) {
	print STDERR "$myname: $maybe_usage\nRun $myname --help for more information.\n";
    } else {
	print "$myname [options] cmd arguments

  Better than 'nohup' (it is immune to other signals too), better than
  'batch' (it's quicker for you to notice what's happening), and also
  makes sure the same daemon/job is not started again if it is running
  already (hm, todo: should probably offer a way to override this?).
  You can wait at the shell for the daemon/job to finish, or can stop
  the 'waiter' (which doesn't stop the daemon/job itself). You can
  stop a running daemon/job by adding the --stop option. Also the
  other usual sys-V init options are supported so it can be used for
  that purpose.

 Options:

  (all of them must be listed before the cmd, multiple short options
   may be given together)

  -b|--bg     do not wait for the daemon to terminate
  --start     same as --bg but don't print pid
  -s|--stop|-k|--kill
              stop the previously started daemon; you have to give
              the exact same arguments.
              First kills with signal $signal, then if there are still
              processes after maxwait seconds, kills with SIGKILL.
  --restart
              if a previously started daemon is running, --stop it first,
              then start it again
  --status
              prints 'running' if running, 'off' if not.

  -l|--list      show all running daemons

  --signal N  use signal N instead of default $signal
  --STOP      send SIGSTOP (and no SIGKILL afterwards)
  --CONT|--cont  send SIGCONT

  --action <actionname>
              where <actionname> is one of:
                @actions
              These correspond to the option with the same name. The
              reason --action exists is to be able to pass through
              sysv script action names safely.

  --maxwait N  change default of $maxwait sec to wait before sending SIGKILL
  --nice[=n]  lower priority by n (or 5 by default)
  -N|--no-nice  do not lower priority (new default)

  --out file  use file instead of 'nohup.out' for output (is opened in
              append mode)

  --multilog multilogdir
              pass output through multilog from daemontools, with the given
              path as the base directory. If this option is given, the
              argument to --out is interpreted as relative to multilogdir
              unless it is absolute, and only errors from multilog itself
              or its invocation are written to it.
  --multilog-n numfiles
              use numfiles instead of $opt_multilog_n as -n argument to multilog
  --multilog-s bytesperfile
              use bytesperfile instead of $opt_multilog_s as -s argument to multilog

  --quiet|-q  be quiet (do not output the pid of the daemon or exit code)
  --no-ask    don't ask whether to show the output at the end (never show it)
  --no-error-if-running|--no-error  do not report an error if the
              daemon is already running
              (with --quiet, suitable to be run repeatedly from crontab)
  --hash-input string
              instead of creating a hash (for identification of jobs) from
              the cmd and arguments, use string as hash input.
              (This would allow to exclude some cmd arguments or add other
              inputs like cwd.)
  --          terminate option processing

 Notes:

  The pid file for this run will be stored in the directory
   '$runbase'
  you should never have a need to look at it.

  Does not make the current directory or other environmental
  parameters part of the input of the function to find the process
  group for --stop/--STOP/--CONT options.

  (Christian Jaeger <$email>)
";
    }
    exit @_ ? 1 : 0;
}

usage $usage if defined $usage;

#  Todo?:
#  - rundir cleanup function only removing those dirs
#    for which no job is running anymore

sub prep_basedir {
    if (-d $runbase) {
	utime time,time,$runbase  # for future cleaner, to ignore too new
				  # directories (though runfile check
				  # should be done anyway too)
    } else {
	(xmkdir $basedir, 0700) unless -d $basedir;
	xmkdir $runbase,0700;
	my $f= xtmpfile($runbase."/cmdline");
	$f->xprint ($_,"\0") for @ARGV;
	$f->xclose;
	$f->xputback(0444);
    }
}

sub basedir_listing {
    if (-d $basedir) {
	my $d= xopendir $basedir;
	my @l;
	while (defined (my $item= $d->xnread)) {
	    push @l, $item
	}
	$d->xclose;
	\@l
    } else {
	[]
    }
}

sub list_daemons {
    # only running ones

    require Chj::singlequote;
    'Chj::singlequote'->import('possibly_singlequote_sh');

    my $l= basedir_listing;
    my $ds= [
	     map {
		 my $rundir= "$basedir/$_";
		 my $res;
		 eval {
		     if (Chj::Unix::DaemonRunfile
                         ->new("$rundir/run")->is_running) {
			 my @cmd= split /\0/,
                             xsysopen_read("$rundir/cmdline")->xcontent;
			 $res=[
			       $rundir.": ".
			       join(" ",
				    map {
                                        possibly_singlequote_sh($_)
                                    }
				    @cmd)];
		     } else {
			 $res=[];
		     }
		 } || do {
		     warn "error: $@";
		     $res=[];
		 };
		 @$res
	     } @$l
	    ];
    for (@$ds) {
	print "$_\n"
	  or die $!
    }
}


my $runfile= "$runbase/run";

sub is_running {
    my $r= Chj::Unix::DaemonRunfile->new($runfile);
    $r->is_running
}

sub stop {
    my ($user,$hostname,$ip,$pid)=
      Chj::Unix::DaemonRunfile->new($runfile)->readfile;
    xkill -$signal,$pid;

  CHECK:{
	my $st=time;
	do {
	    sleep 0.1;
	    # try both the pid itself and the processgroup, since
	    # killing the pgroup using -$pid is not portable. tested
	    # on linux only, though.
	    if ((kill 0,$pid) # for portability only, if it helps even
		or
		(kill 0,-$pid)
	       ) {
		# redo
	    } else {
		last CHECK;
	    }
	    #warn "notyetfinished\n";
	} while ((time-$st)<$maxwait);
	kill -9,$pid
	  and warn "not all processes exited, killed again with signal 9\n";
    }
}

sub STOP_or_CONT {
    my ($user,$hostname,$ip,$pid)=
      Chj::Unix::DaemonRunfile->new($runfile)->readfile;
    my $signal= $opt_STOP ? 19 : 18; # XXX Linux specific. Derive from names.
    xkill -$signal,$pid;
}

sub start {
    prep_basedir;
    my $daemonizer= Chj::Unix::Daemonizer->default->clone;
    $daemonizer->set_runpath($runfile);
    my $output;
    eval{
	$output= xsysopen_append $logfile,0600;
    };
    if ($@) {
	my $msg=$@;
	#$msg=~ s/:([^:]+) at/$1/;
	$msg=~ m/: *([^:]+) at/ and $msg=$1;
	warn "error opening '$logfile': $msg\n";
    }
    unless ($output) {
	my $tm="".localtime();
	$tm=~ s/://sg;
	$tm=~ tr/ /_/;
	my $path= "$runbase/$tm.out";
	$output= xsysopen_append $path;
	warn "output to '$path'\n";
    }
    if (defined $opt_multilog) {
	require Chj::xpipe;
	import Chj::xpipe;
	require Chj::Cwd::realpath;
	import Chj::Cwd::realpath "xrealpath";

	# multilog requires absolute path
	my $abslogdir= xrealpath($opt_multilog);

	my ($logr,$logw)= xpipe();
	if (my $loggerpid= xfork) {
	    $logr->xclose;
	} else {
	    $output->xdup2(1);
	    $output->xdup2(2);
	    $logw->xclose;
	    $logr->xdup2(0);
	    xexec "multilog", "t", "s$opt_multilog_s", "n$opt_multilog_n",
	      $abslogdir;
	}
	$output= $logw;
    }
    $daemonizer->set_outputs($output);

    if (my $pid= $daemonizer->fork($opt_no_error_if_running
                                   &&
                                   sub {
                                       print STDERR "daemon already running\n"
                                         unless $opt_quiet;
                                       exit 0
                                   })) {
	print STDERR ("daemon running as sid $pid",
		      ($opt_bg ? () : " (you can hit ctl-c now)"),"\n")
	  unless ($opt_quiet or $opt_start or $opt_restart);
	my $maybe_exitcode;
	unless ($opt_bg or $opt_start or $opt_restart) {
	    wait;
	    if ($?) {
		do {
		    if ($?>255) {
			print STDERR
                          "daemon exited with return code ".($?>>8)."\n";
		    } else {
			print STDERR "daemon exited by signal $?\n";
		    }
		}
		  unless ($opt_quiet);
		$maybe_exitcode=1;
	    } else {
		print STDERR "daemon exited successfully.\n"
		  unless ($opt_quiet);
		$maybe_exitcode=0;
	    }
	    if (!$opt_noask and
                maybe_askyn "do you want to look at the output?"){
		if (defined $opt_multilog) {
		    xsystem "tai", $opt_multilog;
		} else {
		    xsystem "less", $output->path;
		}
	    }
	}
	exit ($maybe_exitcode // 0);
    } else {
	if (defined $opt_nice) {
	    require POSIX;
	    POSIX::nice ($opt_nice);
	}
	xexec @ARGV;
    }
}


if ($opt_shorthelp) {
    usage "the following actions are valid: @actions"
}

{
    my $cnt=0;
    for ($opt_stop, $opt_start, $opt_bg, $opt_restart, $opt_STOP,
         $opt_CONT, $opt_status) {
	$cnt++ if $_;
    }
    if ($cnt > 1) {
	# allow --restart --bg
	if ($cnt == 2 and $opt_restart && $opt_bg) {
	    # ok
	} else {
	    usage 'only one of --stop|--bg|--start|--restart|--STOP|--CONT|--status can be given, except --bg is allowed with --restart'
	}
    }
}

if ($opt_stop) {
    stop;
} elsif ($opt_restart) {
    stop if is_running; # XXX: of course that's bad, since there's a
                        # race window to get an exception!
    start;
} elsif ($opt_STOP or $opt_CONT) {
    STOP_or_CONT;
} elsif ($opt_status) {
    my $stat= do {
	if (is_running) {
	    "running"
	} else {
	    "off"
	}
    };
    print "$stat\n"
      or die $!;
} elsif ($opt_list) {
    list_daemons;
} else {
    start;
}

