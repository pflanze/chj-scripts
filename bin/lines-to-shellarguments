#!/usr/bin/perl -w

# Sam Jan  5 05:32:27 MET 2008
(my $email='XXX%YYY,ch')=~ tr/%,/@./;

use strict;

$0=~ /(.*?)([^\/]+)\z/s or die "?";
my ($mydir, $myname)=($1,$2);
sub usage {
    print STDERR map{"$_\n"} @_ if @_;
    print "$myname ..

wieder mal ein stdin-nach-stdout filter. kann ich mich je 'einigen' aka entschliessen wie genau generisch alle  so ?

well actually ist dies jetzt ein <> leser. (aber stdout writer.)

****modified COPY OF nl-to-space !!!!!!!!!!****

  (Christian Jaeger <$email>)
";
exit (@_ ? 1 : 0);
}

my @args;
my $DEBUG=0;
our $opt_newline_at_end=1;
for (my $i=0; $i<=$#ARGV; $i++) {
    local $_=$ARGV[$i];
    if (/^--?h(elp)?$/) {
    	usage
    } elsif ($_ eq '--') {
    	push @args, @ARGV[$i+1..$#ARGV];
    	last;
    } elsif (/^--?d(ebug)?$/) {
	$DEBUG=1;
#     } elsif (/^--?X(?:XXX(?:=(.*))?)?$/) {
#         if (defined $1) {
#             $XXX=$1
#         } else {
#             $XXX=$ARGV[++$i] or usage "missing argument for '$_' option";
#         }
    } elsif (/^-./) {
    	usage("Unknown option '$_'\n");
    } else {
    	push @args, $_
    }
}
#usage if @args;

use Chj::singlequote 'singlequote_sh';

while (<>) {
    my $did_chomp= chomp;
    my $lin= singlequote_sh($_);
    print($did_chomp ? $lin." " : $lin)
      or die $!;
}

print "\n" or die $!
  if $opt_newline_at_end;
close STDOUT or die $!;
close STDIN or die $!;
