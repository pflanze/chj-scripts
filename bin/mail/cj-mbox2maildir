#!/usr/bin/perl -w

# Don Jan 31 06:24:59 CET 2008
(my $email='pflanze%gmx,ch')=~ tr/%,/@./;

# Yes, since mbox2maildir from the debian qmail package is not in
# source-installed qmail. And the mb2md Debian package script just
# doesn't seem to want to work.

use strict;

our $maxdatedifference = 60*60*24; # 1 day

$0=~ /(.*?)([^\/]+)\z/s or die "?";
my ($mydir, $myname)=($1,$2);
sub usage {
    print STDERR map{"$_\n"} @_ if @_;
    print "$myname path/to/mbox path/to/maildir

  Options:
  #--create   create the target mailbox. sense? not impl.!
  --picky   do not treat any /^From / as a message split marker.
            useful for converting mailman archives.
            Require a mail address and a date in the line in this case.
  --subject-modify perlcode
            code to do things on subject line in \$_ like strip
            mailinglist identifyers. NOTE hack: only first line of
            subject is treated.. (tja. so comes when one does not use
            a library.)
  --parsedate
            parse the date from the 'From ' line and use this instead
            of the Date: header if they differ by more than one day
            (more precisely, if the latter is more than $maxdatedifference
            seconds later than the former)
  --keepstamps
            parse the date from the 'From ' line and use it as timestamps
            in the file names in the maildir.

  (Christian Jaeger <$email>)
";
exit (@_ ? 1 : 0);
}

use Getopt::Long;

my $option={};

GetOptions($option,
	   "create=s",
	   "picky",
	   "subject-modify=s",
	   "parsedate",
	   "keepstamps",
	  )
  or exit 1;# msg has already been printed.!
usage unless @ARGV==2;

our ($path_mbox, $path_maildir)=@ARGV;

# for now, assume $path_maildir exists. (use cj-maildirmake manually)

use Chj::xopen 'xopen_read';
use Chj::xsysopen ':all';  # Chj::xopen does not offer any excl option. Sigh still?. But doesn't matter?

my $match=
  ($$option{parsedate} or $$option{keepstamps})
  ? qr/^From (?:\S+\s+)+([A-Z][a-z]{2} [A-Z][a-z]{1,9} {1,2}\d+ \d{1,2}:\d{2}:\d{2} (?:20|19)\d\d)\s*$/
  :
  $$option{picky} ? qr/^From (?:\S+\s+)+(?:20|19)\d\d\s*$/
  : qr/^From /;
# ziemlich doof. richtig datumsparsen? wie?. tja. eben. ...huh...
my $maybe_subject_run= do {
    if (my $code= $$option{"subject-modify"}) {
	my $c= eval "sub { $code }";
	die if $@;
	$c
    } else {
	undef
    }
};

use Date::Parse;

sub readandwrite {
    my $f= xopen_read($path_mbox);
    my $time=time;
    my $pid=$$;
    local $_;
    # loop variables:
    my $n=0;
    my $out;
    my $in_head;
    my $maybe_parseddate; # used if option parsedate is in effect
    my $opt_parsedate= $$option{parsedate};
    my $opt_keepstamps= $$option{keepstamps};
    while (defined($_= $f->xreadline)) {
	if (/$match/) {
	    if ($opt_parsedate or $opt_keepstamps) {
		$maybe_parseddate= str2time($1) or die "unparseable date '$1'";
		if ($opt_keepstamps) {
		    $time= $maybe_parseddate;
		}
	    }
	    $out->xclose if $out;
	    my $outpath= "$path_maildir/new/$time.${pid}_$n.mbox";
	    $n++;
	    $out= xsysopen_excl($outpath);
	    $in_head=1;
	} else {
	    if (/^$/) {
		$in_head=0;
	    }
	    if ($in_head) {
		if ($maybe_subject_run and /^((?i:subject):\s*)([^\r\n]*)(.*)/s) {
		    $_= do {
			my $pre=$1;
			local $_=$2;
			my $post=$3;
			&$maybe_subject_run();
			$pre.$_.$post
		    };
		}
		if ($opt_parsedate and /^date:\s*(.*\d)/i) {
		    ## hmm assumes that every msg does contain a date header (or it will miss that fact and not output the date at all). but ok that's ok and even reasonable for now.
		    my $datestr= $1;
		    # remove fluff like from 'Tue, 25 Jan 2005 11:16:11 -0500 (GMT-05:00)'; note that 'Tue, 24 Feb 2004 11:57:45 +0800 PHT' would be bad already if not requiring the \d above.
		    $datestr=~ s/\(.*//s;
		    if (my $date= str2time($datestr)) {
			if (($date - $maybe_parseddate) > $maxdatedifference) {
			    ##no risk loosing data other than the date string itself? well it would have croaked above
			    $_= "Date: ".localtime($maybe_parseddate)."\n";
			}
		    } else {
			warn "unparseable Date header (using 'From ' date instead, ok?) : '$datestr'";
		    }
		}
	    } else {
		s/^>From /From /;
	    }
	    $out->xprint($_);
	}
    }
    $f->xclose;
    $out->xclose if $out;
}

readandwrite;

