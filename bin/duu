#!/usr/bin/perl -w

# christian Jaeger 2000/9/30 pflanze@gmx.ch
# Takes one optional parameter: directory (default is cwd)
# Note: this estimates the actual blocksize by looking at file sizes and file blocks, 
#  which is not always correct. I didn't know a better way to find out.

# Sun, 21 Nov 2004 20:15:04 +0100: lstat instead of stat. man.

our $default_blocksize=512;

sub usage {
    print "$0 dir
  options:
  --blocksize|-b n   blocks are n bytes big (default $default_blocksize)
  --no-blocksize     determine blocksize from seen data (doesn't seem to be right)
  -x, --one-file-system   skip directories on different file systems, but run
                          through all subdirs
  -xx                skip subdirs on different file systems than dir (includes -x)
";
    exit 1;
}
our $blocksize;
our $flag_blocksize_given=1;
our $opt_reverse;
our $opt_x;
our $opt_xx;
use Getopt::Long;
GetOptions (
	    "h|help"=> sub {usage},
	    "blocksize|b=i"=> \$blocksize,
	    "no-blocksize"=> sub {
		$flag_blocksize_given=0;
	    },
	    "reverse|r"=> \$opt_reverse,
	    "x|one-file-system"=> \$opt_x,
	    "xx"=> \$opt_xx,
	   ) or usage;
usage unless @ARGV<=1;

$flag_blocksize_given|= defined $blocksize;
if ($flag_blocksize_given) {
    $blocksize=$default_blocksize unless defined $blocksize;
}

our ($dir)=@ARGV ? @ARGV : ".";

my $sortfunc=
  !$opt_reverse ? sub { $a->[1] <=> $b->[1] } : sub { $b->[1] <=> $a->[1] };

if (defined($dir)&&length($dir)) {
    $dir=~ s|/$||;
    $dir.="/";
} else {
    $dir="./";
}

use Chj::xperlfunc ':all';

if (opendir DIR,$dir) {
    my $dev= (xstat $dir)->dev if $opt_xx;
    my @items;
    my $total=0;
    my $totalfiles= 0; # blocks
    my $ownsize= (lstat($dir))[12];# blocks
    #my $blocksize=0;# will be guessed
    $blocksize=0 unless $flag_blocksize_given;
    my ($blocks,$bytes);
    while (defined ($item= readdir DIR)) {
        next if $item eq '.' or $item eq '..';
	my $s= xlstat "$dir$item";
        if ($s->is_dir) {
	    if (not($opt_xx) or ($s->dev == $dev)) {
		my $line= execute('du','-sk',(($opt_x || $opt_xx) ? '-x' : ()),
				  '--',"$dir$item");
		chomp $line;
		if ($line=~ /^(\d+)/) {
		    $total+=$1;
		    push @items,[$item,$1];#[$item,$1,$line];
		} else {
		    warn "Problem: line is '$line'";
		}
	    } else {
		warn "ignoring dir on different fs: '$item'\n" #wl?
	    }
        } else {
            ($blocks,$bytes)=(lstat("$dir$item"))[12,7];
            next unless $blocks; #zero lenghts
            $totalfiles+= $blocks;
            if ($bytes) {
                my $bs= 2** int(log($bytes/$blocks)/log(2)+0.5);
                #print "Blocksize: $bs, bytes=$bytes, blocks=$blocks\n";
                $blocksize=$bs if $bs>$blocksize # get the highest number as estimate
                  and !$flag_blocksize_given;
            } else {
                #warn "Hmm, stat $dir$item gave bytes=".(defined $bytes ? $bytes : "undef");
                # heh, warum hab ich den Fall nicht früher getroffen? 24.3.03
                # If the file is empty, we can't abschätzen was das für die Blockgrösse heisst well.
                # so just ignore
            }
        }
    }
    closedir DIR;

    foreach (sort $sortfunc @items) {
        print $_->[1].substr(" "x12,length($_->[1])).$_->[0]."\n";
    }
    $ownsize= $ownsize*$blocksize/1024;
    print "TOTAL: folders $total k, files ".($totalfiles*$blocksize/1024)." k, dir $ownsize k  (blocksize=${blocksize}b".(${blocksize} eq 512? '':' ?').")\n";
} else {
    warn "Could not open dir '$dir': $!\n";
}

sub execute {
    my $rv=open IN,"-|";
    if (defined $rv) {
        if ($rv) {
            # parent
            local $/=undef;
            my $in=<IN>;
            close IN or warn "issue from running command: $@ $!";
            #wait;
	    #$? == 0 or die "@_ returned exit code $?";  does not work anyway, -1 is returned, hm
            $in;
        } else {
            exec @_;
        }
    } else {
        die "Could not fork: $!\n";
    }
}
