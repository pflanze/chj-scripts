#!/usr/bin/perl -w

# Tags: (functional)

# Copyright 2008-2017 Christian Jaeger, MIT license.
(my $email='ch%christianjaeger,ch')=~ tr/%,/@./;

use strict;

$0=~ /(.*?)([^\/]+)\z/s or die "?";
my ($mydir, $myname)=($1,$2);

our $filebase= ($ENV{HOME} // die "need HOME to be set") . "/.$myname-tmp";

sub usage {
    print STDERR map{"$_\n"} @_ if @_;
    print "$myname code [env [bindings]]

  Generate a temporary program with the given code and possibly
  environment value capturing, and output it's path to stdout.

  code is the shell (for now?) code to be run.

  env is a comma or whitespace-separated list of identifiers which are
  to be preserved--the set of environment variables to be closed
  over. (The values are kept by serializing the dynamic environment
  upon lambda creation and deserializing it upon its call.)

  bindings is a list of identifiers into which positional arguments
  are stored as environment variables when the lambda is invoked.

  Options:
#  -p|--perl    code is given in perl --to be done
   --filebase pathbase
                use pathbase instead of $filebase

  (Christian Jaeger <$email>)
";
exit (@_ ? 1 : 0);
}

# The idea to use <( ) for using fd's doesn't work.  Also, the "after
# reading the path once, it will automatically be unlinked." idea
# would not be a good one anyway (even if the kernel reading the
# shebang line and the shell possibly seeking around would be an issue
# anyway), since the 'closure' wants possibly to be callable multiple
# times anyway. So we're back to manual free. No gc in shell, except
# for time based tmp cleaning.


use Getopt::Long;
our $verbose=0;
our $opt_perl;

GetOptions("verbose"=> \$verbose,
	   "help"=> sub{usage},
	   "filebase=s"=> \$filebase,
	   #"perl"=> \$opt_perl,
	   ) or exit 1;
usage unless @ARGV>=1 and @ARGV<=3;

our ($code,$maybe_env,$maybe_bindings)=@ARGV;

use Chj::xtmpfile;
use Chj::xperlfunc;
use Chj::singlequote 'singlequote_sh';
use Chj::IO::Command;
use Chj::xopen qw(xopen_read);
use Digest::SHA;


sub Split {
    my ($str)=@_;
    return () unless defined $str;
    my @v= split /(?:\s+|,)/,$str;
    for (@v) {
	/^\w+\z/ or die "invalid variable name syntax '$_'"
    }
    @v
}

my @env= Split $maybe_env;
my @bindings= Split $maybe_bindings;

if (! -e $filebase) {
    xmkdir $filebase, 0700;
}

my $saltpath= "$filebase/salt";
my $salt= do {
    if (-e $saltpath) {
	xopen_read($saltpath)->xcontent
    } else {
	my $c= Chj::IO::Command->new_sender("passwdgen","30");
	my $salt= $c->xcontent;
	$c->xxfinish;
	my $s= xtmpfile $saltpath;
	$s->xprint($salt);
	$s->xclose;
	$s->xputback(0700);
	$salt
    }
};
chomp $salt;
$salt=~ /^\w{30,}\z/s or die "invalid salt in '$saltpath'";


my $prog= do {
    my @prog;

    # assume shell coding:
    push @prog, ("#!/bin/bash\nset -eu; ");

    # serialize env:
    for my $var (@env) {
	my $v= $ENV{$var};
	push @prog, (defined $v ?
		     "export $var=".singlequote_sh($v).";"
		     : "unset $var;");
    }

    # take parameters:
    if (defined $maybe_bindings) {
	# check for the number of arguments:
	push @prog, ('if [ $# -ne '
		     .@bindings.
		     ' ]; then echo "$0: wrong number of arguments, expecting '
		     .@bindings.
		     ', got $#" >&2; exit 1; fi;'
	    );
	my $z=1;
	for my $var (@bindings) {
	    # here without 'export' clause? or with? hm. nested lambdas expect
	    # to see it?. but it may clobber stuff, and even be unsecure,
	    # hmmmmmmmm.
	    push @prog, ("export $var=\$$z;");
	    $z++
	}
    } else {
	# do not do anything whatsoever, the code is expected to look at $@ itself then.
    }
    push @prog, ($code);
    #push @prog,("\n");

    join("", @prog)
};

my $hash= do {
    my $hasher= Digest::SHA->new("SHA-256");
    $hasher->add($salt);
    $hasher->add($prog);
    $hasher->hexdigest
};

my $path= "$filebase/$hash";

if (! -e $path) {
    my $o= xtmpfile $path;
    $o->xprint($prog);
    $o->xclose;
    $o->xputback(0755);
}

print $path,"\n"
  or die "printing path to stdout: $!";

