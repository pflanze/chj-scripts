#!/usr/bin/perl -w

# Tags: (ipc)

# Mit Feb 13 13:22:44 CET 2008
(my $email='chrjae%gmail,com')=~ tr/%,/@./;

use strict;

my $protocol_version=2;

use Chj::schemestring 'parse_schemestring';
use Time::HiRes 'time','sleep';
use Chj::load;
use Chj::xperlfunc ":all";
use Chj::singlequote "singlequote_sh";
use POSIX ":sys_wait_h"; # WNOHANG
use Chj::xpipe;

sub uninterrupted_sleep ( $ ) {
    my ($sleeptime)=@_;
    my $end= time + $sleeptime;
    while (1) {
	my $diff= $end - time;
	if ($diff > 0) {
	    #warn "going to sleep for $diff";
	    sleep $diff;
	} else {
	    last
	}
    }
}
# ^- todo: move to some lib, finally.


our $sleeptime=1.0;
our $maxchildren= 10;

$0=~ /(.*?)([^\/]+)\z/s or die "?";
my ($mydir, $myname)=($1,$2);
sub usage {
    print STDERR map{"$_\n"} @_ if @_;
    print "$myname socketpath cmd [arguments]

  Listens on socketpath, and expects senders to print a 'trigger'
  line, and when that happens, after waiting for --sleep seconds
  ($sleeptime by default), runs the given cmd / arguments. If new
  triggers are being issued before the cmd finishes, it is being run
  again (thus no triggers are being missed).

  Options:
  --verbose|-v show command (and arguments) when triggered
  --sleep n    sleep n instead of $sleeptime
  --umask val  use umask instead of the current one for creating the
               socket file
  --accept-arguments  instead of just the trigger message, accept
               messages with a list of strings encoded in them, which
               are then passed as additional arguments to cmd.
               Switches to piped handler, which does not have the
               property of running only once if before starting a run
               multiple triggers have been given, but instead runs as
               many times as triggers have been sent, but still
               serialized. Also switches off sleeping.
  --no-wait    don't wait for the command to exit before running the
               next.
  --inet       Interpret socketpath as listen address[:port] instead of
               filesystem path

  (Christian Jaeger <$email>)
";
exit (@_ ? 1 : 0);
}

use Getopt::Long;
our $verbose=0;
our $DEBUG;
our $umask;
our $opt_accept_arguments;
our $opt_sleeptime;
our $opt_no_wait;
our $opt_inet;
GetOptions("verbose"=> \$verbose,
	   "help"=> sub{usage},
	   "sleeptime=s"=> \$opt_sleeptime,
	   "debug"=> \$DEBUG,
	   "umask=s"=> \$umask,
	   "accept-arguments"=>\$opt_accept_arguments,
	   "no-wait"=>\$opt_no_wait,
	   "inet"=>\$opt_inet,
	   ) or exit 1;
usage unless @ARGV >= 2;

our $socketpath= shift @ARGV;
our @cmd= @ARGV;
if ($opt_accept_arguments and $opt_sleeptime) {
    usage "--accept-arguments is incompatible with --sleep"
}

$sleeptime= $opt_sleeptime if defined $opt_sleeptime;

our $IO_Socket_class=
  $opt_inet ? "IO::Socket::INET" : "IO::Socket::UNIX";

load $IO_Socket_class; import $IO_Socket_class;

my $maybe_old_umask;
if (defined $umask) {
    $maybe_old_umask= umask;
    umask oct($umask)
	# 'umask' never fails, returns the previous umask even when
	# setting!!
}

unlink $socketpath #okay?  check for running daemons...
  unless $opt_inet;
our $socket= $IO_Socket_class->new
  (
   Type=> &SOCK_STREAM,
   $opt_inet ? (LocalAddr=> $socketpath) : (Local=> $socketpath),
   $opt_inet ? (Proto=> "tcp") : (),
   #:
   (Listen=> 1), # (for INET Listen means queue size, for UNIX it's boolean? or not?)
   $opt_inet ? (ReuseAddr=> 1) : (),
  )
  or die "opening socket '$socketpath': $!";#!

if (defined $maybe_old_umask) {
    umask ($maybe_old_umask);
}

# XX interesting I don't implement xsystem in terms of exec, uh?
sub myxsystem {
    if (my $pid= xfork) {
	my $res= waitpid $pid, 0;
	if ($res<0) {
	    die "waitpid($pid): $!"
	} else {
	    "$?"
	}
    } else {
	xexec @_
    }
}

sub xrun_ {
    my $dowait=shift;
    if ($verbose) {
	$|++;
	print "running ".join(" ",map { singlequote_sh $_ } @_)."\n";
    }
    if ($opt_no_wait and ! $dowait) {
	"pid: ".xlaunch @_;
    } else {
	"exitvalue: ".(myxsystem @_);
    }
}

my $numchildren=0;

my $runner_child=-2;

$SIG{CHLD}= do {
    my $pid;
    sub {
	while (1) {
	    $pid= waitpid -1,WNOHANG;
	    last if (($pid == -1) or ($pid == 0)); # mis-documented?
	    $numchildren--;
	    if ($pid == $runner_child) {
		die "runner_child died";
	    }
	}
    }
};

# handler which is not lossy (as I thought), but just does stuff once,
# being triggered, and has a call frequency limit:

sub start_triggered_handler () {
    if ($runner_child= xfork) {
	# sender:
	sub {
	    my ($_msg)=@_;
	    if (kill "USR1", $runner_child) {
		warn "$$ sent signal to runner_child" if $DEBUG;
		"signalled\n"
	    } else {
		#  currently just die since we don't restart the runner_child
		die "$myname ($$): could not send signal to runner_child: $!";
	    }
	}
    } else {
	my $flag=0;
	$SIG{USR1}= sub {
	    warn "runner_child got signal" if $DEBUG;
	    $flag=1;
	};
	delete $SIG{CHLD};
	while (1) {
	    # use both interruptible and uninterruptible sleeps
	    sleep 100000;
	    if ($flag) {
	      RUNIT: {
		    warn "runner_child got request to run command" if $DEBUG;
		    uninterrupted_sleep $sleeptime;
		    warn "runner_child going to run command now" if $DEBUG;
		    $flag=0;
		    my $res= xrun_ undef, @cmd;
		    # XX: print if there was a problem?
		    if ($flag) {
			# received another signal while it was running
			# (or launched)
			redo RUNIT;
		    }
		}
	    } else {
		warn "(runner_child: sleep timed out)" if $DEBUG;
	    }
	}
    }
}

# handler which is just serial, but runs as many times as 'signalled',
# without frequency limit, but also can handle arguments:

sub start_piped_handler () {
    my ($in,$send)=xpipe;
    my ($recv, $out)= xpipe;
    if ($runner_child= xfork) {
	$in->xclose;
	$out->xclose;
	# sender:
	sub {
	    my ($msg)=@_;
	    # msg does not end in newline anymore
	    $send->xprint($msg,"\n");
	    $send->xflush;
	    warn "$$ passed on message to runner_child" if $DEBUG;
	    scalar <$recv>
	}
    } else {
	$send->xclose;
	$recv->xclose;
	delete $SIG{CHLD};
	# ^ !!, otherwise $? used in xrun_ will be clobbered (-1). Is
	# this a Perl design issue? !
	while (<$in>) {
	    chomp;
	    if (my $dowait_args= maybe_parsemsg ($_)) {
		warn "runner_child got request to run command" if $DEBUG;
		my ($dowait, $args)= @$dowait_args;
		$out->xprint(xrun_($dowait, @cmd, @$args)."\n");
		$out->xflush;
	    } else {
		die "piped_handler: got strange message '$_'";
	    }
	}
	exit 1;
    }
}

sub maybe_parsemsg ($) { # return [$do_wait, [values..]], or false on failure
    my ($str)=@_;
    $str=~ s/trigger $protocol_version://
      or return;
    $str=~ s/^([01])://
      or return;
    my ($do_wait) = $1;
    my @args=
      map {
	  parse_schemestring($_)
      } split /\t/, $str;
    #^ XX parse failures here? undef?

    if (@args) {
	if ($opt_accept_arguments) {
	    [ $do_wait, \@args ]
	} else {
	    undef
	}
    } else {
	[ $do_wait, \@args ]
    }
}


# --- main ----------------------------

our $pass_to_handler=
  $opt_accept_arguments ?
  start_piped_handler
  : start_triggered_handler;


eval {
    while(1) {
	my $conn= $socket->accept
	  or do {
	      if ($! == 4) {# XX get constant from POSIX
		  # OS error code   4:  Interrupted system call
		  redo
	      } else {
		  die "accept: $!";
	      }
	  };
	warn "got a connection from ".$conn->peername if $DEBUG;
	# ^ XX convert to a human-readable format

	if ($numchildren < $maxchildren) {
	    if (my $pid= xfork) {
		undef $conn;
		warn "forked off child $pid" if $DEBUG;
		$numchildren++;
		# ^ XX race (in the ++ itself)?
	    } else {
		while (<$conn>) {
		    chomp;
		    # XX parse a first time just for error-checking?
		    if (maybe_parsemsg($_)) {
			warn "$$ got trigger" if $DEBUG;
			$conn->send(&$pass_to_handler($_))
			  or warn "$myname: $$ could not send ok back to sender: $!";
			# (the ok does not mean that the cmd has been
			# run successfully or already in any way)
			warn "$$ sent ok back to trigger-send" if $DEBUG;
		    } else {
			warn "$$ got unrecognized message '$_'" if $DEBUG;
			$conn->send("unrecognized message (need --accept-arguments?)\n")
			  or warn "$myname: $$ could not send ok back to sender: $!";
		    }
		}
		exit 0;
	    }
	} else {
	    warn "$myname: too many children, dropping connection\n";
	    # XX from ...
	}
	warn "going to accept again" if $DEBUG;
    }
};
my $e=$@;
kill 9, $runner_child;
die $e;

#use Chj::ruse;
#use Chj::Backtrace; use Chj::repl; repl;
