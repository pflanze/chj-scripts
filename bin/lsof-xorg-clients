#!/usr/bin/perl -w

# Wed Apr  7 20:38:50 EDT 2010
(my $email='XXX%YYY,ch')=~ tr/%,/@./;

use strict;

$0=~ /(.*?)([^\/]+)\z/s or die "?";
my ($mydir, $myname)=($1,$2);
sub usage {
    print STDERR map{"$_\n"} @_ if @_;
    print "$myname [-s]

  NOTE: makes the probably fickle/ill-suited assumption that the
  server side end of a unix domain socket has inode number one higher
  than the client side end. (But, no other way found to get to the
  connection.)

  Options:
  -s|--sort  sort
             (well, the main intention is, to group, but yeah it is
             also sorted by group then)
             by username

  (Christian Jaeger <$email>)
";
exit (@_ ? 1 : 0);
}

use Getopt::Long;
our $verbose=0;
our $opt_sort;
#our $opt_dry;
GetOptions("verbose"=> \$verbose,
	   "help"=> sub{usage},
	   "sort" => \$opt_sort,
	   #"dry-run"=> \$opt_dry,
	   ) or exit 1;
usage if @ARGV;

use Chj::IO::Command;

my $in= Chj::IO::Command->new_sender("lsof","-Un");

#our $by_inode={};
our @records;
our $is_xorginode={};
while (<$in>) {
    #chomp;
    #if (my ($inode)=/unix 0x\S+\s+(\d+)\ssocket/) {
    #heh die xorg ones sind mostly not. client vs server i guess hahahawow.
    #XX: SOLLTE ICH DIES als kriterium fuer  is_xorginode nehmen  also  is_xorgserver_inode weisch ?.
    if (my ($inode)=/unix 0x\S+\s+(?:0t0\s+)?(\d+)\s/) {
	#push @{$$by_inode{$inode}}, $_;
	push @records, [$inode, $_];
	if (/^Xorg\s/) {
	    $$is_xorginode{$inode}=1  #olde die wennschongeseztoderso wl or not wsm
	}
    } else {
	/^COMMAND/ or warn "no match in line: $_"
    }
}
$in->xxfinish;

#for my $key (keys %$b)

my @output= map {
    my ($inode, $line)=@$_;
    if ($$is_xorginode{$inode+1}) {
	$line
    } else {
	()
    }
}(@records);



for my $line (do {
    if ($opt_sort) {
	(
	 map {
	     $$_[1]
	 }
	 sort { $$a[0] cmp $$b[0] }
	 map {
	     if (m{.*\s+\d+\s+(\S+)\s+\d+u\s+unix\s+0x\S+\s+(?:0t0\s+)?\d+\s+(?:/tmp/\.X11\S+|socket)\s*\z}) {
		 [
		  $1,
		  $_
		 ]
	     } else {
		 warn "no match: '$_'";
		 ()
	     }
	 }
	 @output
	)
    } else {
	@output
    }
}) {
    print $line
      or die;
}


#use Chj::ruse;
#use Chj::Backtrace; use Chj::repl; repl;
