#!/usr/bin/perl -w

# Wed Aug  6 00:12:55 CEST 2008
(my $email='XXX%YYY,ch')=~ tr/%,/@./;

use strict;

$0=~ /(.*?)([^\/]+)\z/s or die "?";
my ($mydir, $myname)=($1,$2);
sub usage {
    print STDERR map{"$_\n"} @_ if @_;
    print "$myname ..

  (Christian Jaeger <$email>)
";
exit (@_ ? 1 : 0);
}

if(0){
use Getopt::Long;
our $verbose=0;
GetOptions("verbose"=> \$verbose,
	   "help"=> sub{usage},
	   ) or exit 1;
#usage unless @ARGV;
}

use Chj::IO::Command;
$ENV{LESSCHARSET}="latin1";
my $less= Chj::IO::Command->new_receiver("less",#"-R"
					);
$less->xprint( <<'END');
Für den Moment nur Hinweise:

$ git remote add -f ${Bproject} ${/path/to/B}
#            With -f option, git fetch <name> is run immediately after
#            the remote information is set up.

$ git merge -s ours --no-commit ${Bproject}/master
#        ours
#            This resolves any number of heads, but the result of the
#            merge is always the current branch head. It is meant to be
#            used to supersede old development history of side branches.
#also ist es jetzt im index, right.?. oder im working dir? nein index scheint
# -> "Automatic merge went well; stopped before committing as requested"
#git-status zeigt immer noch nichts. ah eben es wird im branch gespeichert?
#git-branch -av zeigt aber nichts.

#       git-read-tree - Reads tree information into the index
#hm welchen index?? wenn hier ein branch angegeben wird ? umgekehrt??
#aha,von git db into index. nix working tree.
#ok hier wird ebenfalls in den index dies gelesen.
$ git read-tree --prefix=${dir-B/} -u ${Bproject}/master
#        --prefix=<prefix>/
#            Keep the current index contents, and read the contents of
#            named tree-ish under directory at <prefix>. The original
#            index file cannot have anything at the path <prefix>
#            itself, and have nothing in <prefix>/ directory. Note that
#            the <prefix>/ value must end with a slash.
#        -u
#            After a successful merge, update the files in the work tree
#            with the result of the merge.
# -> silent.
# -> git-status *zeigt jetzt das neue file an*, wenn nicht ging was schief.
#    z.B. --prefix=. (wenn cwd=${dir-B}) geht NICHT! ?
#    (evtl. fehlte aber nur der endslash? war es ev wirklich ein .* file,
#    ev. im top dir? Und nicht gesehen.)


#wohin wird das committet? wenn doch nach her pull, ok aus master? ?
$ git commit -m "Merge B project as our subdirectory"
#im editor kommt er mit "Merge commit '${Bproject}/master'"
#und Anzeige:
# It looks like you may be committing a MERGE.
# If this is not correct, please remove the file
#       .git/MERGE_HEAD
#dort wird das also gespeichert. und von git-status nicht gezeigt.?
# -> git-status zeigt wieder clean,
#    git-branch zeigt *master mit neuer commit message,
#    die Datei ist immer noch dort,
#    git-log --raw  zeigt aber keine Datei an.
#  Der commit hat immer noch die beiden originalen commit id's: ah das erlaubt
#  git dann später zu mergen vom originalen Ort (rename on the fly).

#[
$ git pull -s subtree ${Bproject} master
#       git-pull <options> <repository> <refspec>...
#also wie ${Bproject}/master ??.oder?.warum hier getrennt? (git-merge ist
#ja auch nicht so)
#        subtree
#            This is a modified recursive strategy. When merging trees A
#            and B, if B corresponds to a subtree of A, B is first
#            adjusted to match the tree structure of A, instead of
#            reading the trees at the same level. This adjustment is
#            also done to the common ancestor tree.
# -> zeigt "From ${/path/to/B}
#           * branch            master     -> FETCH_HEAD
#           Already up-to-date."
#klar, vermutlich eben nur bei 'upstream' changes.
#]

#bleibt unklarheit warum man im commit keine files sieht mit git-log --raw.
#mit git version 1.5.6.1.2.g5fa3
#mit 1.5.6.GIT ebenfalls; gitk aber, ja wie letztesmal, zeigt brauchbare sachen
#an. (sogar patch für adden am neuen ort, obwohl einer der parent commits
#ja das file schon hat, dieses removing zeigt es nid, nja is bissel
#eigenartig.)

[
Danach removen des remotes:
 hm? (just git remote rm?)
]

END

#hmm wie ich das in git-svn rein krieg ?  muss dort dann faken und
# jeden Pfad rückwirkend schon in jenes Directory schieben, gell?
# weil sonst würd es auftauchen in einem Verzeichnis (toplevel) wo
# andre sachen sind, gell.

#use Chj::ruse;
#use Chj::Backtrace; use Chj::repl; repl;
