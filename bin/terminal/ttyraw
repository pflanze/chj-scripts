#!/usr/bin/perl -w

# Copyright 2003-2004,2015 by Christian Jaeger, ch at christianjaeger ch
# Published under the same terms as Perl itself.

# wrote Chj::Unix::Terminal::Raw now

use strict;

$0=~ /([^\/]+)$/s or die "?";
my $myname=$1;
sub usage {
    print STDERR map{"$_\n"} @_ if @_;
    print "$myname [ -e ] command [ arguments ]
  Set the current tty to raw mode and executes the given command.
  With option -e, an exec is done, without it, it waits for the
  command to return and then sets the terminal back to cooked mode.
";
exit @_ ? 1 : 0;
}

my @files;
my $DEBUG=0;
my $opt_e;
for (my $i=0; $i<=$#ARGV; $i++) {
    local $_=$ARGV[$i];
    if (/^--?h(elp)?$/) {
    	usage
    } elsif ($_ eq '--') {
    	push @files, @ARGV[$i+1..$#ARGV];
    	last;
    } elsif (/^--?e(xec)?$/) {
	$opt_e=1;
    } elsif (/^--?d(ebug)?$/) {
	$DEBUG=1;
    } elsif (/^-/) {
    	warn "Unknown option '$_'\n";
    	usage(1)
    } else {
    	#push @files, $_
	# push all the rest.
	push @files, @ARGV[$i..$#ARGV];
	last;
    }
}
usage unless @files;

use POSIX qw(:termios_h);

my $fd_stdin = fileno(STDIN);
my $term     = POSIX::Termios->new();
$term->getattr($fd_stdin);
my $oterm     = $term->getlflag();

my $echo     = ECHO | ECHOK | ICANON;
my $noecho   = $oterm & ~$echo;

sub cbreak {
    $term->setlflag($noecho);
    $term->setcc(VTIME, 1);
    $term->setattr($fd_stdin, TCSANOW);
}
sub cooked {
    $term->setlflag($oterm);
    $term->setcc(VTIME, 0);
    $term->setattr($fd_stdin, TCSANOW);
}

cbreak;

END {
    cooked if $term; # reset it if exec fails.
}

if ($opt_e) {
    exec {$files[0]} @files;
    exit 1; # !
}else {
    (system {$files[0]} @files) >=0
      or exit 1;
    exit $?/256;
}

