#!/usr/bin/perl -w

# Wed 13 Dec 15:39:23 GMT 2017
(my $email='ch%christianjaeger,ch')=~ tr/%,/@./;

use strict; use warnings FATAL => 'uninitialized';

my $max_deletions= 100;

my $blocksize= 512; # was true on ext3 (or reiserfs?), seems to still
                    # be true on ext4

my $empty_file_overhead= 120; # B, on ext4, rough extimate, basically
                              # just for the path; blcks from stat
                              # returns 0 for these (because it's in
                              # the dir?)

my $check_overhead= 1;
my $paranoid=1;


$0=~ /(.*?)([^\/]+)\z/s or die "?";
my ($mydir, $myname)=($1,$2);
sub usage {
    print STDERR map{"$_\n"} @_ if @_;
    print "$myname dirpath [options]

  Options:

    --quota x
    --quotum x
          bring space usage of the contents of dirpath to below x
          bytes.

    --max-deletions n
          do not unlink more than n files in one call
          (default: $max_deletions)

    --check-overhead
          consider the storage overhead, too (might not work reliably
          on all filesystems) (default)
    --no-check-overhead
          only consider the file size (content length)
    --paranoid
          (default.) Check whether the size in blocks as reported by
          stat looks sensible compared to the size in bytes (the risk
          is that it gets the blocksize wrong) and die if inconsistent.
          Note that the check fails for files with holes.
    --no-paranoid
          Turn off the paranoid check, i.e. make work with files with
          holes. This is known to work on (normal) ext3 and ext4
          filesystems, be careful with other file systems.

    --smallest-first
          of all the files with the same mtime, choose the smallest
          files to satisfy deletion requirements instead of the
          default policy of deleting the biggest first.

    --hires
          enable reading hi-res timestamps (depends on Inline C and
          needs a compilation toolchain the first time it's used)

  Number suffixes: any byte based number above can have a 'K', 'Ki',
  'M', 'Mi', 'G', 'Gi' suffix, and is additionally allowed to end in
  'B'. (FUTURE: allow '%' instead of 'B'?)

  (Christian Jaeger <$email>)
";
exit (@_ ? 1 : 0);
}


use Chj::TEST;

my %KMGi=
    (K=> 1000,
     Ki=> 1024,
     M=> 1000*1000,
     Mi=> 1024*1024,
     G=> 1000*1000*1000,
     Gi=> 1024*1024*1024);

sub parse_quotum ($) {
    my ($str)=@_;
    my ($x, $KMG, $i, $B)=
      $str=~ /^(\d+(?:\.\d+)?) *(?:([KMG])(i)?)? *(B)? *\z/
	or die "parse_quotum: no match for '$str'";
    my $fact= do {
	if (defined $KMG) {
	    $i //="";
	    $KMGi{"$KMG$i"}
	      or die "parse_quotum: unknown quantifier '$KMG$i' in: '$str'";
	} else {
	    1
	}
    };
    $x * $fact
}

TEST { parse_quotum "2 B" } 2;
TEST { parse_quotum "2 KB" } 2000;
TEST { parse_quotum "2Ki" } 2048;
TEST { parse_quotum "2 GB " } 2000000000;


{
    package __makespace__::Item;
    sub new {
	my $cl=shift;
	# name, size, mtime
	bless [@_], $cl
    }
    sub name { $_[0][0] }
    sub size { $_[0][1] }
    sub mtime { $_[0][2] }
}

{
    package __makespace__::Spacecounter;

    # keep state of files that might need to be removed.

    sub new {
	my $cl=shift;
	my $args= {@_};
	bless +{
		max_deletions=> $$args{max_deletions},
		quotum=> $$args{quotum},
		totbytes=> 0,
		#newest_mtime=> undef,
		candidates=> [], # of Item
	       }, $cl
    }

    sub add {
	my ($s, $Item)=@_;
	my $size= $Item->size;
	$$s{totbytes} += $size;
	# actually add all items as candidates
	push @{$$s{candidates}}, $Item;
    }

    sub items_to_remove {
	my ($s)=@_;
	my $totbytes= $$s{totbytes};
	my $quotum= $$s{quotum};
	if ($totbytes <= $quotum) {
	    []
	} else {
	    my @sorted_candidates= sort {
		(($a->mtime <=> $b->mtime) # oldest first
		 ||
		 ($$s{smallest_first} ?
		  ($a->size <=> $b->size)
		  :
		  ($b->size <=> $a->size))
		 ||
		 ($a->name cmp $b->name))
	    } @{$$s{candidates}};

	    my @remove;
	    my $i=0;
	    while (($i < @sorted_candidates)
		   and
		   ($i < $max_deletions)
		   and
		   ($totbytes > $quotum)) {
		my $Item= $sorted_candidates[$i++];
		push @remove, $Item;
		$totbytes-= $Item->size;
	    }
	    \@remove
	}
    }
}

{
    package __makespace__::Scanner;
    use Chj::xperlfunc ":all";
    use Chj::xopendir;

    sub new {
	my $cl=shift;
	bless
	  +{
	    # fields: counter
	    @_
	   }, $cl
    }

    sub scandir {
	my ($s, $path)=@_;
	my $d= xopendir $path;
	while (defined (my $item= $d->xnread)) {
	    my $path2= "$path/$item";
	    local $Chj::xperlfunc::time_hires= 1 if $$s{hires};
	    my $st= xlstat $path2;
	    if ($st->is_dir) {
		# NOTE: we do not currently remove empty dirs; should
		# this maintain dirs once that functionality is
		# needed?
		# XX: should we add 'blocks' from dirs?
		$s->scandir($path2);
	    } elsif ($st->is_file) {
		my $size= $st->size;
		my $effective_size= $check_overhead ? do {
		    my $size_used = $st->blocks * $blocksize;
		    if ($size == 0) {
			# check for $size_used == 0 ? or simply trust:
			# (XX assumes ext4 or similar)
			$empty_file_overhead
		    } else {
			if ($paranoid) {
			    my $size_used_looks_sane= ($size_used >= $size) && do {
				if ($size < 50000) {
				    (($size_used - $size) < 6000)
				} else {
				    # a 50 KB file has ~4000 B of
				    # overhead (1.08); play it safe.
				    ($size_used / $size <= 1.2)
				}
			    };

			    if ($size_used_looks_sane) {
				# add $empty_file_overhead here as well to
				# avoid non-empty files being deleted before
				# empty ones
				$size_used + $empty_file_overhead
			    } else {
				die "$myname: unsanely looking file overhead for '$path2'; use --no-paranoid if this is because of a file with holes and you trust the blocksize to really be $blocksize\n";
			    }
			} else {
			    $size_used + $empty_file_overhead
			}
		    }
		} : $size;
		$$s{counter}->add
		  (__makespace__::Item->new
		   ($path2, $effective_size, $st->mtime));
	    }
	}
	$d->xclose;
    }
}



use Getopt::Long;
our $verbose=0;
our $maybe_quotum_bytes;
our $opt_smallest_first;
our $opt_dry;
our $opt_hires=0;
GetOptions("verbose"=> \$verbose,
	   "help"=> sub{usage},
	   "quotum=s"=> sub {
	       $maybe_quotum_bytes= parse_quotum($_[1])
	   },
	   "quota=s"=> sub {
	       $maybe_quotum_bytes= parse_quotum($_[1])
	   },
	   "max-deletions=n"=> \$max_deletions,
	   "check-overhead"=> sub { $check_overhead = 1 },
	   "no-check-overhead"=> sub { $check_overhead = 0 },
	   "paranoid"=> sub { $paranoid = 1 },
	   "no-paranoid"=> sub { $paranoid = 0 },
	   "smallest-first"=> \$opt_smallest_first,
	   "hires"=> \$opt_hires,
	   "dry-run"=> \$opt_dry,
	   "run-tests"=> sub { Chj::TEST::run_tests "main"; exit },
	   ) or exit 1;
usage unless @ARGV;

my ($dirpath)=@ARGV;


if (defined $maybe_quotum_bytes) {
    my $quotum_bytes= $maybe_quotum_bytes;

    my $counter= __makespace__::Spacecounter->new
      (max_deletions=> $max_deletions,
       quotum=> $quotum_bytes,
       smallest_first=> $opt_smallest_first);

    my $scanner= __makespace__::Scanner->new
      (counter=> $counter, hires=> $opt_hires);

    $scanner->scandir($dirpath);

    for my $Item (@{$counter->items_to_remove}) {
	my $path= $Item->name;
	if ($opt_dry) {
	    print "$path\n";
	} else {
	    unlink $path
	      or warn "could not unlink '$path': $!";
	    if ($verbose) {
		print "unlinked '$path'\n";
	    }
	}
    }

} else {
    usage "currently only works with --quotum"
}

#use Chj::Backtrace; use Chj::repl; repl;
