#!/usr/bin/perl -w

# Mon Apr 27 15:33:14 EDT 2009
(my $email='XXX%YYY,ch')=~ tr/%,/@./;

use strict;

# how much older the next-older entry can be to still be automatically mounted
our $auto_max_delay= 1; #seconds
our $pwlookup="/root/.mounte-pwlookup";

$0=~ /(.*?)([^\/]+)\z/s or die "?";
my ($mydir, $myname)=($1,$2);
sub usage {
    print STDERR map{"$_\n"} @_ if @_;
    print "$myname --auto|device(s)|mountpoint(s)

  Automatically turns the device path into a mount path and mounts the
  device on that path. Errors out when something is mounted on the
  choosen path already.

  Or, if a mount point is given instead, is looking for it's basename
  as device mapper name or device name or /dev/disk/by-uuid/ entry, or
  for symlinks pointing to it and checking them the same way to find
  the device to be mounted there and mounts it when found, or if that
  fails, looks up the same strings in /dev/disk/by-id/ (hm (todo?)
  actually looks up not in the very end now but somewhere inbetween?).

  Automatically uses -o loop if the 'device' path is a regular file
  (except 'of course' not when the regular file isn't the file being
  passed to mount anymore, i.e. because of a crypt layer)

  If encrypted, luksOpens the volume; if $pwlookup exists, runs it
  with the device as key, and, if successful, use its stdout (after
  chomp) as password (if it returns exit code 2, retry incrementally
  with parts after _ or . removed), otherwise let cryptsetup ask.

  Options:
  -c|--create-dir  create mount path [if it doesn't exist already]
  --private create mount path as \$dest_path/mnt/ subdirectory and
            create \$dest_path with 0700 permissions. If mount path
            already exists, require it to have a mnt/ subdirectory
            (and use that, which will be done anyway, but with
            --private it fails if that directory doesn't exist) [and
            check the parent dir for 0700 perms? well no for now]
  --ro|--readonly
  [--noatime wll use as default anyway ok?]
  [--nosuid wll use as default anyway ok?]
  [--nodev wll use as default anyway ok?]
  --auto    mount the latest entries in /dev/disk/by-uuid/
            (going backward from the latest and stopping when an entry
            is more than $auto_max_delay second(s) younger)
  -t type   passed on to mount, instead of (possibly failing) auto
            detection
  -o option(,..)  options to be passed through to mount; can appear
            multiple times. (There is no way to disable an option once
            it has been issued.)

  Notes:
  - if available, automatically uses the uuid of partitions as luks dev
    mapper names and mount points
  - tip: after having mounted easily a partition:
     umount /mnt/\$uuid
     cd /mnt
     mv \$uuid \$what_you_want_to_see_in_mount_tab
     ln -s \$what_you_want_to_see_in_mount_tab \$uuid

  (Christian Jaeger <$email>)
";
exit (@_ ? 1 : 0);
}

use Getopt::Long;
our $verbose=0;
our $debug;
#our @mountoptions=(); ehr no,
our $mountoptions=
  +{
    noatime => 1,
    nosuid => 1,
    nodev=> 1,
   };
our $opt_createdir;
our $opt_private;
our $opt_auto;
our $opt_type;
our $opt_o="";
GetOptions("verbose"=> \$verbose,
	   "debug"=> \$debug,
	   "help"=> sub{usage},
	   "ro|readonly"=> sub {
	       $$mountoptions{ro}=1;
	   },
	   "noatime"=> sub {
	       $$mountoptions{noatime}=1;
	   },
	   "nosuid"=> sub {
	       $$mountoptions{nosuid}=1;
	   },
	   "nodev"=> sub {
	       $$mountoptions{nodev}=1;
	   },
	   "c|create-dir"=> \$opt_createdir,
	   "private"=> \$opt_private,
	   "auto"=> \$opt_auto,
	   "t=s"=> \$opt_type,
	   "o=s"=> sub { # allow multiple -o calls?
	       my ($key,$val)=@_;
	       $opt_o.=",".$val
	   },
	  ) or exit 1;

use Chj::Unix::Mount 'mounted','mount';
use Chj::xperlfunc ":all";# qw(xmkdir basename dirname xstat xxsystem);
use Chj::FP::lazy;
use Chj::FP::ArrayUtil 'array_every';

sub mydie { #forever
    die "$myname: @_\n";#hm or join  ?.  a forever-*question*
}

sub Warn;
*Warn =
  ($debug ?
   sub {
       my ($package, $filename, $line) = caller;
       print STDERR "@_ at $filename line $line\n";
   }
   : sub {
   });

sub Cluck;
*Cluck =
  ($debug ?
   do {
       require Carp;
       \&Carp::cluck;
   }
   : sub {
   });

for my $o (split /,/, $opt_o) {
    next if $o eq '';
    die "-o value contains whitespace: '$o'"
      if $o=~ /\s/;
    $$mountoptions{$o}++;
}


use Chj::xrealpath;
use Chj::xopendir;
#sub dev_to_maybe_
sub maybe_uuid_from_dev {
    my ($devpath)=@_;
    my $search= xrealpath $devpath;
    my $base= "/dev/disk/by-uuid";
    my $d= xopendir $base;
    # local chdir wl. wt gmb provides. eben manuell dieses machen hier.
    while (defined (my$item=$d->xnread)) {
	my $found= xrealpath "$base/$item";
	if ($found eq $search) {
	    return $item
	}
    }
    $d->xclose;
    undef
}

our $lookup = sub {
    my ($name)=@_;
    Cluck "lookup '$name'";
    my $l=sub {
	my ($path)=@_;
	Warn "path '$path'";
	if (my $s= Xstat $path) {
	    if ($s->is_file or $s->is_blockdevice) {
		$path
	    } else {
		undef
		  #und ja da is schm lisp #f besser.wlehlngweis
	    }
	} else {
	    Warn "undef";
	    undef
	}
    };
    (&$l ("/dev/mapper/$name")
     or &$l ("/dev/$name")
     or &$l ("/dev/disk/by-uuid/$name")
     or &$l ("/dev/disk/by-id/$name")
    )
};

sub maybe_dev_from_mnt {
    my ($mntpath)=@_;

    #ps.  bei mapper  wenn futsch  auchweiterzurueck?  ps DAHER nicht namenswechselmachen??? "!".

    my $symlinknames= sub {
	# search for symlinks: #h lazily dann koent ich anfangs.gl.!.evenio.
	my $dir= dirname $mntpath;
	my $expandedorig= xrealpath $mntpath;
	Warn "dir '$dir'";
	my $d= xopendir $dir;
	#[and yes is this procedure similar to the one with reading dirs above.]
	my @names;
	while (defined (my$item=$d->xnread)) {
	    my $path= "$dir/$item";
	    #my $s= xlstat ($path);
	    #if ($s->)
	    if (-l $path and -e $path) {
		# resolve target hm. and should it be direct or not ?
		Cluck "path='$path'";
		my $expanded= xrealpath $path; # X  ?. ##
		#^'expanded' in language terms.
		if ($expanded eq $expandedorig) {
		    push @names, $item;
		}
	    }
	}
	$d->xclose;
	@names;
    };

    (&$lookup (basename $mntpath)
     or do{ # ach dann doch lazy actually want ing  &$lookup ()
	 # ormap. ich mein ein or list eins wo abbricht eben und lazily consume wuerd tj
	 # und auto turnthisway.h.  generatecodefromdescription frage nur welcher art description  j hh  koeme man darauf ? .
	 #matter of outsmarting them.
	 #(niederschrift in code)wlhaha
	 #nun just mit map und leerenwertenhier dann firstnehmso.tj.ignoredaslz.  wl filter map.
	 (
	  grep {
	      defined $_
	  }
	  map {
	      &$lookup($_)
	  } &$symlinknames()
	 )[0]
     })
}

use Chj::IO::Command;

#sub xxbacktick {##once more ~
#ehr actually:  and hm multivalreturnnow 'hheh'x
#wl vs multi verschiedene typen weisch echt immer !!! in diesen fällen ist immer das zweite meaningless!  ich mein: das andre. das *jeweils* andere! jw!
#((plainoldePerl6 hicktighchmeinheh))
# und jo man wuerde requirement 2 wollenechtmensch ach  hask kanneven ach   .
sub xbacktick {
    my $in= Chj::IO::Command->new_sender(@_);
    my $cnt= $in->xcontent;
    my $res= $in->xfinish;
    ($res, $cnt)
}

sub try_file {
    # do not throw exception on error, but return an error (not false in perl5..)
    # well why not the tuple case. boolean   there  still.
    # hm.   (vs multiple cont vs x..)
    my ($devpath)=@_;
    # could also be file. no problem.
  WAIT: {
	for (1..10) {
	    last WAIT if -e $devpath;
	    sleep 1;
	}
	die "timed out waiting for '$devpath' to appear";
    }
    my $devrealpath= xrealpath $devpath; # to resolve symlinks
    my $in= Chj::IO::Command->new_sender
      ("file","--brief","--dereference","--special-files",$devrealpath);
    my $cnt= $in->xcontent;
    my $res= $in->xfinish;
    $cnt=~ s/^sticky *//; # http://lists.debian.org/debian-user/2012/02/msg01273.html
    ($res==0,$cnt)
}

sub maybe_luks { # not just is_luks. ok?. I mean: give luks details if luks.
    my ($devpath)=@_;
    my ($ok,$cnt)= try_file $devpath;
    if ($ok) {
	if ($cnt=~ /^LUKS encrypted/) {
	    $cnt
	} else {
	    undef
	}
    } else {
	die "error checking '$devpath': $cnt";
    }
}

sub is_uuiddev ( $ ) {
    my ($str)=@_;
    $str=~ m |/dev/.*by-uuid/|
}

use Chj::xperlfunc;


{
    package mounte::DevicePath;
    # field 0: origpath
    # field 1: overridden device path
    sub origpath {
	my $s=shift;
	$$s[0]
    }
    sub devicepath {
	my $s=shift;
	$$s[1] // $$s[0]
    }
    sub set_devicepath {
	my $s=shift;
	($$s[1])=@_;
    }
}

{
    package mounte::File;
    our @ISA= 'mounte::DevicePath';
    # field 2: loop file path
    use Chj::xperlfunc;

    sub devicepath {
	my $s=shift;
	$$s[1] // do {
	    $$s[2] //= do {
		my $c= Chj::IO::Command->new_sender
		  ("losetup", "-f", "--show", "--", $$s[0]);
		my $p= $c->xcontent;
		$c->xxfinish;
		chomp $p;
		print "using loop device: '$p'\n";# to stderr? xprint ?
		$p
	    }
	}
    }
    sub DESTROY {
	my $s=shift;
	if (defined $$s[2]) {
	    #unlink $$s[2]; ehr.
	    xsystem "losetup", "-d", $$s[2];
	    undef $$s[2]
	}
    }
}

{
    package mounte::Devicefile;
    our @ISA= 'mounte::DevicePath';
}


sub mount_easily {
    my ($path, $verbosevolume, $ignore_if_mountpoint_missing)=@_;
    my $device_fileinfo;
    if ($verbosevolume) {
	print "mounting '$path'..\n";
    }

    # make copy so that modifications aren't carried over to
    # subsequent calls of mount_easily
    my $mountoptions= +{%$mountoptions};

    my $device_path;
    my $dest_path;

    # check whether we need -o loop: (safe enough?hopeso)
    {
	my $s= xstat $path;
	if ($s->is_file) {#hm is_regular ?
	    $$mountoptions{loop}= 1;
	    # What about resolving it ourselves, since only this way
	    # we can run fsck on loop files!! D'oh. Ah but want mount
	    # to do it for recording it properly for umount ? =>
	    # instead do it before the fsck, gah.
	    $device_path= bless [$path], "mounte::File";

	    # check if file is chmod a-w, take this as a hint that the
	    # image should always be mounted read-only
	    if (array_every
		(sub {
		     my ($method)=@_;
		     my $v= $s->$method;
		     not ($v & 2)  # not writable
		 },
		 [qw(permissions_u permissions_g permissions_o)])) {
		if ($$mountoptions{ro}) {
		    print "image file is read-only, 'ro' flag given already\n";
		} else {
		    print "image file is read-only, thus adding ro flag\n";
		    $$mountoptions{ro}=1;
		}
	    }
	} elsif ($s->is_blockdevice) {
	    $device_path= bless [$path], "mounte::Devicefile";
	    delete $$mountoptions{loop} # =0 is not enough if I'm taking keys..
	} elsif ($s->is_dir) {
	    if (my $dev= maybe_dev_from_mnt $path) {
		$device_path= bless [$dev], "mounte::Devicefile";
		$dest_path= $path; #hm what in the case of mapper?
	    } else {
		die "could not find device to mount on '$path'";
	    }
	} else {
	    die "hm?, file '$path' is neither block device nor regular file nor directory"
	}
    }

    my $id_= Delay {
	my $maybe_uuid= maybe_uuid_from_dev($device_path->origpath); # XX correct?
	defined($maybe_uuid)? $maybe_uuid : basename ($device_path->origpath); # XX
    };

    ##(BUG: should be recursive instead of only one deep)
    if (my $luks= maybe_luks ($device_path->origpath)) { # XX correct?
	print $luks;
	my $maybe_pw= do {
	    # use device_path *before* having been set to losetup -fs output below!
	    if (-x $pwlookup) {
		my $lookup; $lookup= sub {
		    my ($key,$next)=@_;
		    if (defined $key) {
			print "trying lookup for '$key'\n"
			  if $verbose;
			my ($res,$cnt)= xbacktick $pwlookup, $key;
			if ($res==0) {
			    chomp $cnt;
			    print "found passphrase for '$key'\n";
			    $cnt
			} elsif($res== (2<<8)) {
			    # not found
			    # try to clip off some underscore or dot part at the end.
			    #if ($key=~ s/[_.].*?\z//s) {  nada, is from beginning still.
			    # Don't go below 4 characters:
			    my ($maybe_newkey)= $key=~ m/(.{4,})[_.]/s;
			    # $1 might be undef. But we leave it up to
			    # $next to decide when to terminate
			    @_=($maybe_newkey,$lookup); goto $next;
			    ## hmm. who will release $lookup if $next is something else than $lookup, and it's called as last? hm maybe that will never be with my alternative nexts.[?]
			} else {
			    # error. just let the process speak
			    # to stderr by itself.
			    undef
			}
		    } else {
			print "reached end of key simplification (how was this called, termination rule or so)\n"
			  if $verbose;
			undef
		    }
		};
		&$lookup ($device_path->origpath, # XX correct?
			  (is_uuiddev($device_path->origpath) ? $lookup :
			   sub {
			       my ($key1,$_next)=@_;
			       print "as second try, resolve to and check the uuid first\n"
				 if $verbose;
			       if (my $uuid= maybe_uuid_from_dev ($device_path->origpath)) {
				   print "found uuid '$uuid'\n"
				     if $verbose;
				   @_=("$uuid",sub {
					   my ($_key,$_next)=@_;
					   # third try is key1 then key   hmm forever?..
					   # ah no, $_key is schrott. derived from $uuidkey.
					   print "instead continue with '$key1'\n"
					     if $verbose;
					   @_=($key1, $lookup); goto $lookup;
				       }); goto $lookup;
			       } else {
				   print "found no uuidkey, falling back to stepping forward\n"
				     if $verbose;
				   @_=($key1, $lookup); goto $lookup;
			       }
			   }))
		  # I'm too lazy to figure out the whole chain of attempts above,
		  # and anyway better just try at the end if the above failed?:
		  || do {
		      my $bn=basename($device_path->origpath);
		      if ($bn eq ($device_path->origpath)) {
			  undef
		      } else {
			  &$lookup($bn,$lookup)
		      }
		  };
	    } else {
		undef
	    }
	};
	my $devicemapper_path= "/dev/mapper/".Force($id_); #ok diese id hier zu verwenden? well schon oder? oder sollte ich device name nehmen ?. well eben selber wählen. manuell auch ein name.  - aber ja wenn manuell verwend ich den namen beim mount point wieder.
	my $open= sub {
	    my $cmd= sub {
		my (@options)=@_;
		("cryptsetup", "luksOpen",
		 @options, $device_path->devicepath, Force($id_))
	    };
	    if (defined $maybe_pw) {
		my $out= Chj::IO::Command->new_receiver(&$cmd("--key-file=-"));
		$out->xprint($maybe_pw);
		$out->xxfinish;
	    } else {
		xxsystem (&$cmd());
	    }
	    ##hm what with failed pw's? retry?.
	};
	if (-e $devicemapper_path) {
	    # check whether it's still working
	    my ($ok,$cnt)= try_file $devicemapper_path; # yeh it's a bit a misuse of that tool right?...
	    if ($ok) {
		#keep the file info, since "it is costly"(well it's
		#not but whatever; play this game to see what kind of
		#code results):
		$device_fileinfo= $cnt; # $device_path assignment follows for sure here. [currently..(becarefulaboutcoding (how do i tell this myslf uswusf))]
		#if ($cnt=~ )
		#no need to check.
		# already set up
	    } else {
		if ($cnt=~ m|Input/output error|i) {
		    xxsystem "cryptsetup", "luksClose", $devicemapper_path;
		    &$open
		} else {
		    die "unexpected error checking '$devicemapper_path': $cnt";#well doppelmoppel path in err msg.
		}
	    }
	} else {
	    &$open
	}
	# here comes the mutation: #careful, 'combine' this mentally with the setting of $device_fileinfo above.
	$device_path->set_devicepath($devicemapper_path);
	# hm and now get the id of the decrypted volume ?. or actually
	# hide that??. hide / ignore it for now and we get the "same
	# id for mapper and for mount point" behaviour.
	# Question: maybe I even *want* that behaviour of using the id
	# of the (outmost) *container*?: I could mount a copy twice
	# you "knw!"

	# re-delete loop mount flag, since we're going to feed it a
	# device now
	delete $$mountoptions{loop};
    }

    if (not (defined $device_fileinfo) and not $opt_type) {
	#(kind of catch-all-the cases above where I didn't ~thread through )
	$device_fileinfo= do {
	    # well almost copypaste from 'try_file $devicemapper_path' above but well.
	    my ($ok,$cnt)= try_file $device_path->devicepath;
	    if ($ok) {
		$cnt
	    } else {
		die "error from try_file (cnt='$cnt')";#  better message?
	    }
	};
    }

    # seems necessary?:, previously got:
    # found passphrase for 'foo'  # on sshfs
    # using loop device: '/dev/loop10'
    # mount: special device /dev/mapper/foo does not exist
    sleep 1;

    {
	# fsck: (as a side effect, thus in a sub scope.)
	my $fstype = $opt_type || do {
	    my ($fstype)= $device_fileinfo=~ /\b(\w+) filesystem/;
	    $fstype
	};
	if ($fstype) {
	    if (lc ($fstype) eq "ext2") {
		if ($$mountoptions{ro}) {
		    # run read-only check, die if there was an error:
		    xxsystem "e2fsck","-n", $device_path->devicepath;
		} else {
		    # run a normal (interactive) check:
		    my $res= xsystem "e2fsck", $device_path->devicepath;
		    if ($res==0) {
			#ok
		    } elsif ($res < 256) {
			die "e2fsck died from signal $res";
		    } else {
			my $exitcode= $res >> 8;
			if ($exitcode > 1) {
			    die "e2fsck exited with code $exitcode, which means there was a more serious problem; not mounting";
			}
			# else ok
		    }
		}
	    } elsif ($fstype eq 'ROM'
		     or lc($fstype) eq 'squashfs') {
		# $fstype=~ /iso9660/i nope doesn't happen
		# read-only file system
	    } else {
		# always run fsck? without -n, since -n means not to
		# write notice that it's been checked, so it would run
		# each time fully. Will fail if mounted, but then? Hm,
		# todo: a mount check that detects mount of the
		# source, not target? Question: do all fsck checkers
		# behave this way? XX: some filesystems like FAT do
		# not seem to have a mount counter, hence full check
		# will happen every time!
		my $res= xsystem "fsck", $device_path->devicepath;
		if ($res==0 or $res== (1 << 8)) {
		    # OK
		} else {
		    die "fsck '".$device_path->devicepath."' exited with code $res";
		}
	    }
	} elsif ($device_fileinfo=~ /^Reiser/) { # no followed by " filesystem", hence specialcasing needed; sigh.
	    # ok
        } elsif ($device_fileinfo=~ /Macintosh HFS Extended/) {
            # ok
	} elsif (($device_fileinfo=~ /^(x86|DOS\/MBR) boot sector/
		  or
		  # starting with Debian Wheezy: (for an Android phone)
		  $device_fileinfo=~ m{boot sector.*, *FAT \((32|16) bit\)})
		 and not $device_fileinfo=~ /ext|e2fs/i  # would it turn up as something such?
		) {
	    # *usually* FAT or NTFS? We have no filesystem checker for that anyway, so ok?
	    # XXX is this never happening for ext2?
	    # ok
	} else {
	    #die "unknown filesystem type
	    die "couldn't find filesystem type in 'file' output '$device_fileinfo'";
	}
    }

    $dest_path ||=  "/mnt/".Force($id_);
    my $mount_on= sub ( $ ) {
	my ($dest_path)=@_;
	my $options= join(",", keys %$mountoptions); ### XXX: BUG right, should filter for those with true as value!
	mount( (length $options ? ("-o",$options) : ()),
	       $device_path->devicepath, # XX wooow that was a joke, mount is given the devicepath anyway? When is loop flag toggled off then or what?
	       $dest_path);
    };
    my $private_dest_path= $dest_path."/mnt";
    if (-e $dest_path) {
	if (mounted $dest_path) {
	    mydie "there is already something mounted on '$dest_path'";
	} else {
	    if (-e $private_dest_path) {
		if (mounted $private_dest_path) {
		    mydie "there is already something mounted on '$private_dest_path'";
		} else {
		    &$mount_on( $private_dest_path);
		}
	    } else {
		if ($opt_private) {
		    mydie "--private option given but private '$private_dest_path' mount point does not exist (while '$dest_path' exists)"
		} else {
		    &$mount_on( $dest_path);
		}
	    }
	}
    } else {
	if ($opt_createdir) {
	    #or ask for it  ? wl or no, just rerun program then.with the option.
	    if ($opt_private) {
		xmkdir $dest_path, 0700;
		xmkdir $private_dest_path, 0700; #(perms for consistency only, not really relevant)
		&$mount_on( $private_dest_path);
	    } else {
		xmkdir $dest_path;
		&$mount_on( $dest_path);
	    }
	} else {
	    if ($ignore_if_mountpoint_missing) {
		if ($verbose or $verbosevolume) {
		    print "ignoring, mountpoint '$dest_path' does not exist.\n";
		    return; #u oh well. (to 'miss' the below print on purpose)
		}
	    } else {
		mydie "target dir '$dest_path' does not exist and --create-dir option not given"
	    }
	}
    }
    if ($verbose or $verbosevolume) {
	print "done.\n";
    }
}

use Chj::xperlfunc qw(xlstat);

{
    package CHJ::mount_easily::item;
    use Class::Array -fields=> -publica=>
      ('path','lstat');
    sub mtime {
	my $s=shift;
	$$s[Lstat]->mtime
    }
    end Class::Array;
}

if ($opt_auto) {
    if (@ARGV) {
	usage "both --auto and arguments given"
    } else {
	my $sortfn= sub {
	    my ($v)=@_;
	    $$v[1]->mtime
	      #only extractfn should it be named.
	};
	local our @items = sort {
	    #reverse sort
	    &$sortfn ($b) <=> &$sortfn ($a)
	} map {
	    my $s= xlstat $_;
	    bless [ $_, $s ], "CHJ::mount_easily::item"
	} glob "/dev/disk/by-uuid/*";
	local our @newitems;
	my $first= shift @items
	  or die "no items in /dev/disk/by-uuid/";
	push @newitems, $first;
	my $mtime= $first->mtime;
	for my $item (@items) {
	    if (($mtime - $item->mtime) > $auto_max_delay) {
		last;
	    } else {
		push @newitems, $item;
		$mtime= $item->mtime;
	    }
	}
	#use Chj::Backtrace; use Chj::repl; repl;
	mount_easily( $_->path, 1, 1) for @newitems;
    }
} else {
    if (@ARGV) {
	mount_easily( $_, (@ARGV > 1 or $verbose)) for @ARGV;
    } else {
	usage "neither --auto nor arguments given"
    }
}

#use Chj::ruse;
#use Chj::Backtrace; use Chj::repl; repl;
