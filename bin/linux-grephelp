#!/usr/bin/perl -w

(my $email='XXX%YYY,ch')=~ tr/%,/@./;

use strict;

$0=~ /(.*?)([^\/]+)\z/s or die "?";
my ($mydir, $myname)=($1,$2);
sub usage {
    print STDERR map{"$_\n"} @_ if @_;
    print "$myname [options] regex [options]

  To be run from [the top of] a linux source tree.

  Uses git for grepping (with --cached) if .git exists, thereby
  by-passing the working directory completely!  The 'old' behaviour
  can be forced by setting the env var forceworkdir=1.

  (Christian Jaeger <$email>)
";
exit (@_ ? 1 : 0);
}

usage if (! @ARGV
	  or
	  (@ARGV==1 and $ARGV[0]=~ /^--?h(elp)?\z/));

use Chj::singlequote 'singlequote_sh';
use Chj::xperlfunc 'xexec';


if (!$ENV{forceworkdir} and -d ".git") {
    local our $regex=shift @ARGV;
    $regex=~ s/^CONFIG_//;
    local our @options= @ARGV;
    my $opt_l = (do {
	grep {
	    (/^-[lL]$/
	     or
	     /^-[^-].*[lL]$/
	     or
	     /^--files-with(?:|out)-matches/
	    )
	} @options
    });

    require Chj::IO::Command;
    my $in= Chj::IO::Command->new_sender("git", "ls-files","-z");

    #implement xargs "in userspace"
    my @files= map {
	s/\0\z//s or die;
	if (m{(?:^|/)Kconfig}) {
	    ##^hmm, forgot requirement of non-/ after Kconfig; well,
	    ##maybe useful, but different from the old implementation.
	    $_
	} else {
	    ()
	}
    } do {
	local $/="\0";
	<$in>
    };
    $in->xxfinish;

    xexec ("git", ($opt_l ?
		   "--no-pager" : ()),
	   "grep", "--cached", @options, $regex, "--", @files);

} else {

    xexec ("find -name 'Kconfig*' -print0|xargs -0 egrep "
	   .
	   join(" ",
		map {
		    singlequote_sh $_
		}
		map {
		    s/^CONFIG_//; $_
		}
		@ARGV));
}
