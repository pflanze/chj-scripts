#!/usr/bin/perl -w

# Sat Aug  2 00:05:24 CEST 2008
(my $email='XXX%YYY,ch')=~ tr/%,/@./;

use strict;

$0=~ /(.*?)([^\/]+)\z/s or die "?";
my ($mydir, $myname)=($1,$2);
sub usage {
    print STDERR map{"$_\n"} @_ if @_;
    print "$myname range(s)

  Expects fromminutes-tominues, where both values can be floating
  point (not minutes:seconds); will first seek to the first position,
  then sleep for the duration of the difference of both times.

  (Feel free to also use the loop 'prefix' program.)

  Options:
  --dry-run   enter repl instead of calling programs

  (Christian Jaeger <$email>)
";
exit (@_ ? 1 : 0);
}

use Getopt::Long;
our $verbose=0;
our $opt_dry;
GetOptions("verbose"=> \$verbose,
	   "help"=> sub{usage},
	   "dry-run"=>\$opt_dry,
	   ) or exit 1;
usage unless @ARGV;

use Chj::chompspace;
use Chj::xperlfunc;

{
    package CHJ::_Playrange;
    use Class::Array -fields=>
      -publica=> ("from", "to");
    sub new {
	my $class=shift;
	bless [ @_ ],$class
    }
    sub diff {
	my $s=shift;
	$$s[To]-$$s[From]
    }
    end Class::Array;
}

sub parserange {
    my ($str)=@_;
    my @times= map { chompspace $_ } split /-/,$str;
    @times==2
      or die "expecting a range (i.e. two numbers with a minus inbetween),"
	." got: '$str'";
    for (@times) {
	/^\d+(?:\.\d*)?\z/ or die "not a number: '$_'";
    }
    my $sleeptime= $times[1]-$times[0];
    if ($sleeptime >= 0) {
	CHJ::_Playrange->new (@times)
    } else {
	die "latter number is smaller than former: '$str'";
	## should I just reverse and reapply?
    }
}

use Time::HiRes 'sleep';

sub playrange {
    my ($range)=@_;
    xxsystem "seek", $range->from * 60;
    sleep $range->diff * 60;
}

our @ranges= map { parserange $_ } @ARGV;
if ($opt_dry) {
    #use Chj::Backtrace;
    require Chj::repl; Chj::repl::repl ();
} else {
    for (@ranges) {
	playrange $_
    }
}
