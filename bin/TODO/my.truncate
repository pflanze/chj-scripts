#!/usr/bin/perl -w

# Fre Nov 24 00:04:59 CET 2006
(my $email='pflanze%gmx,ch')=~ tr/%,/@./;

# funny that this tool doesn't exist already ?  touch doesn't do
# that. And my mksparse script ain't do this either (not even with the
# --truncate option..).

use strict;

$0=~ /(.*?)([^\/]+)\z/s or die "?";
my ($mydir, $myname)=($1,$2);
sub usage {
    print STDERR map{"$_\n"} @_ if @_;
    print "$myname newlen file(s)

  Truncate the files down to the newlen (in bytes).

  (Christian Jaeger <$email>)
";
exit (@_ ? 1 : 0);
}

my @args;
my $DEBUG=0;
for (my $i=0; $i<=$#ARGV; $i++) {
    local $_=$ARGV[$i];
    if (/^--?h(elp)?$/) {
    	usage
    } elsif ($_ eq '--') {
    	push @args, @ARGV[$i+1..$#ARGV];
    	last;
    } elsif (/^--?d(ebug)?$/) {
	$DEBUG=1;
#     } elsif (/^--?X(?:XXX(?:=(.*))?)?$/) {
#         if (defined $1) {
#             $XXX=$1
#         } else {
#             $XXX=$ARGV[++$i] or usage "missing argument for '$_' option";
#         }
    } elsif (/^-./) {
    	usage("Unknown option '$_'\n");
    } else {
    	push @args, $_
    }
}
usage unless @args;

my $newlen= shift @args;

# to promote 'Argument "foo" isn't numeric in truncate' into an exception:
#use warnings;
#warnings::enabled("FATAL"); nein
#use warnings FATAL=>qw(void); nein
use warnings FATAL=>qw(all);
#ja.

(truncate $_,$newlen or die "truncate('$_',$newlen): $!") for @args;
