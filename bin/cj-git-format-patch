#!/usr/bin/perl -w

# Sat Oct 18 21:06:55 CEST 2008
(my $_email='XXX%YYY,ch')=~ tr/%,/@./;

use strict;

$0=~ /(.*?)([^\/]+)\z/s or die "?";
my ($mydir, $myname)=($1,$2);
sub usage {
    print STDERR map{"$_\n"} @_ if @_;
    print "$myname format-patch-options

TODO:
- Return-Path  automatically
- somehow automatic selection and correction of email ? Or warn user, and tell how to set the mail in git config.
- add 'git am -3 thefile' instructions to the mail file.
- do not nest patch series -- only make them replies to a cover letter, either one given as in-reply-to option or one generated for you.

  (Christian Jaeger <$_email>)
";
exit (@_ ? 1 : 0);
}

#use Getopt::Long;
#our $verbose=0;
#GetOptions("verbose"=> \$verbose,
#	   "help"=> sub{usage},
#	   ) or exit 1;
#usage unless @ARGV;
usage if (not(@ARGV)
	  or
	  (@ARGV==1 and ($ARGV[0] eq "--help" or $ARGV[0] eq "-h")));

use Sys::Hostname;
my $hostname=hostname;
sub mogrify_email {
    my ($email)=@_;
    $email=~ s/-$hostname\@/\@/;# always ok?
    $email
}

use Chj::Mailfrom 'mailfromaddress';
our $orig_email= mailfromaddress;
our $email= mogrify_email $orig_email;


print "
[Creating patch with the following data:
  email (signed-off-by, From): $email
  -s  (--signoff, using committer identity)
  --thread
  -M
  -C

Don't forget to give the following options if necessary!:
  --in-reply-to
  --cc

Also you could use:
  --cover-letter
  --attach

Be careful that To and Return-Path are set. Example .git/config entry:
[format]
        numbered = auto
        headers = \"To: git\@vger.kernel.org\\nReturn-Path: <christian\@jaeger.mine.nu>\\n\"

NOTE: the Date: headers are those from the commit messages! Consider
using --cover-letter or I don't know what.
]

";


$ENV{EMAIL}= $email;

use Chj::xperlfunc;
use Chj::IO::Command;
use Chj::Chomp;

our $fmt= Chj::IO::Command->new_sender
 ("git",
       "format-patch",
       #"--inline",####?spielzeug? am ende aber nicht?
       #"--attach", ### vs obig? spielzeug
       "--thread", # always?
       "-s",
       "-M", "-C", # always?
       # --in-reply-to=...
       # --cc=...
       #"--cover-letter",#?
       # aber diese kann ich ja normal angeben.
       @ARGV);

our @files= map { Chomp $_ } <$fmt>;
$fmt->xxfinish;

use Chj::Fileutil qw(xCatfile xWritefileln);

#$|++;  well. since it's multiline because of Fileutil sh* handling functions anyway, I'll just do everything per line.

sub mogrify_file {
    my ($path)=@_;
    print "Editing file '$path'..\n";
    my $cnt= xCatfile $path;
    $cnt=~ sé^(From: .*<)([^\s\@<>]+\@[^\s\@<>]+)(>.*)é
      my ($pre,$orig_email,$post)=($1,$2,$3);
      my $email= mogrify_email ($orig_email);
      if ($email ne $orig_email) {
	  print "From: changing from '$orig_email' to '$email'.\n";
      } else {
	  print "From: leave it at '$email'.\n";
      }
      $pre.$email.$post
    éme;
    xWritefileln( $cnt,$path);
    #print "done.\n\n";
}

mogrify_file $_ for @files;

print "\ndone.\n";

#use Chj::ruse;
#use Chj::Backtrace; use Chj::repl; repl;
