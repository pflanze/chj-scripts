#!/usr/bin/perl -w

# Mon Jun  3 05:56:09 BST 2013
(my $email='XXX%YYY,ch')=~ tr/%,/@./;

use strict;

$0=~ /(.*?)([^\/]+)\z/s or die "?";
my ($mydir, $myname)=($1,$2);
sub usage {
    print STDERR map{"$_\n"} @_ if @_;
    print "$myname Foo::Bar

  Also accepts Foo/Bar.pm

  changes that into libfoo-bar-perl and run apt-get install on it.

  --names     show package names only, one per line
  --dry-run   show apt commands instead of actually running them
  --remove    remove instead of install

  --parse     try to pick out package names from between double
              quotes, as usually listed in Makefile.PL dependency
              declarations.

  (Christian Jaeger <$email>)
";
exit (@_ ? 1 : 0);
}

use Getopt::Long;
our $verbose=0;
our $opt_names;
our $opt_dry;
our $opt_parse;
our $opt_remove;
GetOptions("verbose"=> \$verbose,
	   "help"=> sub{usage},
	   "names"=> \$opt_names,
	   "dry-run"=> \$opt_dry,
           "remove"=> \$opt_remove,
	   "parse"=> \$opt_parse,
	   ) or exit 1;
usage unless @ARGV;

use Chj::xperlfunc ':all';
use Chj::Xbacktick;
use Chj::Chomp;

sub path2namespace {
    Chomp(Xbacktick "perl-path2namespace", "--no-use", @_)
}

sub parse {
    my ($str)=@_;
    $str=~ /"([^"]+)"/g
}

sub packagename {
    my ($module_or_path)=@_;
    my $module=
      ($module_or_path=~ m|/|
       ? path2namespace ($module_or_path)
       : $module_or_path);
    my $nam= lc $module; $nam=~ s|::|-|g;
    $nam= "lib".$nam."-perl";
    $nam
}


sub aptinstall {
    my @nam= map {
	$opt_parse ? map { packagename $_ } parse $_
	  : packagename $_
      } @_;
    if ($opt_names) {
	print $_, "\n"
	  for @nam;
    } else {
	my @cmd= ("apt-get", ($opt_remove ? "remove" : "install"), @nam);
	my $cmd= join(" ", @cmd);
	if ($opt_dry) {
	    print $cmd, "\n";
	} else {
	    print "== running $cmd ... ===========\n";
	    xsystem @cmd;
	}
    }
}

aptinstall @ARGV;


#use Chj::ruse;
#use Chj::Backtrace; use Chj::repl; repl;
