#!/usr/bin/perl -w

use strict;
BEGIN {
    $0=~ /(.*?)([^\/]*)$/s;
    unshift @INC, $1;
    require 'newperl.pl';
}

use Chj::xtmpfile;


sub usage {
    $0=~ /([^\/]*)$/;
    print "$1 Some::Module | som/where/Some::Module | Some/Module[.pm] | /some/path/mymodule
      [ -b[ase] Some::Baseclass | Some/BaseClass[.pm] ]

  Macht neues Perlmodul-File im \$EDITOR (ist zurzeit '$ENV{EDITOR}') auf.
  Im letzten Fall wird Namespace 'mymodule' angenommen (Du musst 
  /some/path::mymodule angeben wenn Du es anders willst).

  -b is ignored now.
";
	exit;
}

usage() unless @ARGV;

my $baseclass="";
my @additionaloptions;
for (my $i=0; $i<@ARGV; $i++) {
    if ($ARGV[$i]=~ /^--?b(ase)?(class)?$/) {
	$baseclass= $ARGV[$i+1] or usage();
	splice @ARGV, $i,2;
	$i--;
 	my $thing= CHJ::Newperl::Path->new($baseclass);
 	$baseclass= $thing->namespace;
    }
    elsif ($ARGV[$i]=~ /^--?h(elp)?$/) {
	usage();
    }
    elsif ($ARGV[$i]=~ /^-/) {
	# assume it's meant for the editor
	push @additionaloptions, splice @ARGV, $i,1;
	$i--;
    }
}


my @paths;
for (@ARGV) {
    if (/^--?h(elp)?$/) {
	usage();
    } else {
	my $thing= CHJ::Newperl::Path->new($_);
	create ($thing->path,
		$thing->namespace);
    }
}

edit (24,\@additionaloptions, @paths);


sub create {
    my ($path,$namespace)=@_; # global: $baseclass

    my $exporterdefs=
      $baseclass ? ""
	:
	  "use Exporter \"import\";

our \@EXPORT=qw();
our \@EXPORT_OK=qw();
our \%EXPORT_TAGS=(default => \\\@EXPORT, all=>[\@EXPORT,\@EXPORT_OK]);
";


    if (-e $path) {
	warn "Datei $path existiert bereits!\n";
	push @paths,$path;# trotzdem editieren
    } else {
	$path=~ /(.*?)[^\/]*$/ or die;
	my $folder= $1;
	if (length $folder) {
	    if (-d $folder) {
		# ok
	    } else {
		$|=1;
		print "Der Ordner '$folder' existiert nicht. Kreieren? [j/n] ";
		my $a=<STDIN>;
		if ($a=~ /^[jy]/) {
		    system "/bin/mkdir",$folder;
		} else {
		    warn "Cancel.\n";
		    return;
		}
	    }
	}
        my $out= xtmpfile $path;
        my $copy= copy();
        $out->xprint(<<"END");
$copy
#

=head1 NAME

$namespace

=head1 SYNOPSIS

=head1 DESCRIPTION

=head1 SEE ALSO

=head1 NOTE

This is alpha software! Read the status section in the package README
or on the L<website|http://functional-perl.org/>.

=cut


package $namespace;
use strict;
use utf8;
use warnings;
use warnings FATAL => 'uninitialized';
#use experimental 'signatures';
${exporterdefs}

1
END
#end $namespace;

        $out->xclose;
        $out->xputback(0666 & ~umask);
        push @paths,$path;
    }
}

