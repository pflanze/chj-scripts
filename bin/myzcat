#!/usr/bin/perl -w

use strict;
use Fcntl;

$0=~ /([^\/]+)$/s or die "?";
my $myname=$1;
sub usage {
    print "$myname file1.gz file2 file3.gz
  cat's both gzipped and uncompressed files.

  Options:
  -s|--sort  sort given arguments ascending on file mtime (default)
  -S|--no-sort  do not sort given arguments ascending on file mtime

  cj Sun, 19 May 2002 21:32:32 +0200
";
exit @_;
}

my @files;
my $opt_sort = 1;
for (my $i=0; $i<=$#ARGV; $i++) {
    local $_=$ARGV[$i];
    if (/^--?h(elp)?$/) {
	usage
    } elsif ($_ eq '--') {
	push @files, @ARGV[$i+1..$#ARGV];
	last;
    } elsif (/^--?(no-)?s(ort)?$/) {
	$opt_sort = !$1;
    } elsif (/^--?S$/) {
	$opt_sort = 0;
    } elsif (/^-/) {
	warn "Unknown option '$_'\n";
	usage(1)
    } else {
	push @files, $_
    }
}
# warn "sort: ".($opt_sort ? "yes" : "no");
usage unless @files;

sub xdefined {
    defined $_[0] ? $_[0] : die $_[1];
}
if ($opt_sort) {
    @files= map {
	$_->[1]
    } sort {
	$a->[0] <=> $b->[0]
    } map {
	[ xdefined((stat $_)[9],"stat '$_': $!"), $_ ]
    } @files;
}

for my $path (@files) {
    if (sysopen STDIN,$path,O_RDONLY) {
        my $buf;
        my $len= sysread (STDIN,$buf,128);
        if ($len > 0) {
            my $maybe_zipped= do{
                if ($len<16) { # 21 seems minimal possible length using gzip; 
                    0;
                } else {
		    my $bufcopy= $buf;
                    my $nhigh=$bufcopy=~ tr/\x80-\xff//;
                    #warn "NHIGH=$nhigh\n";
		    #warn "RATIO=".$nhigh / $len."\n";
                    ($nhigh / $len > 10/128)
		}
            };
	    my $magic = sub {
		my ($re)=@_;
		#sub { ehr  and grrr
		    ($buf=~ $re)
		#}
	    };
	    my $magic_gzip= &$magic(qr/^\x1f/);
	    my $magic_bz2= &$magic(qr/^BZ/);
	    my $magic_rz= &$magic(qr/^RZIP/);
	    my $try= sub {
		my (@cmd)=@_;
		defined (sysseek STDIN,0,0) or die "ERROR: Could not seek: $!";
                my $res= system @cmd;
		if ($res==0) {
		    1
		} elsif ($res < 256) {
		    die "command terminated by signal $res: @cmd"
		} else {
		    0
		}
	    };
	    my $try_runzip= sub {
		use Chj::xtmpdir;
		my $d= xtmpdir;
		use Chj::xperlfunc;
		use Chj::xrealpath;
		my $p= xrealpath $path;
		my $newp= "$d/foo.rz";
		my $newpun= "$d/foo";
		xsymlink $p, $newp;
		my $res= eval {
		    my $res= xsystem "runzip", $newp;
		    if ($res==0) {
			xxsystem "cat", "--", $newpun;
			###TODO: make it fail in the other places for pipe errors etc, too!
			1
		    } else {
			if ($res < 256) {
			    die "runzip terminated by signal $res"
			} else {
			    0
			}
		    }
		};
		my $e=$@;
		unlink $newp;
		unlink $newpun;
		if (ref $e or $e) {
		    die $e;
		}
		$res
	    };
            if ($maybe_zipped) {
		do {
		    my $try_for_gzip= sub {
			(&$try("gunzip")
			 or
			 &$try("bunzip2")
			 or
			 #&$try("cjrunzip")  well not feasible: would have to copy everything first
			 &$try_runzip
			)
		    };
		    if ($magic_gzip) {
			#warn "GZIP?";
			&$try_for_gzip
		    } elsif ($magic_bz2) {
			#warn "BZ2?";
			(&$try("bunzip2")
			 or
			 &$try("gunzip")
			 or
			 &$try_runzip
			)
		    } elsif ($magic_rz) {
			(
			 &$try_runzip
			 or
			 &$try("gunzip")
			 or
			 &$try("bunzip2")
			)
		    } else {
			#warn "UNKNOWNCOMPR?";
			&$try_for_gzip
		    }
		} or
		  &$try("cat")
            } else {
		&$try("cat")
	    }
        } else {
            warn "Ignoring empty file '$path'\n"
        }
    } else {
        warn "Could not open '$path': $!\n";
    }
}
