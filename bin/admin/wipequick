#!/usr/bin/perl -w

# Wed Apr  7 22:27:23 EDT 2010
(my $email='XXX%YYY,ch')=~ tr/%,/@./;

use strict;

$0=~ /(.*?)([^\/]+)\z/s or die "?";
my ($mydir, $myname)=($1,$2);
sub usage {
    print STDERR map{"$_\n"} @_ if @_;
    print "$myname file(s)

  Overwrite files contents with zeroes (once only, and does not call
  sync).

  -a  also call sync afterwards then unlink the files
  -r|--random  use random bytes instead of zeroes

  (Christian Jaeger <$email>)
";
exit (@_ ? 1 : 0);
}

use Getopt::Long;
our $verbose=0;
#our $opt_dry;
our $opt_all;
our $opt_random;
GetOptions("verbose"=> \$verbose,
	   "help"=> sub{usage},
	   "a"=>\$opt_all,
	   "random"=>\$opt_random,
	   #"dry-run"=> \$opt_dry,
	   ) or exit 1;
usage unless @ARGV;

use Chj::xopen 'xopen_update';
use Chj::IO::Command;

our $rand= Chj::IO::Command->new_sender("fastrandom")
  if $opt_random;

our $BUFSIZ= 4096;

my $buf= "\0"x4096;

sub dorandbuf {
    my $res= $rand->xread($buf,$BUFSIZ);
    $res == $BUFSIZ
      or die "expected $BUFSIZ bytes, got $res";
}

sub wipequick ( $ ) {
    my ($path)=@_;
    my $f= xopen_update $path; #hm because xopen_write truncates.
    my $s=$f->xstat;
    my $size= $s->size;
      #/ 2 ;###
    my $bufs= $size / 4096;
    my $rem= $size % 4096;
    #print "size=$size, bufs=$bufs, rem=$rem\n";#
    #for (0..$bufs) {
    dorandbuf if $opt_random;
    for (my $i=1; $i<=$bufs; $i++) {
	#print "would write a buf\n";
	$f->xprint($buf);
	dorandbuf if $opt_random;
    }
    $f->xprint(substr($buf,0,$rem));
    $f->xclose;
}

wipequick $_ for @ARGV;

use Chj::xperlfunc qw(xxsystem xunlink);
if ($opt_all) {
    xxsystem "sync";
    xunlink $_ for @ARGV;
}

#use Chj::ruse;
#use Chj::Backtrace; use Chj::repl; repl;
