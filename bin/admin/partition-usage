#!/bin/bash

# jaeger-ethlife.ethz.ch Sun, 15 Jun 2003 20:13:17 +0200

{

DEV="$1"

if [ ! "$DEV" ]; then
    echo "Bitte dev angeben!"
    exit 1
fi

ORIGARG="$DEV"
if [ ! "`echo "$DEV" | grep -F /`" ]; then
    DEV="/dev/$DEV"
fi

DEVVOLL="`chase "$DEV"`"

declare -a devpaths
if [ ! "$DEVVOLL" ]; then
    echo "Warning: looks like $DEV does not exist as a path, thus only searching for '$ORIGARG'."
    HAVE_DEV_PATH=""
    DEVNAMES="'$ORIGARG' only"
    grepcmd () {
	egrep "$ORIGARG"
    }
    devpaths=("$DEV")
else
    # strip /dev part, since mdstat does not contain it
    HAVE_DEV_PATH=1
    DEVVOLL="`echo "$DEVVOLL"|cut -d/ -f3-`"
    DEVNAMES="'$DEV' aka '$DEVVOLL'"
    grepcmd () {
	egrep "($DEV|$DEVVOLL)"
    }
    devpaths=("$DEV" "$DEVVOLL")
fi


echo "---- Checking $DEVNAMES: --------------------------------------------------------------------------------------------------------------------------------------------------------------------"|cut -b1-$COLUMNS

for f in /etc/fstab /proc/swaps /proc/mounts /proc/mdstat /etc/rawtab; do
    echo $f:
    if [ -e "$f" ]; then
	grepcmd < "$f"
    else
	echo " - (file does not exist)"
    fi
    echo
done

# this is rather quick and dirty, right?:
echo vgdisplay:
vgdisplay -v 2>/dev/null | grepcmd
echo

# dito, not even sure this will find something sensibly:
echo loop devices:
losetup -a | grepcmd
echo

# dito~:
# get device numbers
if [ "$HAVE_DEV_PATH" ]; then
    device="$(perl -we '@l=stat $ARGV[0] or die $!; $d=$l[6]; $minor= $d & 255; $major= $d >> 8; print "($major, $minor)\n"' "$DEV")"
    echo "dmsetup deps: looking for $device"
    dmsetup deps | grep -F "$device"
else
    echo "dmsetup deps: can't search dmsetup because of missing device path (see warning above); instead just looking up '$ORIGARG' instead (not making much sense, this will only show the inverse dependency direction (if anything)!)";
    dmsetup deps | grep -F "$ORIGARG"
fi
echo

echo "---- Checking with filesystem-usage -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------"|cut -b1-$COLUMNS
echo "  (you gave a device path and not a mount point, right?, so this won't bring up anything)"
for dev in "${devpaths[@]}"; do
    echo "device '$dev':"
    filesystem-usage "$dev"
done
echo "---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------"|cut -b1-$COLUMNS
echo "  (Hint: use raw -qa to find out about possible raw device bindings, "
echo "   unless you have all mappings in /etc/rawtab.)"

} | less
