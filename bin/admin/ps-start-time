#!/usr/bin/perl -w

# Fre Jan  9 18:23:49 MET 2004
(my $email='pflanze%gmx,ch')=~ tr/%,/@./;

use strict;

$0=~ /(.*?)([^\/]+)\z/s or die "?"; 
my ($mydir, $myname)=($1,$2); 
sub usage {
    print STDERR map{"$_\n"} @_ if @_;
    print "$myname pid(s)
  Print start_time of the given processes in human readable format.

  Options:
  -u|--unix-timestamp   output unix timestamp instead of localtime
  -v|--verbose          output more text

  (Christian Jaeger <$email>)
";
exit @_ ? 1 : 0;
}

my @args;
my $DEBUG=0;
my $opt_u;
my $verbose;
for (my $i=0; $i<=$#ARGV; $i++) {
    local $_=$ARGV[$i];
    if (/^--?h(elp)?$/) {
    	usage
    } elsif ($_ eq '--') {
    	push @args, @ARGV[$i+1..$#ARGV];
    	last;
    } elsif (/^--?d(ebug)?$/) {
	$DEBUG=1;
    } elsif (/^--?u(nix-?timestamp)?$/) {
	$opt_u=1;
	$verbose=0 unless defined $verbose;
    } elsif (/^--?v(erbose)?$/) {
	$verbose=1;
#     } elsif (/^--?X(?:XXX(?:=(.*))?)?$/) {
#         if (defined $1) {
#             $XXX=$1
#         } else {
#             $XXX=$ARGV[++$i] or usage "missing argument for '$_' option";
#         }
    } elsif (/^-./) {
    	usage("Unknown option '$_'\n");
    } else {
    	push @args, $_
    }
}
usage unless @args;

#$verbose=1 unless defined $verbose;

use Chj::xopen 'xopen_read';
use Time::HiRes 'time';

sub Round_2 {
    my ($v)=@_;
    int ($v*100+0.5)/100
}

# current time and uptime?
my $start_time= do {
    my $cur_uptime= (split / +/,(xopen_read "/proc/uptime")->xcontent)[0]; #seconds with decisecond precision.
    my $cur_time= Round_2(time);
    $cur_time - $cur_uptime;
};

if ($verbose) {
    my $start_time_formatted= $opt_u ? $start_time : localtime($start_time);
    print "system was started at $start_time_formatted (kooomisch, modulo sleeps undoderso)\n";
}

for my $pid (@args) {
    my $c=xopen_read("/proc/$pid/stat")->xcontent;
    my $start_uptime= (split / +/,$c)[21];
    my $start= ($start_time+$start_uptime/100);
    $start= localtime($start) unless $opt_u;
    if ($verbose) {
	print "process $pid was started $start\n";
    } else {
	print "$pid\t$start\n";
    }
}
