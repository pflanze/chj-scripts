#!/usr/bin/perl -w
sub myeval { eval $_[0] } # avoid lexical capture

# Copyright 2007-2017 by Christian Jaeger, published under the same
# terms as Perl 5.
(my $email='ch%christianjaeger,ch')=~ tr/%,/@./;

use strict;

use Chj::xpipe;
use Storable qw(fd_retrieve store_fd);
use Chj::xperlfunc ":all";
#use Chj::ruse;
#use Chj::Backtrace;
use Chj::Unix::ShellRPC::UpsyncWithSSH;
use Chj::xopendir;
use Chj::FP::Memoize 'memoize_1ary';
use Chj::singlequote;
use Digest::MD5;
use Chj::xopen 'xopen_read';
use Chj::FP::lazy;
use Chj::Git::Functions qw(git_ls_files); # load lazily?


our $sleeptime=1;#
$|++;

our $emacstmp_re= qr/^#tmp#\d+$/;

sub _mkplaymp3 {
    my ($path)=@_;
    sub {
	xsystem "mpg123","-q", $path
    }
}
*sound_upload= _mkplaymp3 "/usr/share/gtkgo/mp3/click.mp3";
*sound_delete= _mkplaymp3 "/usr/share/gtkgo/mp3/blackm.mp3";

$0=~ /(.*?)([^\/]+)\z/s or die "?";
my ($mydir, $myname)=($1,$2);
sub usage {
    print STDERR map{"$_\n"} @_ if @_;
    print "$myname basedir targetbase

  Scan basedir and its subdirectories (periodically if -c is given),
  files (that match the given --include and --exclude expressions and)
  have changed are copied to the target, which is an scp (or rsync?) 
  alike location string.

  Options:

  --gls

        Instead of using readdir, ask \`git ls-files\` for the file
        list.

  --include 'perl expr'

        A perl expression that sees the variables \$path_from_base,
        \$path an \$_ being all set to the path from the basedir, as
        well as \$filename which is set to just the file name.

        The expression should return true for files that should be
        synchronized (default: always true); The values returned by
        the expression given with the --exclude option overrides this
        if true.

        NOTE 1: this option can only be given once.

        NOTE 2: this expression is not called for directories. Only
        --exclude also treats directories!

  --exclude 'perl expr'

        exclude dir and file paths for which the given expression
        returns true. Can be given multiple times.  Filenames matching
        \".git\", $emacstmp_re, or ending in '~' are always excluded anyway.

  -c|--continuous   keep watching the hierarchy and sync files again if they
                    changed. Additionally, remove files on the target if they
                    disappear locally (only when they were observed to appear
                    during the same program run before).

  --dry|--dry-run   only show which files would be synched.

  --sound           play sounds upon uploads/deletes

  (Christian Jaeger <$email>)
";
exit (@_ ? 1 : 0);
}

my @args;
my $DEBUG=0;
our $opt_dryrun;
our $opt_continuous;
our $opt_followlinks=1; # fixed for now, ok?
our $verbose=0;
our $opt_gls;
our $opt_include;
our @exclude_expr= ('$filename eq ".git" or $filename=~ /~$/',
		    'our $emacstmp_re; $filename=~ /$emacstmp_re/');
# ^ add a --no-exclude option to clear these?
our $opt_sound;

for (my $i=0; $i<=$#ARGV; $i++) {
    local $_=$ARGV[$i];
    if (/^--?h(elp)?$/) {
    	usage
    } elsif ($_ eq '--') {
    	push @args, @ARGV[$i+1..$#ARGV];
    	last;
    } elsif (/^--?d(ebug)?$/) {
	$DEBUG=1; $verbose++;
    } elsif (/^--?v(erbose)?$/) {
	$verbose++;
    } elsif (/^--?c(ontinuous)?$/) {
	$opt_continuous=1;
    } elsif (/^--?dry(-?run)?$/) {
	$opt_dryrun=1;
    } elsif (/^--?sound$/) {
	$opt_sound=1;
    } elsif (/^--?gls$/) {
        $opt_gls= 1;
    } elsif (/^--?i(?:nclude(?:=(.*))?)?$/) {
        if (defined $1) {
	    $opt_include=$1;
        } else {
	    $opt_include= $ARGV[++$i]
	      // usage "missing argument for '$_' option";
        }
    } elsif (/^--?e(?:xclude(?:=(.*))?)?$/) {
        if (defined $1) {
            push @exclude_expr, $1
        } else {
            push @exclude_expr, $ARGV[++$i]
	      // usage "missing argument for '$_' option";
        }
    } elsif (/^-./) {
    	usage("Unknown option '$_'\n");
    } else {
    	push @args, $_
    }
}
usage unless @args == 2;

our ($basedir, $targetbase)=@args;


sub sub_from_spec ($) {
    my ($expr)=@_;
    my $s= myeval 'use strict; sub { my($path_from_base)=@_; local $_=$path_from_base; my $filename= basename $_; my $path=$path_from_base; '.$expr.' }';
    if (ref $@ or $@) {
	my $str= "$@"; chomp $str;
	die "filespec ".singlequote($expr).": $str ";
    }
    $s
}

my $include_expr= $opt_include // "1";
our $include_pred= sub_from_spec $include_expr;
our @exclude= map { sub_from_spec $_ } @exclude_expr;

sub exclude {
    my ($itempath_from_base)=@_;
    for my $exclude (@exclude) {
	if (&$exclude ($itempath_from_base)) {
	    return 1
	}
    }
    0
}


sub File_md5 ( $ ) {
    my ($path)=@_;
    my $f= xopen_read ($path);
    my $ctx = Digest::MD5->new;
    $ctx->addfile($f)
      or die $!; # does this error checking work?
    $ctx->hexdigest;
    # could also use binary, as long as I don't check remote side and
    # don't print it's value:
    #$ctx->digest
}

our $rem=
  Chj::Unix::ShellRPC::UpsyncWithSSH->new_parse_location($targetbase);

$rem->do_connect_and_chdir; #should it do this automatically ?

*memo_warn_nonfile_path= memoize_1ary sub {
    my ($itempath)=@_;
    warn "$myname: ignoring non-file item ".singlequote ($itempath)."\n";
};

*memo_warn_couldnotstat= memoize_1ary sub {
    my ($itempath)=@_;
    warn "$myname: could not stat ".singlequote($itempath).": $!\n";
};


our (
     $synchfilecontents,
     $synchfiledelete,
     $synchfilemd5,
    );

if ($opt_dryrun) {
    $synchfilecontents= sub {
	my ($path_from_base)=@_;
	print "would sync file ".singlequote ($path_from_base)."\n";
    };
    $synchfiledelete= sub {
	my ($path_from_base)=@_;
	print "would delete remote file ".singlequote ($path_from_base)."\n";
    };
} else {
    $synchfilecontents= sub {
	my ($path_from_base)=@_;
	if ($verbose) {
	    print "synching file ".singlequote($path_from_base)."\n";
	}
	$rem->upload_file_path_with_permissions
	  ($basedir."/".$path_from_base, $path_from_base);
    };
    $synchfiledelete= sub {
	my ($path_from_base)=@_;
	if ($verbose) {
	    print "deleting remote file ".singlequote($path_from_base)."\n";
	}
	$rem->remote_unlink($path_from_base);
    };
}

$synchfilemd5= sub {
    my ($path_from_base)=@_;
    if ($DEBUG) {
	print "getting md5 of remote file ".singlequote($path_from_base)."\n";
	#well only in debug mode ?
    }
    $rem->remote_md5sum($path_from_base);
};

# add sound
if ($opt_sound) {
    my $mk= sub {
	my ($orig, $play)=@_;
	sub {
	    $orig->(@_);
	    &$play;
	}
    };
    $synchfilecontents= &$mk($synchfilecontents, \&sound_upload);
    $synchfiledelete= &$mk($synchfiledelete, \&sound_delete);
}

package PFLANZE::FakeDirhandle {
    use FP::Struct [ "items" ];
    sub xnread {
        my $s=shift;
        shift @{$$s{items}}
    }
    _END_
}

sub fakeopendir {
    my ($tree, $path)= @_;

    my @p= split /\//, $path;
    my $t= $tree;
    while (@p) {
        my $segment= shift @p;
        next if $segment eq ".";
        die "bug" if $segment eq "..";
        my $is_last= !@p;
        if (defined (my $t2= $$t{$segment})) {
            if (! ref $t2 and $t2 eq "FILE") {
                if ($is_last) {
                    die "this is an opendir, not open file, but '$path' is a file";
                    # except if it's a subrepo, XX ?
                } else {
                    die "bug, '$path' too long for tree"
                }
            } else {
                $t = $t2;
            }
        } else {
            die "bug: unknown path '$path' in tree"
        }
    }
    PFLANZE::FakeDirhandle->new([sort keys %$t])
}


our $Stat= ($opt_followlinks ? \&Xstat : \&Xlstat);

sub scan_base ( $ $ ) {
    my ($lastsynched, $checkprintthunk)=@_;
    my $synched={};

    my $tree; # only used if $opt_gls
    if ($opt_gls) {
        $tree= {};
        for my $path (git_ls_files) {
            my @p= split /\//, $path;
            my $t= $tree;
            while (@p) {
                my $segment= shift @p;
                my $is_last= !@p;
                my $t2;
                if (defined ($t2= $$t{$segment})) {
                    die "bug: duplicate" if $is_last;
                } else {
                    $t2= $is_last ? "FILE" : {};
                    $$t{$segment}= $t2;
                }
                $t = $t2;
            }
        }
    }

    my $scandir; $scandir= sub {
	my ($path_from_base)=@_;
	print "scanning '$path_from_base'\n" if $DEBUG;
	my $path= $basedir."/".$path_from_base;
	my $d= $opt_gls ? fakeopendir($tree, $path_from_base) : xopendir($path);
	while (defined (my $item= $d->xnread)) {
	    my $itempath_from_base= $path_from_base."/".$item;
	    if (exclude($itempath_from_base)) {
		print "ignoring '$itempath_from_base'\n"
		  if $verbose>1;
	    } else {
		my $itempath= $basedir."/".$itempath_from_base;
		if (my $st= $Stat->($itempath)) {

		    my $check_synchit= sub {
			my ($maybe_oldmd5)=@_;
			my $newmd5= File_md5 ($itempath);
			if ($maybe_oldmd5) {
			    if ($newmd5 eq $maybe_oldmd5) {
				# do nothing -- even if mtimes differ
			    } else {
				Force ($checkprintthunk);
				&$synchfilecontents ($itempath_from_base);
			    }
			} else {
			    Force ($checkprintthunk);
			    # only actually sync it if it's not
			    # already the same remotely:
			    my $maybe_remotemd5= eval {
				&$synchfilemd5 ($itempath_from_base);
			    };
			    # XX check kind of error?
			    if ($maybe_remotemd5 and
				($maybe_remotemd5 eq $newmd5)) {
				print "content of file ".
				  singlequote ($itempath_from_base).
				    " is already the same\n"
				      if $verbose;
			    } else {
				&$synchfilecontents ($itempath_from_base);
			    }
			}
			$$synched{$itempath_from_base}=[$st,$newmd5];
		    };

		    if ($st->is_dir) {
			&$scandir ($itempath_from_base);
		    } elsif ($st->is_file) {
			if (&$include_pred ($itempath_from_base)) {
			    # already done or not ?.
			    if (my $old= $$lastsynched{$itempath_from_base}) {
				my ($oldst,$oldmd5)=@$old;
				if ($oldst->equal_content($st)) {
				    # equal_content is enough; equal()
				    # would also check
				    # permissions. And those we don't
				    # sync currently.  If mtime is
				    # very near, then check the md5
				    # again (against races)
				    if ((my $timediff= time - $st->mtime)
					< 2) {
					&$check_synchit ($oldmd5);
				    } else {
					# do nothing--well, still have
					# to copy over the "currently
					# live files" data.
					$$synched{$itempath_from_base}=
					  $$lastsynched{$itempath_from_base};
				    }
				} else {
				    &$check_synchit ($oldmd5)
				}
			    } else {
				&$check_synchit (undef)
			    }
			}
		    } else {
			memo_warn_nonfile_path ($itempath);
		    }
		} else {
		    memo_warn_couldnotstat ($itempath);
		}
	    }
	}
    };

    &$scandir(".");
    # "" does not work because "/paths" for remote would be wrong, but
    # "." really means CWD usually, ?...

    undef $scandir;

    # which files have been deleted?
    for my $key (keys %$lastsynched) {
	if ($$synched{$key}) {
	    # ok
	} else {
	    Force ($checkprintthunk);
	    &$synchfiledelete ($key)
	}
    }

    $synched
}


if ($opt_continuous) {
    local our $lastsynched={};
    while (1) {
	my ($read,$write)=xpipe;
	if (my $pid= xfork) {
	    $write->xclose;
	    print "parent waiting for child to send data and exit..\n"
	      if $DEBUG;
	    $lastsynched= fd_retrieve($read)
	      or die "fd_retrieve: ?: $!";
	    print "parent got child data..\n"
	      if $DEBUG;
	    xxwait;
	    print "parent got child status ok.\n"
	      if $DEBUG;
	} else {
	    $read->xclose;
	    for (1..600) {
		print "child: iteration $_\n"
		  if $DEBUG;
		# after so many iterations it will have leaked about
		# 3MB. (XX do recent perls not leak anymore,
		# removable?)
		my $checkprintthunk= Delay {
		    print "at ".localtime().":\n"
		      if ($verbose or $opt_dryrun or $DEBUG);
		};
		$lastsynched= scan_base($lastsynched, $checkprintthunk);
		sleep $sleeptime;
	    }
	    store_fd($lastsynched,$write)
	      or die "store_fd: ?: $!";
	    exit 0;
	}
    }
} else {
    scan_base({}, Delay { undef });
}

