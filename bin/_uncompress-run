#!/usr/bin/perl -w

# Son Jun  3 22:12:16 CEST 2007
(my $email='pflanze%gmx,ch')=~ tr/%,/@./;

use strict;

our $filecmd= "/usr/bin/file";

$0=~ /(.*?)([^\/]+)\z/s or die "?";
my ($mydir, $myname)=($1,$2);
sub usage {
    print STDERR map{"$_\n"} @_ if @_;
    print "$myname originalprogram [options] possibly-gzipped-file

  if one file is given and it is compressed, uncompress it into a tempfile
  and call originalprogram with the original options.

  See ${mydir}gv and ${mydir}xpdf wrappers, they are calling me.

  (Christian Jaeger <$email>)
";
    exit (@_ ? 1 : 0);
}

@ARGV or usage;
usage if $ARGV[0]=~ /^--?h(elp)?$/;

our $origprog=shift @ARGV;

our @args= map {
    # the argument, and whether it is a filearg
    [ $_, not /^-/ ]
} @ARGV;

our @fileargs= grep {
    $$_[1]
} @args;

use Chj::xperlfunc;
use Chj::Unix::SuperPATH;

sub normalexe {
    &{
	if ($origprog=~ m|/|) {
	    \&xexec
	} else {
	    \&xsuperexec
	}
    }
      ($origprog,@ARGV);
}

use Chj::IO::Command;
use Chj::xtmpfile;
use Chj::xopen 'xopen_read';
use Chj::xpipeline 'xreceiverpipeline_with_out_to';
use Chj::xrealpath;
use Chj::xtmpdir;
use Chj::xperlfunc 'basename';

our $TMPDIR="/tmp";

sub maybe_uncompress {
    my ($file)=@_;
    $file= xrealpath $file;
    my $c=  Chj::IO::Command->new_sender($filecmd,"--",$file);
    my $cnt=$c->xcontent;
    $c->xxfinish;
    if (my ($suffix,$decmd)= do {
	if ($cnt=~ /: gzip compressed/) {
	    ("gz", ["gunzip"])
	} elsif ($cnt=~ /: bzip2 compressed/) {
	    ("bz2", ["bunzip2"])
	} elsif ($cnt=~ /: XZ compressed/) {
	    ("xz", ["xz", "-d"])
	} else {
	    ()
	}
    }) {
	my $f= xopen_read $file;
	my $tdir= xtmpdir $TMPDIR."/";
	my $filename= basename $file;
	$filename=~ s/\.$suffix\z//is;
	my $t= xtmpfile "$tdir/$filename";
	my $r= xreceiverpipeline_with_out_to($t, $decmd);
	$f->xsendfile_to($r);
	$r->xxfinish;
	$t->xclose;
	$t->xputback(0644);
	bless [$tdir, $t->path], "CJ_uncompress_run::Tmpfile"
    } else {
	undef
    }
}

{
    package CJ_uncompress_run::Tmpfile;
    # fields [tdir, filepath]
    sub path {
	my $s=shift;
	$$s[1]
    }
    sub DESTROY {
	my $s=shift;
	unlink $s->path;
	# let the tmpdir clean itself up by itself.
    }
}

if (@fileargs==1) {
    my $file= $fileargs[0][0];
    if (my $uncompressed= maybe_uncompress $file) {
	xxsystem $origprog, map {
	    if ($$_[1]) {
		$uncompressed->path
	    } else {
		$$_[0]
	    }
	} @args;
    } else {
	normalexe;
    }
} else {
    normalexe;
}

