#!/usr/bin/perl -w

# Wed 11 Nov 10:58:27 GMT 2020
(my $email='ch%christianjaeger,ch')=~ tr/%,/@./;

use strict;
use utf8;
use warnings;
use warnings FATAL => 'uninitialized';
use experimental 'signatures';

$0=~ /(.*?)([^\/]+)\z/s or die "?";
my ($mydir, $myname)=($1,$2);
sub usage {
    print STDERR map{"$_\n"} @_ if @_;
    print "$myname patchfile...

  Split the given patchfile(s) into new files so that each new file
  only contains the part of the patch for one particular target file.

  Options:

    --hunks    Split on hunk boundaries, too.
    --changes  Split on individual change groups, too (implies --hunks)
    --quiet    Do not print the generated files.

  (Christian Jaeger <$email>)
";
exit (@_ ? 1 : 0);
}

use Getopt::Long;
my $verbose=0;
my $opt_hunks;
my $opt_changes;
my $opt_quiet;
#our $opt_dry;
GetOptions("verbose"=> \$verbose,
           "quiet"=> \$opt_quiet,
           "help"=> sub{usage},
           "hunks"=> \$opt_hunks,
           "changes"=> \$opt_changes,
           #"dry-run"=> \$opt_dry,
           ) or exit 1;
usage unless @ARGV;

$opt_hunks = 1 if $opt_changes;

use Chj::xtmpfile;
use Chj::xopen 'xopen_read';
use Chj::xperlfunc 'xprintln';
use FP::List qw(list list_append);

sub rewrite_head {
    my ($file, $head, $prefix)= @_;
    $head=~ s/(\nsubject: *(?:\[PATCH\] *)?)([^\n]*)/$1$prefix$2/si
        or warn "could not find subject in head of file: '$file'";
    $head
}


sub starts_with_space($line) {
    $line=~ /^ /
}
sub starts_with_minusplus($line) {
    $line=~ /^[+-]/
}
sub starts_with_minus($line) {
    $line=~ /^-/
}

sub split_hunk($hunk) { # hunk -> hunks
    my $hunk_ends_with_newline = $hunk =~ /\n\z/s;
    my ($head, @lines) = split /\n/, $hunk;
    my ($orig_start, $orig_len, $patched_start, $patched_len, $head_post) =
        $head =~ /^\@\@ -(\d+),(\d+) \+(\d+),(\d+) (.*)/s
        or die "invalid hunk head: '$head'";
    
    my $current_orig_start = $orig_start;
    my $current_patched_start = $patched_start;
    my $lines = list @lines;
    my @hunks;
    while (1) {
        my ($pre, $rest)= $lines->take_while_and_rest(\&starts_with_space);
        my ($group, $rest2)= $rest->take_while_and_rest(\&starts_with_minusplus);
        my ($post, $rest3)= $rest2->take_while_and_rest(\&starts_with_space);

        my $newpre= $pre->reverse->take(3)->reverse;
        my $newpost= $post->take(3);

        my $pre_len = $pre->length;
        my $newpre_len = $newpre->length;
        my $group_minus_len = $group->filter(\&starts_with_minus)->length;
        my $group_plus_len = $group->length - $group_minus_len;
        # my $post_len = $post->length;
        my $newpost_len = $newpost->length;

        my $new_orig_len = $newpre_len + $group_minus_len + $newpost_len;
        my $new_patched_len = $newpre_len + $group_plus_len + $newpost_len;

        #use FP::Repl; repl;
        push @hunks, [
            "\@\@ -$current_orig_start,$new_orig_len +$current_patched_start,$new_patched_len $head_post",
            list_append($newpre,
                        $group,
                        $newpost),
            $rest3->is_null
            ];
        if ($rest3->is_null) {
            last
        } else {
            $lines = $rest2;
            $current_orig_start += $pre_len + $group_minus_len; # not $new_orig_len
            $current_patched_start += $pre_len + $group_plus_len; # not $new_patched_len
            # ^ assumes  one after each other!
        }
    }

    map {
        my ($head,
            $l,
            $is_last)= @$_;
        join("\n",
             $head,
             $l->values)
            .(($is_last and !$hunk_ends_with_newline) ? "" : "\n")
    } @hunks
}

sub write_diff {
    my ($head, $diff, $origpath)=@_;
    my ($fileb)= $diff=~ /^diff.* (\S+)/
        or die "missing file in first line of diff: '$diff'";
    my $prefix= $fileb;
    $prefix=~ s|^[ab]/||;
    my $addon= $prefix;
    $addon=~ s|/|_|sg;
    my $path= $origpath;
    $path=~ s{(^|/)([^/]+?)(\.[^.]+)?\z}{"$1$2-$addon".($3//"")}se;
    $path ne $origpath
        or die "path is the same as origpath, '$path'";
    if ($opt_hunks) {

        # Should really do some class(es), parse once, represent.
        my ($diffline, $maybe_indexline, $minus, $plus, $rest)=
            $diff=~ m{^
                      (diff\ [^\n]*)\n
                      (?:(index\ [^\n]*)\n)?
                      (---\ [^\n]*)\n
                      (\+\+\+\ [^\n]*)\n
                      (.*)
                 }sx
                   or die "invalid patch file format: '$diff'";
        my @hunks= split /(?<=\n)(?=\@\@ )/, $rest;

        if ($opt_changes) {
            @hunks = map { split_hunk $_ } @hunks;
            #use FP::Repl;repl;
        }

        my $i= 0;
        for my $hunk (@hunks) {
            my $diff = join("\n",
                            $diffline,
                            # $indexline, needed for perms? fix it?
                            $minus,
                            $plus,
                            $hunk);
            my $i000 = sprintf('%03d', $i);
            my $path2= $path;
            $path2=~ s/\.patch$/-$i000.patch/
                or die "suffix wrong?";
            my $t= xtmpfile $path2;
            $t->xprint(rewrite_head($origpath, $head, "$prefix $i000: "),
                       $diff);
            $t->xclose;
            $t->xputback(0666);
            xprintln $t->path unless $opt_quiet;
            $i++;
        }
    } else {
        my $t= xtmpfile $path;
        $t->xprint(rewrite_head($origpath, $head, "$prefix: "),
                   $diff);
        $t->xclose;
        $t->xputback(0666);
        xprintln $t->path unless $opt_quiet;
    }
}

sub splitpatch {
    my ($path)=@_;
    my $cnt= xopen_read($path)->xcontent; ## unsafe
    $cnt=~ s/\n(?:-- \n(?:[^\n]*\n){0,3})?\z/\n/s;
    my ($head, @diffs)= split /(?<=\n)(?=diff )/, $cnt;
    @diffs or die "file does not appear to contain diffs: '$path'";
    for my $diff (@diffs) {
        write_diff $head, $diff, $path
    }
}


splitpatch $_ for @ARGV;

